(this["webpackJsonpforbidden-desert"]=this["webpackJsonpforbidden-desert"]||[]).push([[0],{55:function(e,t,s){},57:function(e,t,s){},93:function(e,t,s){"use strict";s.r(t);var i=s(1),r=s.n(i),n=s(48),a=s.n(n),l=s(3),c=s(4),o=s(5),d=s(6),p=s(49),h={setup:function(e){return{players:j(e.numPlayers),tiles:b(),stormLevel:0,lastDrawType:[]}},moves:{move:function(e,t,s){e.players[t.currentPlayer].position=s},dig:function(e,t,s){e.tiles[s].sandCount--},excavate:{move:function(e,t){e.tiles[e.players[t.currentPlayer].position].isRevealed=!0},undoable:!1},giveWater:{move:function(e,t,s){e.players[t.currentPlayer].water-=1,e.players[s].water+=1},noLimit:!0},doNothing:function(e,t){t.events.endTurn()},setPlayerInfo:{move:function(e,t,s,i){e.players[s].role=i,"Archeologist"===i||"Climber"===i?(e.players[s].maxWater=3,e.players[s].water=3):"Explorer"===i||"Meteorologist"===i||"Navigator"===i?(e.players[s].maxWater=4,e.players[s].water=4):(e.players[s].maxWater=5,e.players[s].water=5)},undoable:!1,noLimit:!0},setDifficulty:{move:function(e,t,s){e.stormLevel=s},undoable:!1,noLimit:!0},removeWater:{move:function(e,t,s){e.players[s].water-=1},noLimit:!0}},turn:{moveLimit:4,onEnd:function(e,t){e.lastDrawType=[];var s=t.random.Die(31);if(s<=4){for(var i=0;i<e.players.length;i++)"tunnel"===e.tiles[e.players[i].position].type&&e.tiles[e.players[i].position].isRevealed||(e.players[i].water-=1);e.lastDrawType.push("Sun Beats Down")}else if(s<=7)e.stormLevel+=1,e.lastDrawType.push("Storm Picks Up");else{for(var r=0;r<e.tiles.length&&"storm"!==e.tiles[r].type;r++);var n=r+1,a=e.tiles[r];e.tiles[r]=e.tiles[n],e.tiles[n]=a;var l=[];for(i=0;i<e.players.length;i++)e.players[i].position===n&&l.push(i);for(i=0;i<l.length;i++)e.players[l[i]].position-=1;e.lastDrawType.push("Wind")}}},endIf:function(e,t){for(var s=0;s<e.players.length;s++)if(-1===e.players[s].water)return!0;return!1}},j=function(e){for(var t=[],s=u(25);12===s;)s=u(25);for(var i=0;i<e;i++)t.push({role:"",position:s,water:0,maxWater:0});return t};function u(e){return Math.floor(Math.random()*e)}var b=function(){for(var e=[],t=0;t<2;t++)e.push({isRevealed:!1,sandCount:0,type:"well"});e.push({isRevealed:!1,sandCount:0,type:"mirage"});for(t=0;t<9;t++)e.push({isRevealed:!1,sandCount:0,type:"gear"});for(t=0;t<3;t++)e.push({isRevealed:!1,sandCount:0,type:"tunnel"});for(t=0;t<4;t++)for(var s=0;s<2;s++)e.push({isRevealed:!1,sandCount:0,type:"clue",part:t,pos:s});e.push({isRevealed:!1,sandCount:0,type:"launchpad"}),function(e){var t,s=e.length;for(;0!==s;){t=Math.floor(Math.random()*s),s--;var i=[e[t],e[s]];e[s]=i[0],e[t]=i[1]}}(e),e.splice(12,0,{isRevealed:!1,sandCount:0,type:"storm"});var i=[2,6,8,10,14,16,18,22];for(t=0;t<i.length;t++)e[i[t]].sandCount=1;return e};s(55);var v=s(0),x=function(e){Object(o.a)(s,e);var t=Object(d.a)(s);function s(){var e;Object(l.a)(this,s);for(var i=arguments.length,r=new Array(i),n=0;n<i;n++)r[n]=arguments[n];return(e=t.call.apply(t,[this].concat(r))).state={assignID:0,assignDifficulty:!1,digging:!1,givingWater:!1},e}return Object(c.a)(s,[{key:"assignRoleTo",value:function(e,t){this.props.moves.setPlayerInfo(e,t),this.setState({assignID:this.state.assignID+1})}},{key:"assignDifficultyTo",value:function(e){this.props.moves.setDifficulty(e),this.setState({assignDifficulty:!0})}},{key:"onClickTile",value:function(e){(this.isAdjacentTile(e)||this.isSameTile(e))&&(this.state.digging&&this.props.G.tiles[e].sandCount>0?(this.props.moves.dig(e),this.setState({digging:!1})):!this.isSameTile(e)&&this.props.G.tiles[e].sandCount<2&&!this.state.digging&&!this.isBuried()&&this.props.moves.move(e))}},{key:"excavate",value:function(){!1===this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].isRevealed&&0===this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].sandCount&&this.props.moves.excavate()}},{key:"giveWaterTo",value:function(e){this.props.G.players[e].position===this.props.G.players[this.props.ctx.currentPlayer].position&&this.props.G.players[e].water<this.props.G.players[e].maxWater&&this.props.G.players[this.props.ctx.currentPlayer].water>0&&(this.props.moves.giveWater(e),this.setState({givingWater:!1}))}},{key:"isAdjacentTile",value:function(e){var t=this.props.G.players[this.props.ctx.currentPlayer].position;return e>=0&&e<=24&&(e===t-1||e===t+1||e===t-5||e===t+5)}},{key:"isSameTile",value:function(e){return e===this.props.G.players[this.props.ctx.currentPlayer].position}},{key:"isBuried",value:function(){return this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].sandCount>1}},{key:"render",value:function(){var e=this;if(this.state.assignID<this.props.ctx.numPlayers)return Object(v.jsxs)("div",{className:"center",children:[Object(v.jsx)("div",{id:"title",children:"Role Selection"}),Object(v.jsxs)("div",{className:"header",children:["Choose role for Player ",this.state.assignID,":"]}),Object(v.jsx)("p",{}),Object(v.jsxs)("div",{children:[Object(v.jsx)("button",{onClick:function(){e.assignRoleTo(e.state.assignID,"Archeologist")},children:"Archeologist"}),Object(v.jsx)("button",{onClick:function(){e.assignRoleTo(e.state.assignID,"Climber")},children:"Climber"}),Object(v.jsx)("button",{onClick:function(){e.assignRoleTo(e.state.assignID,"Explorer")},children:"Explorer"}),Object(v.jsx)("button",{onClick:function(){e.assignRoleTo(e.state.assignID,"Meteorologist")},children:"Meteorologist"}),Object(v.jsx)("button",{onClick:function(){e.assignRoleTo(e.state.assignID,"Navigator")},children:"Navigator"}),Object(v.jsx)("button",{onClick:function(){e.assignRoleTo(e.state.assignID,"Water Carrier")},children:"Water Carrier"})]}),Object(v.jsx)("p",{}),Object(v.jsxs)("div",{children:[Object(v.jsxs)("div",{children:[Object(v.jsx)("p",{id:"header",children:"Archeologist"}),Object(v.jsxs)("ul",{children:[Object(v.jsx)("li",{children:"Removes 2 sand when digging instead of 1."}),Object(v.jsx)("li",{children:"Water capacity: 3"})]})]}),Object(v.jsxs)("div",{children:[Object(v.jsx)("p",{id:"header",children:"Climber"}),Object(v.jsxs)("ul",{children:[Object(v.jsx)("li",{children:"Carry: moves other players along with Climber. (Cost: free)"}),Object(v.jsx)("li",{children:"Can move over tiles with 2 or more sand."}),Object(v.jsx)("li",{children:"Allows all players on Climber's current tile to leave even with 2 or more sand."}),Object(v.jsx)("li",{children:"Water capacity: 3"})]})]}),Object(v.jsxs)("div",{children:[Object(v.jsx)("p",{id:"header",children:"Explorer"}),Object(v.jsxs)("ul",{children:[Object(v.jsx)("li",{children:"Can move, dig, and use items diagonally."}),Object(v.jsx)("li",{children:"Water capacity: 4"})]})]}),Object(v.jsxs)("div",{children:[Object(v.jsx)("p",{id:"header",children:"Meteorologist"}),Object(v.jsxs)("ul",{children:[Object(v.jsx)("li",{children:"Mitigate: draw 1 less Storm at the end of the turn. (Cost: 1 action)"}),Object(v.jsx)("li",{children:"Water capacity: 4"})]})]}),Object(v.jsxs)("div",{children:[Object(v.jsx)("p",{id:"header",children:"Navigator"}),Object(v.jsxs)("ul",{children:[Object(v.jsx)("li",{children:"Direct: move another player up to 3 tiles. Climber and Explorer keep their abilities. (Cost: 1 action)"}),Object(v.jsx)("li",{children:"Water capacity: 4"})]})]}),Object(v.jsxs)("div",{children:[Object(v.jsx)("p",{id:"header",children:"Water Carrier"}),Object(v.jsxs)("ul",{children:[Object(v.jsx)("li",{children:"Gather Water: take 2 water from an excavated well. (Cost: 1 action)"}),Object(v.jsx)("li",{children:"Give Water: give 1 water to an adjacent player. (Cost: free)"}),Object(v.jsx)("li",{children:"Water capacity: 5"})]})]})]})]});if(!1===this.state.assignDifficulty)return Object(v.jsxs)("div",{className:"center",children:[Object(v.jsx)("div",{id:"title",children:"Difficulty Selection"}),Object(v.jsx)("p",{}),Object(v.jsxs)("div",{children:[Object(v.jsx)("button",{onClick:function(){e.assignDifficultyTo(0)},children:"Novice"}),Object(v.jsx)("button",{onClick:function(){e.assignDifficultyTo(1)},children:"Normal"}),Object(v.jsx)("button",{onClick:function(){e.assignDifficultyTo(2)},children:"Elite"}),Object(v.jsx)("button",{onClick:function(){e.assignDifficultyTo(3)},children:"Legendary"})]}),Object(v.jsx)("p",{}),Object(v.jsx)("div",{children:"(Difficulty sets the starting storm level.)"})]});for(var t=[],s=0;s<5;s++){for(var i=[],r=function(){a=[];var t=5*s+n;if("storm"===e.props.G.tiles[t].type)i.push(Object(v.jsx)("td",{id:"storm"},t));else{for(l=[],c=0;c<e.props.G.players.length;c++)e.props.G.players[c].position===t&&l.push(c);if(a.push(Object(v.jsx)("div",{className:"player",children:l})),0!==e.props.G.tiles[t].sandCount){for(o="",d=0;d<e.props.G.tiles[t].sandCount;d++)o=o.concat("l");a.push(Object(v.jsxs)("div",{className:e.props.G.tiles[t].sandCount>1?"sand red":"sand",children:["Sand: ",o]}))}!1===e.props.G.tiles[t].isRevealed?i.push(Object(v.jsx)("td",{className:"well"===e.props.G.tiles[t].type||"mirage"===e.props.G.tiles[t].type?"unrevealed-water":"unrevealed",onClick:function(){return e.onClickTile(t)},children:a},t)):i.push(Object(v.jsx)("td",{className:e.props.G.tiles[t].type,onClick:function(){return e.onClickTile(t)},children:a},t))}},n=0;n<5;n++){var a,l,c,o,d;r()}t.push(Object(v.jsx)("tr",{children:i},s))}var p=[];if(p.push(Object(v.jsxs)("div",{children:[Object(v.jsx)("button",{onClick:function(){e.setState({digging:!e.state.digging})},children:"Dig"}),Object(v.jsx)("div",{children:this.state.digging?"Choose a tile to dig.":""}),Object(v.jsx)("button",{onClick:function(){e.excavate()},children:"Excavate"}),Object(v.jsx)("button",{onClick:function(){e.setState({givingWater:!e.state.givingWater})},children:"Give water to..."})]})),this.state.givingWater){var h=function(){var t=s;p.push(Object(v.jsx)("div",{children:Object(v.jsxs)("button",{onClick:function(){e.giveWaterTo(t)},children:["Player ",s]})}))};for(s=0;s<this.props.G.players.length;s++)h()}p.push(Object(v.jsxs)("div",{children:[Object(v.jsx)("button",{onClick:function(){e.props.undo()},children:"Undo"}),Object(v.jsx)("button",{onClick:function(){e.props.moves.doNothing()},children:"Do nothing"})]}));var j=[];j.push(Object(v.jsx)("div",{children:"Players:"}));var u,b,x,f,y,O=[];for(s=0;s<this.props.ctx.numPlayers;s++)O.push(Object(v.jsxs)("div",{children:[s," - ",this.props.G.players[s].role," \ud83c\udf7c ",this.props.G.players[s].water," / ",this.props.G.players[s].maxWater]}));j.push(O),2===this.props.ctx.numPlayers?(u="1 - 3",b="4 - 7",x="8 - 10",f="11 - 12",y="13"):3===this.props.ctx.numPlayers||4===this.props.ctx.numPlayers?(u="1 - 4",b="5 - 8",x="9 - 11",f="12 - 13",y="14"):5===this.props.ctx.numPlayers&&(u="1 - 5",b="6 - 9",x="10 - 12",f="13 - 14",y="15"),j.push(Object(v.jsxs)("div",{children:[Object(v.jsx)("p",{}),Object(v.jsxs)("div",{children:["Current storm level: ",this.props.G.stormLevel]}),Object(v.jsx)("p",{}),Object(v.jsx)("div",{children:"Info:"}),Object(v.jsx)("div",{children:"Draw 2 at level 0"}),Object(v.jsxs)("div",{children:["Draw 3 at levels ",u]}),Object(v.jsxs)("div",{children:["Draw 4 at levels ",b]}),Object(v.jsxs)("div",{children:["Draw 5 at levels ",x]}),Object(v.jsxs)("div",{children:["Draw 6 at levels ",f]}),Object(v.jsxs)("div",{children:["Game over at level ",y]}),Object(v.jsx)("div",{children:"Probability of Sun Beats Down: 12.9%"}),Object(v.jsx)("div",{children:"Probability of Storm Picks Up: 9.7%"})]})),j.push(Object(v.jsxs)("div",{children:[Object(v.jsx)("p",{}),"End of last turn:"]}));for(s=0;s<this.props.G.lastDrawType.length;s++)j.push(Object(v.jsx)("div",{children:this.props.G.lastDrawType[s]}));return Object(v.jsxs)("div",{children:[Object(v.jsxs)("div",{className:"fl",children:[Object(v.jsxs)("div",{className:"header center",children:[Object(v.jsxs)("div",{children:["Player ",this.props.ctx.currentPlayer,"'s turn"]}),Object(v.jsxs)("div",{children:["Actions left in turn: ",4-this.props.ctx.numMoves]})]}),Object(v.jsx)("table",{children:Object(v.jsx)("tbody",{children:t})}),Object(v.jsx)("div",{className:"center",children:p})]}),Object(v.jsx)("div",{className:"fl",children:j})]})}}]),s}(r.a.Component),f=(s(57),function(e){Object(o.a)(s,e);var t=Object(d.a)(s);function s(){var e;Object(l.a)(this,s);for(var i=arguments.length,r=new Array(i),n=0;n<i;n++)r[n]=arguments[n];return(e=t.call.apply(t,[this].concat(r))).state={numPlayers:null},e}return Object(c.a)(s,[{key:"render",value:function(){var e=this;if(null===this.state.numPlayers)return Object(v.jsxs)("div",{className:"center",children:[Object(v.jsx)("div",{children:"!! THIS IS A WORK IN PROGRESS !!"}),Object(v.jsx)("div",{id:"title",children:"FORBIDDEN DESERT"}),Object(v.jsx)("div",{children:"Based off the original game designed by Matt Leacock."}),Object(v.jsx)("div",{children:Object(v.jsx)("a",{href:"https://www.gamewright.com/gamewright/pdfs/Rules/ForbiddenDesertTM-RULES.pdf",children:"Official rules manual"})}),Object(v.jsx)("div",{children:Object(v.jsx)("a",{href:"https://boardgamegeek.com/boardgame/136063/forbidden-desert",children:"BoardGameGeek listing"})}),Object(v.jsx)("div",{children:Object(v.jsx)("a",{href:"https://github.com/hwabis/forbidden-desert",children:"Source code"})}),Object(v.jsxs)("div",{id:"header",children:[Object(v.jsx)("p",{children:"Select number of players:"}),Object(v.jsx)("button",{onClick:function(){return e.setState({numPlayers:2})},children:"2"}),Object(v.jsx)("button",{onClick:function(){return e.setState({numPlayers:3})},children:"3"}),Object(v.jsx)("button",{onClick:function(){return e.setState({numPlayers:4})},children:"4"}),Object(v.jsx)("button",{onClick:function(){return e.setState({numPlayers:5})},children:"5"})]})]});var t=Object(p.a)({game:h,numPlayers:this.state.numPlayers,board:x});return Object(v.jsx)("div",{children:Object(v.jsx)(t,{})})}}]),s}(r.a.Component));a.a.render(Object(v.jsx)(r.a.StrictMode,{children:Object(v.jsx)(f,{})}),document.getElementById("root"))}},[[93,1,2]]]);
//# sourceMappingURL=main.1218a8d9.chunk.js.map