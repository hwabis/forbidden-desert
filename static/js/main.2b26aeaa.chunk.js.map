{"version":3,"sources":["Game.js","board.js","App.js","index.js"],"names":["ForbiddenDesert","setup","ctx","players","setupPlayers","numPlayers","tiles","setupTiles","stormLevel","numDraws","lastDrawType","collectedParts","stormPicksUpProb","sunBeatsDownProb","turnEnded","numMoves","isNavigating","navigatingID","navigatingNumMoves","moves","move","G","pos","currentPlayer","position","carryingPlayer","dig","role","sandCount","excavate","currPos","isRevealed","type","i","length","water","maxWater","found","part","hid","vid","partName","index","finalParts","push","undoable","giveWater","id","pickUpFinalPart","tempRemovedPart","splice","mitigate","collectWater","carry","drop","currentPlayerID","props","navigate","events","setStage","setPlayerInfo","setDifficulty","diff","removeWater","placeFinalPart","addSand","turn","stages","navigating","stopNavigating","endStage","onBegin","onEnd","draw","val","random","Die","bothQualify","doStormPicksUp","Math","min","stormPicksuPProb","stormPos","maxTilesAffected","windDirection","windStrength","affectedPos","candidatePos","floor","tempStormTile","prevPos","directionString","affectedPlayers","j","endIf","getRandomInt","max","array","randomIndex","currentIndex","shuffle","sandTiles","ForbiddenDesertBoard","state","assignID","assignDifficulty","digging","givingWater","chooseCarry","chooseNavigate","excavateErrorMsg","waterErrorMsg","mitigateErrorMsg","carryErrorMsg","dropErrorMsg","playerID","this","setState","isBuried","isSameTile","isAdjacentTile","isDiagonalTile","setTimeout","carrying","currentPlayerPos","check1","check2","abs","endTurn","className","onClick","assignRoleTo","assignDifficultyTo","idToStateClass","Array","fill","map","currentClass","tileID","_","tileIsDiggable","tileIsMovable","row","tile","playersOnThisTile","k","sandIndicator","l","concat","onClickTile","header","actionButtons","someoneFound","giveWaterTo","playersFound","undo","rightbar","playerInfoList","toFixed","draw3","draw4","draw5","draw6","death","partList","color","React","Component","App","href","ForbiddenDesertClient","Client","game","board","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b26aeaa.chunk.js","sourcesContent":["import { INVALID_MOVE } from \"boardgame.io/core\";\r\n\r\nexport const ForbiddenDesert = {\r\n    //there's a bug where sometimes (particularly when people are at 0 water),\r\n    //onEnd happens twice. i can't figure out the cause, but turnEnded should fix it\r\n    setup: (ctx) => ({\r\n        players: setupPlayers(ctx.numPlayers),\r\n        tiles: setupTiles(),\r\n        stormLevel: 0,\r\n        numDraws: 0,\r\n        lastDrawType: [],\r\n        collectedParts: [],\r\n        //for storm probability stuff (see sim.py)\r\n        stormPicksUpProb: 1,\r\n        sunBeatsDownProb: 1,\r\n        //for turn onEnd\r\n        turnEnded: false,\r\n        //use this instead of ctx.numMoves\r\n        numMoves: 0,\r\n        //navigator\r\n        isNavigating: false,\r\n        navigatingID: -1,\r\n        navigatingNumMoves: 0,\r\n    }),\r\n\r\n    moves: {\r\n        move: (G, ctx, pos) => {\r\n            if (G.numMoves < 4) {\r\n                G.players[ctx.currentPlayer].position = pos;\r\n                //climber\r\n                if (G.players[ctx.currentPlayer].carryingPlayer !== -1) {\r\n                    G.players[G.players[ctx.currentPlayer].carryingPlayer].position = pos;\r\n                }\r\n                G.numMoves += 1;\r\n            }\r\n        },\r\n        dig: (G, ctx, pos) => {\r\n            if (G.numMoves < 4) {\r\n                if (G.players[ctx.currentPlayer].role === \"Archeologist\") {\r\n                    G.tiles[pos].sandCount -= 2;\r\n                    if (G.tiles[pos].sandCount < 0) {\r\n                        G.tiles[pos].sandCount = 0;\r\n                    }\r\n                }\r\n                else {\r\n                    G.tiles[pos].sandCount--;\r\n                }\r\n                G.numMoves += 1;\r\n            }\r\n        },\r\n        excavate: {\r\n            move: (G, ctx) => {\r\n                if (G.numMoves < 4) {\r\n                    const currPos = G.players[ctx.currentPlayer].position;\r\n                    G.tiles[currPos].isRevealed = true;\r\n                    if (G.tiles[currPos].type === \"well\") {\r\n                        //everyone on currPos gets two water\r\n                        for (var i = 0; i < G.players.length; i++) {\r\n                            if (G.players[i].position === currPos) {\r\n                                G.players[i].water += 2;\r\n                            }\r\n                            if (G.players[i].water > G.players[i].maxWater) {\r\n                                G.players[i].water = G.players[i].maxWater;\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (G.tiles[currPos].type === \"clue\") {\r\n                        //check if the other clue has also been revealed\r\n                        //if so, then generate finalPart on the appropriate tile\r\n                        var found = false;\r\n                        for (var i = 0; i < G.tiles.length; i++) {\r\n                            if (G.tiles[i].isRevealed && G.tiles[i].type === \"clue\" &&\r\n                                i !== currPos && G.tiles[i].part === G.tiles[currPos].part) {\r\n                                found = true;\r\n                            }\r\n                        }\r\n                        if (found) {\r\n                            var hid;\r\n                            var vid;\r\n                            var partName = G.tiles[currPos].part;\r\n                            for (var i = 0; i < G.tiles.length; i++) {\r\n                                if (G.tiles[i].part === partName && G.tiles[i].pos === \"h\") {\r\n                                    hid = i;\r\n                                }\r\n                                if (G.tiles[i].part === partName && G.tiles[i].pos === \"v\") {\r\n                                    vid = i;\r\n                                }\r\n                            }\r\n                            //index = (hid rounded down to the nearest multiple of 5) + (vid % 5)\r\n                            while ((hid % 5) !== 0 && hid >= 0) {\r\n                                hid -= 1;\r\n                            }\r\n                            const index = hid + (vid % 5);\r\n                            G.tiles[index].finalParts.push(partName);\r\n                        }\r\n                    }\r\n                    G.numMoves += 1;\r\n                }\r\n            },\r\n            undoable: false\r\n        },\r\n        giveWater: (G, ctx, id) => {\r\n            //free action\r\n            G.players[ctx.currentPlayer].water -= 1;\r\n            G.players[id].water += 1;\r\n        },\r\n        pickUpFinalPart: (G, ctx) => {\r\n            if (G.numMoves < 4) {\r\n                const tempRemovedPart = G.tiles[G.players[ctx.currentPlayer].position].finalParts[0];\r\n                //remove the first final part from tile\r\n                G.tiles[G.players[ctx.currentPlayer].position].finalParts.splice(0, 1);\r\n                //add to collected parts\r\n                G.collectedParts.push(tempRemovedPart);\r\n                G.numMoves += 1;\r\n            }\r\n        },\r\n        mitigate: (G, ctx) => {\r\n            if (G.numMoves < 4) {\r\n                G.numDraws -= 1;\r\n                G.numMoves += 1;\r\n            }\r\n        },\r\n        collectWater: (G, ctx) => {\r\n            if (G.numMoves < 4) {\r\n                G.players[ctx.currentPlayer].water += 2;\r\n                if (G.players[ctx.currentPlayer].water > G.players[ctx.currentPlayer].maxWater) {\r\n                    G.players[ctx.currentPlayer].water = G.players[ctx.currentPlayer].maxWater;\r\n                }\r\n                G.numMoves += 1;\r\n            }\r\n        },\r\n        //climber\r\n        carry: (G, ctx, id) => {\r\n            //free move\r\n            G.players[ctx.currentPlayer].carryingPlayer = id;\r\n        },\r\n        drop: (G, ctx) => {\r\n            //free move\r\n            var currentPlayerID;\r\n            this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n            \r\n            G.players[currentPlayerID].carryingPlayer = -1;\r\n        },\r\n        //navigator\r\n        navigate: (G, ctx, id) => {\r\n            if (G.numMoves < 4) {\r\n                G.isNavigating = true;\r\n                G.navigatingID = id;\r\n                ctx.events.setStage(\"navigating\");\r\n                G.numMoves += 1;\r\n            }\r\n        },\r\n        setPlayerInfo: {\r\n            move: (G, ctx, id, role) => {\r\n                //free move (lol)\r\n                G.players[id].role = role;\r\n                if (role === \"Archeologist\" || role === \"Climber\") {\r\n                    G.players[id].maxWater = 3;\r\n                    G.players[id].water = 3;\r\n                }\r\n                else if (role === \"Explorer\" || role === \"Meteorologist\" || role === \"Navigator\") {\r\n                    G.players[id].maxWater = 4;\r\n                    G.players[id].water = 4;\r\n                }\r\n                else {\r\n                    G.players[id].maxWater = 5;\r\n                    G.players[id].water = 5;\r\n                }\r\n            },\r\n            undoable: false,\r\n        },\r\n        setDifficulty: {\r\n            move: (G, ctx, diff) => {\r\n                //free move (lol)\r\n                G.stormLevel = diff;\r\n                if (diff === 0) {\r\n                    G.numDraws = 2;\r\n                }\r\n                else {\r\n                    G.numDraws = 3;\r\n                }\r\n            },\r\n            undoable: false,\r\n        },\r\n        //DEBUG ONLY\r\n        removeWater: (G, ctx, id) => {\r\n            G.players[id].water -= 1;\r\n        },\r\n        placeFinalPart: (G, ctx, id) => {\r\n            G.tiles[id].finalParts.push(\"Z\");\r\n        },\r\n        addSand: (G, ctx, id) => {\r\n            G.tiles[id].sandCount += 1;\r\n        },\r\n    },\r\n\r\n    turn: {\r\n        stages: {\r\n            navigating: {\r\n                moves: {\r\n                    move: (G, ctx, pos) => {\r\n                        if (G.navigatingNumMoves < 3) {\r\n                            G.players[G.navigatingID].position = pos;\r\n                            //climber\r\n                            if (G.players[G.navigatingID].carryingPlayer !== -1) {\r\n                                G.players[G.players[G.navigatingID].carryingPlayer].position = pos;\r\n                            }\r\n                            G.navigatingNumMoves += 1;\r\n                        }\r\n                    },\r\n                    //climber only\r\n                    carry: (G, ctx, id) => {\r\n                        //free move\r\n                        G.players[G.navigatingID].carryingPlayer = id;\r\n                    },\r\n                    drop: (G, ctx) => {\r\n                        //free move\r\n                        G.players[G.navigatingID].carryingPlayer = -1;\r\n                    },\r\n                    stopNavigating: (G, ctx, pos) => {\r\n                        //climber automatically drop\r\n                        G.players[G.navigatingID].carryingPlayer = -1;\r\n                        G.isNavigating = false;\r\n                        G.navigatingNumMoves = 0;\r\n                        ctx.events.endStage();\r\n                    }\r\n                },\r\n            }\r\n        },\r\n        onBegin: (G, ctx) => {\r\n            G.numMoves = 0;\r\n            G.turnEnded = false;\r\n        },\r\n        onEnd: (G, ctx) => {\r\n            if (!G.turnEnded) {\r\n                //climber automatically drop\r\n                G.players[ctx.currentPlayer].carryingPlayer = -1;\r\n\r\n                G.lastDrawType = [];\r\n                //numDraws should be set from end of last turn\r\n                //(we set it at the end for meteorologist to be able to decrement it during turn)\r\n                for (var draw = 0; draw < G.numDraws; draw++) {\r\n                    var val = ctx.random.Die(100);\r\n                    if (val <= (G.stormPicksUpProb) || val <= (G.sunBeatsDownProb)) {\r\n                        var bothQualify = false;\r\n                        var doStormPicksUp = false;\r\n                        //if both qualify...\r\n                        if (val <= Math.min((G.stormPicksuPProb), (G.sunBeatsDownProb))) {\r\n                            bothQualify = true;\r\n                            //...prioritize the one with higher probability.\r\n                            if ((G.stormPicksUpProb) > (G.sunBeatsDownProb)) {\r\n                                doStormPicksUp = true;\r\n                            }\r\n                        }\r\n                        if ((!bothQualify && val <= (G.stormPicksUpProb)) || (bothQualify && doStormPicksUp)) {\r\n                            G.stormLevel += 1;\r\n                            G.lastDrawType.push(\"Storm Picks Up\");\r\n                            //reset stormPicksUp probability\r\n                            G.stormPicksUpProb = 1;\r\n                            //increment sunBeatsDown\r\n                            G.sunBeatsDownProb += 2;\r\n                        }\r\n                        else {\r\n                            for (var i = 0; i < G.players.length; i++) {\r\n                                if (!(G.tiles[G.players[i].position].type === \"tunnel\" && G.tiles[G.players[i].position].isRevealed)) {\r\n                                    G.players[i].water -= 1;\r\n                                }\r\n                            }\r\n                            G.lastDrawType.push(\"Sun Beats Down\");\r\n                            //reset sunBeatsDown\r\n                            G.sunBeatsDownProb = 1;\r\n                            //increment stormPicksUp\r\n                            G.stormPicksUpProb += 1;\r\n                        }\r\n                    }\r\n                    else {\r\n                        //increment both\r\n                        G.stormPicksUpProb += 1;\r\n                        G.sunBeatsDownProb += 2;\r\n\r\n                        var stormPos = 0;\r\n                        for (stormPos; stormPos < G.tiles.length; stormPos++) {\r\n                            if (G.tiles[stormPos].type === \"storm\") {\r\n                                break;\r\n                            }\r\n                        }\r\n                        //1 = up, 2 = left, 3 = down, 4 = right\r\n                        var windDirection = ctx.random.Die(4);\r\n                        //1-3 = 1, 4-5 = 2, 6 = 3\r\n                        var windStrength = ctx.random.Die(6);\r\n                        var maxTilesAffected;\r\n                        if (windStrength <= 3) {\r\n                            maxTilesAffected = 1;\r\n                        }\r\n                        else if (windStrength <= 5) {\r\n                            maxTilesAffected = 2;\r\n                        }\r\n                        else {\r\n                            maxTilesAffected = 3;\r\n                        }\r\n                        //identify positions of tiles that are moved\r\n                        var affectedPos = [];\r\n                        var candidatePos = stormPos;\r\n                        if (windDirection === 1) {\r\n                            while (affectedPos.length < maxTilesAffected) {\r\n                                candidatePos += 5;\r\n                                if (candidatePos >= 0 && candidatePos <= 24) {\r\n                                    affectedPos.push(candidatePos);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (windDirection === 2) {\r\n                            while (affectedPos.length < maxTilesAffected) {\r\n                                candidatePos += 1;\r\n                                //check whether on the same row\r\n                                if (candidatePos >= 0 && candidatePos <= 24 &&\r\n                                    Math.floor(candidatePos / 5) === Math.floor(stormPos / 5)) {\r\n                                    affectedPos.push(candidatePos);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (windDirection === 3) {\r\n                            while (affectedPos.length < maxTilesAffected) {\r\n                                candidatePos -= 5;\r\n                                if (candidatePos >= 0 && candidatePos <= 24) {\r\n                                    affectedPos.push(candidatePos);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (windDirection === 4) {\r\n                            while (affectedPos.length < maxTilesAffected) {\r\n                                candidatePos -= 1;\r\n                                //check whether on the same row\r\n                                if (candidatePos >= 0 && candidatePos <= 24 &&\r\n                                    Math.floor(candidatePos / 5) === Math.floor(stormPos / 5)) {\r\n                                    affectedPos.push(candidatePos);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        //add 1 sand to affected tiles\r\n                        for (var i = 0; i < affectedPos.length; i++) {\r\n                            G.tiles[affectedPos[i]].sandCount += 1;\r\n                        }\r\n\r\n                        //execute movements\r\n                        const tempStormTile = G.tiles[stormPos];\r\n                        var prevPos = stormPos;\r\n                        //edge case: first give all of stormPos's finalParts to the first affectedPos tile\r\n                        if (affectedPos.length > 0) {\r\n                            for (var i = 0; i < G.tiles[stormPos].finalParts.length; i++) {\r\n                                G.tiles[affectedPos[0]].finalParts.push(G.tiles[stormPos].finalParts[i]);\r\n                            }\r\n                            //clear storm's finalParts\r\n                            G.tiles[stormPos].finalParts = [];\r\n                        }\r\n                        //...now execute\r\n                        for (var i = 0; i < affectedPos.length; i++) {\r\n                            G.tiles[prevPos] = G.tiles[affectedPos[i]];\r\n                            prevPos = affectedPos[i];\r\n                        }\r\n                        if (affectedPos.length !== 0) {\r\n                            G.tiles[affectedPos[affectedPos.length - 1]] = tempStormTile;\r\n                        }\r\n\r\n                        //move all affected players\r\n                        var affectedPlayers = [];\r\n                        for (var i = 0; i < G.players.length; i++) {\r\n                            for (var j = 0; j < affectedPos.length; j++) {\r\n                                if (G.players[i].position === affectedPos[j]) {\r\n                                    affectedPlayers.push(i);\r\n                                }\r\n                            }\r\n                        }\r\n                        for (var i = 0; i < affectedPlayers.length; i++) {\r\n                            if (windDirection === 1) {\r\n                                G.players[affectedPlayers[i]].position -= 5;\r\n                            }\r\n                            else if (windDirection === 2) {\r\n                                G.players[affectedPlayers[i]].position -= 1;\r\n                            }\r\n                            else if (windDirection === 3) {\r\n                                G.players[affectedPlayers[i]].position += 5;\r\n                            }\r\n                            else if (windDirection === 4) {\r\n                                G.players[affectedPlayers[i]].position += 1;\r\n                            }\r\n                        }\r\n\r\n                        var directionString;\r\n                        if (windDirection === 1) {\r\n                            directionString = \"up\";\r\n                        }\r\n                        else if (windDirection === 2) {\r\n                            directionString = \"left\";\r\n                        }\r\n                        else if (windDirection === 3) {\r\n                            directionString = \"down\";\r\n                        }\r\n                        else if (windDirection === 4) {\r\n                            directionString = \"right\";\r\n                        }\r\n                        G.lastDrawType.push(\"Wind: \" + directionString + \", strength \" + maxTilesAffected);\r\n                    }\r\n                }\r\n                //check storm level + ctx.numPlayers, and draw according to that\r\n                if (G.stormLevel === 0) {\r\n                    G.numDraws = 2;\r\n                }\r\n                else if (ctx.numPlayers === 2) {\r\n                    if (G.stormLevel <= 3) {\r\n                        G.numDraws = 3;\r\n                    }\r\n                    else if (G.stormLevel <= 7) {\r\n                        G.numDraws = 4;\r\n                    }\r\n                    else if (G.stormLevel <= 10) {\r\n                        G.numDraws = 5;\r\n                    }\r\n                    else {\r\n                        G.numDraws = 6;\r\n                    }\r\n                }\r\n                else if (ctx.numPlayers === 3 || ctx.numPlayers === 4) {\r\n                    if (G.stormLevel <= 4) {\r\n                        G.numDraws = 3;\r\n                    }\r\n                    else if (G.stormLevel <= 8) {\r\n                        G.numDraws = 4;\r\n                    }\r\n                    else if (G.stormLevel <= 11) {\r\n                        G.numDraws = 5;\r\n                    }\r\n                    else {\r\n                        G.numDraws = 6;\r\n                    }\r\n                }\r\n                else if (ctx.numPlayers === 5) {\r\n                    if (G.stormLevel <= 5) {\r\n                        G.numDraws = 3;\r\n                    }\r\n                    else if (G.stormLevel <= 9) {\r\n                        G.numDraws = 4;\r\n                    }\r\n                    else if (G.stormLevel <= 12) {\r\n                        G.numDraws = 5;\r\n                    }\r\n                    else {\r\n                        G.numDraws = 6;\r\n                    }\r\n                }\r\n                G.turnEnded = true;\r\n            }\r\n        }\r\n    },\r\n\r\n    endIf: (G, ctx) => {\r\n        for (var i = 0; i < G.players.length; i++) {\r\n            if (G.players[i].water < 0) {\r\n                return true;\r\n            }\r\n        }\r\n        if ((ctx.numPlayers === 2 && G.stormLevel === 13) ||\r\n            ((ctx.numPlayers === 3 || ctx.numPlayers === 4) && G.stormLevel === 14) ||\r\n            (ctx.numPlayers === 5 && G.stormLevel === 15)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n};\r\n\r\nvar setupPlayers = (numPlayers) => {\r\n    var players = [];\r\n    var pos = getRandomInt(25);\r\n    while (pos === 12) {\r\n        pos = getRandomInt(25);\r\n    }\r\n    for (var i = 0; i < numPlayers; i++) {\r\n        players.push({\r\n            role: \"\",\r\n            position: pos,\r\n            water: 0,\r\n            maxWater: 0,\r\n            carryingPlayer: -1,\r\n        });\r\n    }\r\n    return players;\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\nvar setupTiles = () => {\r\n    var tiles = [];\r\n    for (var i = 0; i < 2; i++) {\r\n        tiles.push({\r\n            isRevealed: false,\r\n            sandCount: 0,\r\n            type: \"well\",\r\n            finalParts: []\r\n        });\r\n    }\r\n    tiles.push({\r\n        isRevealed: false,\r\n        sandCount: 0,\r\n        type: \"mirage\",\r\n        finalParts: []\r\n    });\r\n    for (var i = 0; i < 9; i++) {\r\n        tiles.push({\r\n            isRevealed: false,\r\n            sandCount: 0,\r\n            type: \"gear\",\r\n            finalParts: []\r\n        });\r\n    }\r\n    for (var i = 0; i < 3; i++) {\r\n        tiles.push({\r\n            isRevealed: false,\r\n            sandCount: 0,\r\n            type: \"tunnel\",\r\n            finalParts: []\r\n        })\r\n    }\r\n    for (var i = 0; i < 4; i++) {\r\n        for (var j = 0; j < 2; j++) {\r\n            //parts: A, B, C, D\r\n            //pos: 0 --> vertical, 1 --> horizontal\r\n            var part;\r\n            var pos;\r\n            if (i === 0) part = \"A\";\r\n            else if (i === 1) part = \"B\";\r\n            else if (i === 2) part = \"C\";\r\n            else if (i === 3) part = \"D\";\r\n            if (j === 0) pos = \"h\";\r\n            else if (j === 1) pos = \"v\"\r\n            tiles.push({\r\n                isRevealed: false,\r\n                sandCount: 0,\r\n                type: \"clue\",\r\n                part: part,\r\n                pos: pos,\r\n                finalParts: []\r\n            });\r\n        }\r\n    }\r\n    tiles.push({\r\n        isRevealed: false,\r\n        sandCount: 0,\r\n        type: \"launchpad\",\r\n        finalParts: []\r\n    })\r\n    shuffle(tiles);\r\n    tiles.splice(12, 0, {\r\n        isRevealed: false,\r\n        sandCount: 0,\r\n        type: \"storm\",\r\n        finalParts: []\r\n    });\r\n\r\n    //setup sand\r\n    const sandTiles = [2, 6, 8, 10, 14, 16, 18, 22];\r\n    for (var i = 0; i < sandTiles.length; i++) {\r\n        tiles[sandTiles[i]].sandCount = 1;\r\n    }\r\n    return tiles;\r\n}\r\n\r\n//https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array lol sorry :(\r\nfunction shuffle(array) {\r\n    var currentIndex = array.length, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex--;\r\n\r\n        // And swap it with the current element.\r\n        [array[currentIndex], array[randomIndex]] = [\r\n            array[randomIndex], array[currentIndex]];\r\n    }\r\n\r\n    return array;\r\n}","import React from 'react';\r\nimport './board.css'\r\n\r\nexport class ForbiddenDesertBoard extends React.Component {\r\n    state = {\r\n        assignID: 0,\r\n        assignDifficulty: false,\r\n        digging: false,\r\n        givingWater: false,\r\n        chooseCarry: false,\r\n        chooseNavigate: false,\r\n        excavateErrorMsg: '',\r\n        waterErrorMsg: '',\r\n        mitigateErrorMsg: '',\r\n        carryErrorMsg: '',\r\n        dropErrorMsg: '',\r\n    }\r\n\r\n    assignRoleTo(playerID, role) {\r\n        this.props.moves.setPlayerInfo(playerID, role);\r\n        this.setState({ assignID: this.state.assignID + 1 });\r\n    }\r\n    assignDifficultyTo(diff) {\r\n        this.props.moves.setDifficulty(diff);\r\n        this.setState({ assignDifficulty: true })\r\n    }\r\n    //move, or dig if this.state.digging\r\n    onClickTile(id) {\r\n        var currentPlayerID;\r\n        this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n\r\n        if (this.isBuried()) {\r\n            //you can only dig when buried\r\n            if (this.isSameTile(id) && this.state.digging && this.props.G.tiles[id].sandCount > 0) {\r\n                this.props.moves.dig(id);\r\n                this.setState({ digging: false });\r\n            }\r\n        }\r\n        else if (this.isAdjacentTile(id) || this.isSameTile(id) ||\r\n            (this.isDiagonalTile(id) && this.props.G.players[currentPlayerID].role === \"Explorer\")) {\r\n            if (this.state.digging && this.props.G.tiles[id].sandCount > 0) {\r\n                this.props.moves.dig(id);\r\n                this.setState({ digging: false });\r\n            }\r\n            else if (!this.isSameTile(id) &&\r\n                (this.props.G.tiles[id].sandCount < 2 || this.props.G.players[currentPlayerID].role === \"Climber\")\r\n                && !this.state.digging) {\r\n                this.props.moves.move(id);\r\n            }\r\n        }\r\n        //move through tunnel\r\n        else if (this.props.G.tiles[id].type === \"tunnel\" && this.props.G.tiles[id].isRevealed &&\r\n            this.props.G.tiles[this.props.G.players[currentPlayerID].position].type === \"tunnel\" &&\r\n            this.props.G.tiles[this.props.G.players[currentPlayerID].position].isRevealed &&\r\n            this.props.G.tiles[id].sandCount < 2 && !this.state.digging) {\r\n            this.props.moves.move(id);\r\n        }\r\n    }\r\n    excavate() {\r\n        if (this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].isRevealed === true) {\r\n            this.setState({ excavateErrorMsg: \"This tile is already revealed!\" })\r\n            setTimeout(() => this.setState({ excavateErrorMsg: '' }), 3000);\r\n        }\r\n        else if (this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].sandCount !== 0) {\r\n            this.setState({ excavateErrorMsg: \"Remove all sand on this tile before excavating!\" })\r\n            setTimeout(() => this.setState({ excavateErrorMsg: '' }), 3000);\r\n        }\r\n        else {\r\n            this.props.moves.excavate();\r\n        }\r\n    }\r\n    giveWaterTo(playerID) {\r\n        if (this.props.G.players[this.props.ctx.currentPlayer].water === 0) {\r\n            this.setState({ givingWater: false, waterErrorMsg: \"You don't have enough water!\" });\r\n            setTimeout(() => this.setState({ waterErrorMsg: '' }), 3000);\r\n        }\r\n        else if (this.props.G.players[playerID].water === this.props.G.players[playerID].maxWater) {\r\n            this.setState({ givingWater: false, waterErrorMsg: \"Target has full water!\" });\r\n            setTimeout(() => this.setState({ waterErrorMsg: '' }), 3000);\r\n        }\r\n        else {\r\n            this.props.moves.giveWater(playerID);\r\n            this.setState({ givingWater: false });\r\n        }\r\n    }\r\n    pickUpFinalPart() {\r\n        //no need to check condition; button won't show up if it's not met\r\n        this.props.moves.pickUpFinalPart();\r\n    }\r\n    mitigate() {\r\n        if (this.props.G.numDraws > 0) {\r\n            this.props.moves.mitigate();\r\n        }\r\n        else {\r\n            this.setState({ mitigateErrorMsg: \"All storm cards already mitigated!\" })\r\n            setTimeout(() => this.setState({ mitigateErrorMsg: '' }), 3000);\r\n        }\r\n    }\r\n    navigate(id) {\r\n        this.setState({ chooseNavigate: false })\r\n        this.props.moves.navigate(id);\r\n    }\r\n    collectWater() {\r\n        this.props.moves.collectWater();\r\n    }\r\n    carry(playerID) {\r\n        this.setState({ chooseCarry: false, carrying: true });\r\n        this.props.moves.carry(playerID);\r\n    }\r\n    drop() {\r\n        var currentPlayerID;\r\n        this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n\r\n        this.setState({ chooseCarry: false, carrying: false });\r\n        if (this.props.G.players[currentPlayerID].carryingPlayer === -1) {\r\n            this.setState({ dropErrorMsg: \"Nobody to drop! Carry first.\" });\r\n            setTimeout(() => this.setState({ dropErrorMsg: '' }), 3000);\r\n        }\r\n        else {\r\n            this.props.moves.drop();\r\n        }\r\n    }\r\n    isAdjacentTile(id) {\r\n        var currentPlayerID;\r\n        this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n\r\n        const currentPlayerPos = this.props.G.players[currentPlayerID].position;\r\n        var check1 = id >= 0 && id <= 24 &&\r\n            (id === currentPlayerPos - 1 || id === currentPlayerPos + 1 ||\r\n                id === currentPlayerPos - 5 || id === currentPlayerPos + 5);\r\n        if (id === currentPlayerPos - 1 || id === currentPlayerPos + 1) {\r\n            //check2 is to prevent moving across the entire board, e.g. between 4-5, 9-10, etc.\r\n            var check2 = (Math.floor(id / 5) === Math.floor(currentPlayerPos / 5));\r\n            return check2;\r\n        }\r\n        else {\r\n            return check1;\r\n        }\r\n    }\r\n    isSameTile(id) {\r\n        var currentPlayerID;\r\n        this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n\r\n        return (id === this.props.G.players[currentPlayerID].position);\r\n    }\r\n    isDiagonalTile(id) {\r\n        var currentPlayerID;\r\n        this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n\r\n        const currentPlayerPos = this.props.G.players[currentPlayerID].position;\r\n        var check1 = id >= 0 && id <= 24 &&\r\n            (id === currentPlayerPos - 6 || id === currentPlayerPos - 4 ||\r\n                id === currentPlayerPos + 4 || id === currentPlayerPos + 6);\r\n        //check2 is to make sure id is exactly one row away from the current tile\r\n        var check2 = Math.abs(Math.floor(id / 5) - Math.floor(currentPlayerPos / 5)) === 1;\r\n        return check1 && check2;\r\n    }\r\n    endTurn() {\r\n        this.setState({ digging: false });\r\n        this.props.events.endTurn();\r\n    }\r\n\r\n    //for idToStateClass purposes, not onClickTile\r\n    tileIsMovable(id) {\r\n        var currentPlayerID;\r\n        this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n\r\n        if (this.isBuried()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return (this.isAdjacentTile(id)\r\n                || (this.props.G.players[currentPlayerID].role === \"Explorer\" && this.isDiagonalTile(id))\r\n                || (this.props.G.tiles[this.props.G.players[currentPlayerID].position].type === \"tunnel\"\r\n                    && this.props.G.tiles[this.props.G.players[currentPlayerID].position].isRevealed\r\n                    && this.props.G.tiles[id].type === \"tunnel\" && this.props.G.tiles[id].isRevealed))\r\n                && !this.isSameTile(id)\r\n                && (this.props.G.tiles[id].sandCount < 2 || this.props.G.players[currentPlayerID].role === \"Climber\")\r\n                && !this.state.digging && !this.isBuried();\r\n        }\r\n    }\r\n    //for idToStateClass purposes, not onClickTile\r\n    tileIsDiggable(id) {\r\n        if (this.isBuried()) {\r\n            return this.isSameTile(id) && this.state.digging && this.props.G.tiles[id].sandCount > 0;\r\n            //last condition here should always be true lol\r\n        }\r\n        else {\r\n            return (this.isAdjacentTile(id) || this.isSameTile(id)\r\n                || (this.props.G.players[this.props.ctx.currentPlayer].role === \"Explorer\" && this.isDiagonalTile(id)))\r\n                && (this.state.digging && this.props.G.tiles[id].sandCount > 0);\r\n        }\r\n    }\r\n    //returns whether current player is buried\r\n    isBuried() {\r\n        var currentPlayerID;\r\n        this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n\r\n        //check if current tile has a climber on it;\r\n        //iterate through all players, and check if a climber's position is current position\r\n        const currPos = this.props.G.players[currentPlayerID].position;\r\n        for (var i = 0; i < this.props.G.players.length; i++) {\r\n            if (this.props.G.players[i].role === \"Climber\" && this.props.G.players[i].position === currPos) {\r\n                return false;\r\n            }\r\n        }\r\n        return this.props.G.tiles[currPos].sandCount > 1;\r\n    }\r\n\r\n    render() {\r\n        //role selection screen\r\n        if (this.state.assignID < this.props.ctx.numPlayers) {\r\n            return (\r\n                <div className=\"center\">\r\n                    <div id=\"title\">\r\n                        Role Selection\r\n                    </div>\r\n                    <div className=\"header\">\r\n                        Choose role for Player {this.state.assignID}:\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Archeologist\"); }}>\r\n                            Archeologist\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Climber\"); }}>\r\n                            Climber\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Explorer\"); }}>\r\n                            Explorer\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Meteorologist\"); }}>\r\n                            Meteorologist\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Navigator\"); }}>\r\n                            Navigator\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Water Carrier\"); }}>\r\n                            Water Carrier\r\n                        </button>\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        <div>\r\n                            <p id=\"header\">Archeologist (🍼3)</p>\r\n                            <ul>\r\n                                <li>Removes 2 sand when digging instead of 1.</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Climber (🍼3)</p>\r\n                            <ul>\r\n                                <li>Carry: moves 1 other player along with Climber. (Cost: free)</li>\r\n                                <li>Can move over tiles with 2 or more sand.</li>\r\n                                <li>Allows all players on Climber's current tile to leave even with 2 or more sand.</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Explorer (🍼4)</p>\r\n                            <ul>\r\n                                <li>Can move, dig, and use items diagonally.</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Meteorologist (🍼4)</p>\r\n                            <ul>\r\n                                <li>Mitigate: draw 1 less Storm at the end of the turn. (Cost: 1 action)</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Navigator (🍼4)</p>\r\n                            <ul>\r\n                                <li>Navigate: move another player up to 3 tiles. Climber and Explorer keep their abilities. (Cost: 1 action)</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Water Carrier (🍼5)</p>\r\n                            <ul>\r\n                                <li>Collect Water: take 2 water from an excavated well. (Cost: 1 action)</li>\r\n                                <li>Can give water to adjacent players (for free).</li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        //difficulty selection screen\r\n        if (this.state.assignDifficulty === false) {\r\n            return (\r\n                <div className=\"center\">\r\n                    <div id=\"title\">\r\n                        Difficulty Selection\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        <button onClick={() => { this.assignDifficultyTo(0); }}>\r\n                            Novice\r\n                        </button>\r\n                        <button onClick={() => { this.assignDifficultyTo(1); }}>\r\n                            Normal\r\n                        </button>\r\n                        <button onClick={() => { this.assignDifficultyTo(2); }}>\r\n                            Elite\r\n                        </button>\r\n                        <button onClick={() => { this.assignDifficultyTo(3); }}>\r\n                            Legendary\r\n                        </button>\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        (Difficulty sets the starting storm level.)\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        var currentPlayerID;\r\n        this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n\r\n        //adds class to render borders on appropriate tiles when this.state.digging\r\n        //or when moving (!this.state.digging)\r\n        let idToStateClass =\r\n            new Array(25).fill(\" \")\r\n                .map((currentClass, tileID, _) => {\r\n                    if (this.state.digging && this.tileIsDiggable(tileID) && this.props.G.numMoves < 4) {\r\n                        return `${currentClass} diggable` // Add the `diggable` class to this\r\n                    } else {\r\n                        return `${currentClass}`; // Do not add any more classes\r\n                    }\r\n                }) // You can chain additional `map` function calls if you need to add more classes to a tile based on the current state of your program\r\n                .map((currentClass, tileID, _) => {\r\n                    if (!this.state.digging && this.tileIsMovable(tileID)\r\n                        && ((!this.props.G.isNavigating && this.props.G.numMoves < 4) || (this.props.G.isNavigating && this.props.G.navigatingNumMoves < 3))) {\r\n                        return `${currentClass} movable`\r\n                    } else {\r\n                        return `${currentClass}`;\r\n                    }\r\n                }) // May be problematic if you somehow add multiple classes that have conflicting properties\r\n\r\n        var tiles = [];\r\n        for (var i = 0; i < 5; i++) {\r\n            var row = [];\r\n            for (var j = 0; j < 5; j++) {\r\n                var tile = [];\r\n                const id = 5 * i + j;\r\n                if (this.props.G.tiles[id].type === \"storm\") {\r\n                    //render finalParts if it has at least one\r\n                    if (this.props.G.tiles[id].finalParts.length > 0) {\r\n                        tile.push(<div className=\"final-part\">Parts: {this.props.G.tiles[id].finalParts}</div>)\r\n                    }\r\n                    row.push(<td className=\"storm\">{tile}</td>);\r\n                }\r\n                else {\r\n                    var playersOnThisTile = [];\r\n                    //render players on current tile\r\n                    for (var k = 0; k < this.props.G.players.length; k++) {\r\n                        if (this.props.G.players[k].position === id) {\r\n                            playersOnThisTile.push(k);\r\n                        }\r\n                    }\r\n                    tile.push(<div className=\"player\">{playersOnThisTile}</div>);\r\n                    //render sandCount\r\n                    if (this.props.G.tiles[id].sandCount !== 0) {\r\n                        var sandIndicator = \"\";\r\n                        for (var l = 0; l < this.props.G.tiles[id].sandCount; l++) {\r\n                            sandIndicator = sandIndicator.concat(\"l\");\r\n                        }\r\n                        tile.push(<div className={this.props.G.tiles[id].sandCount > 1 ? \"sand red\" : \"sand\"}>\r\n                            {sandIndicator}</div>);\r\n                    }\r\n                    //render finalParts if it has at least one\r\n                    if (this.props.G.tiles[id].finalParts.length > 0) {\r\n                        tile.push(<div className=\"final-part\">Parts: {this.props.G.tiles[id].finalParts}</div>)\r\n                    }\r\n                    //render unrevealed backgrounds (set by className CSS)\r\n                    if (this.props.G.tiles[id].isRevealed === false) {\r\n                        row.push(<td key={id} className={(this.props.G.tiles[id].type === \"well\" || this.props.G.tiles[id].type === \"mirage\" ?\r\n                            \"unrevealed-water\" : \"unrevealed\") + idToStateClass[id]} onClick={() => this.onClickTile(id)}>{tile}</td>);\r\n                    }\r\n                    //render clue tile (assign the right className)\r\n                    else if (this.props.G.tiles[id].type === \"clue\") {\r\n                        const className = this.props.G.tiles[id].part + this.props.G.tiles[id].pos + idToStateClass[id];\r\n                        row.push(<td key={id} className={className + idToStateClass[id]}\r\n                            onClick={() => this.onClickTile(id)}>{tile}</td>);\r\n                    }\r\n                    else {\r\n                        row.push(<td key={id} className={this.props.G.tiles[id].type + idToStateClass[id]}\r\n                            onClick={() => this.onClickTile(id)}>{tile}</td>);\r\n                    }\r\n                }\r\n            }\r\n            tiles.push(<tr key={i}>{row}</tr>);\r\n        }\r\n\r\n        var header = [];\r\n        if (this.props.G.isNavigating) {\r\n            header.push(\r\n                <div>\r\n                    <div>\r\n                        Player {this.props.ctx.currentPlayer} navigating Player {this.props.G.navigatingID}\r\n                    </div>\r\n                    <div>\r\n                        Actions left in navigation: {3 - this.props.G.navigatingNumMoves}, Actions left in turn: {4 - this.props.G.numMoves}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            header.push(\r\n                <div>\r\n                    <div>\r\n                        Player {this.props.ctx.currentPlayer}'s turn\r\n                    </div>\r\n                    <div>\r\n                        Actions left in turn: {4 - this.props.G.numMoves}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        var actionButtons = [];\r\n        if (this.isBuried()) {\r\n            actionButtons.push(\r\n                <div>\r\n                    You are buried!\r\n                </div>\r\n            )\r\n        }\r\n        if (!this.props.G.isNavigating) {\r\n            actionButtons.push(\r\n                <div>\r\n                    <button onClick={() => { this.setState({ digging: !this.state.digging }); }}>\r\n                        Dig (1)\r\n                    </button>\r\n                    <button onClick={() => { this.excavate(); }}>\r\n                        Excavate (1)\r\n                    </button>\r\n                    <div>\r\n                        {this.state.digging ? \"Choose a tile to dig.\" : \"\"}\r\n                    </div>\r\n                </div>\r\n            );\r\n            actionButtons.push(\r\n                <div>\r\n                    {this.state.excavateErrorMsg}\r\n                </div>\r\n            )\r\n            actionButtons.push(\r\n                <button onClick={() => { this.setState({ givingWater: !this.state.givingWater }); }}>\r\n                    Give water to (0):\r\n                </button>\r\n            );\r\n            //give water to popup buttons\r\n            if (this.state.givingWater) {\r\n                var someoneFound = false;\r\n                for (var i = 0; i < this.props.G.players.length; i++) {\r\n                    //this took me hours to fix.. if you don't assign i to a constant,\r\n                    //and use i for giveWaterTo parameter, then the value is going \r\n                    //to be, like, different every time you call it. or something.\r\n                    const index = i;\r\n                    if (index != this.props.ctx.currentPlayer\r\n                        && (this.isSameTile(this.props.G.players[index].position)\r\n                            || (this.props.G.players[this.props.ctx.currentPlayer].role === \"Water Carrier\" &&\r\n                                this.isAdjacentTile(this.props.G.players[index].position)))) {\r\n                        actionButtons.push(\r\n                            <button onClick={() => { this.giveWaterTo(index); }}>\r\n                                Player {index}\r\n                            </button>\r\n                        );\r\n                        someoneFound = true;\r\n                    }\r\n                }\r\n                //spawned no buttons?\r\n                if (!someoneFound) {\r\n                    if (this.props.G.players[this.props.ctx.currentPlayer].role === \"Water Carrier\") {\r\n                        this.setState({ givingWater: false, waterErrorMsg: \"No players to give water to! (They must be on the same or an adjacent tile.)\" });\r\n                    }\r\n                    else {\r\n                        this.setState({ givingWater: false, waterErrorMsg: \"No players to give water to! (They must be on the same tile.)\" });\r\n                    }\r\n                    setTimeout(() => this.setState({ waterErrorMsg: '' }), 3000);\r\n                }\r\n            }\r\n            actionButtons.push(\r\n                <div>\r\n                    {this.state.waterErrorMsg}\r\n                </div>\r\n            )\r\n            //Mitigate for meteorologist only\r\n            if (this.props.G.players[this.props.ctx.currentPlayer].role === \"Meteorologist\") {\r\n                actionButtons.push(\r\n                    <button onClick={() => { this.mitigate(); }}>\r\n                        Mitigate (1)\r\n                    </button>\r\n                )\r\n            }\r\n            actionButtons.push(\r\n                <div>\r\n                    {this.state.mitigateErrorMsg}\r\n                </div>\r\n            )\r\n            //collectWater for water carrier only\r\n            if (this.props.G.players[this.props.ctx.currentPlayer].role === \"Water Carrier\"\r\n                && this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].type === \"well\"\r\n                && this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].isRevealed\r\n                && this.props.G.players[this.props.ctx.currentPlayer].water < this.props.G.players[this.props.ctx.currentPlayer].maxWater) {\r\n                actionButtons.push(\r\n                    <button onClick={() => { this.collectWater(); }}>\r\n                        Collect +2 water (1)\r\n                    </button>\r\n                )\r\n            }\r\n        }\r\n\r\n        //carry for climber only\r\n        if (this.props.G.players[currentPlayerID].role === \"Climber\") {\r\n            actionButtons.push(\r\n                <div>\r\n                    <button onClick={() => { this.setState({ chooseCarry: !this.state.chooseCarry }) }}>\r\n                        Carry (0):\r\n                    </button>\r\n                    <button onClick={() => { this.drop(); }}>\r\n                        Drop (0)\r\n                    </button>\r\n                </div>\r\n            )\r\n            //spawn choose player buttons\r\n            if (this.state.chooseCarry) {\r\n                //find if there are any players on current tile\r\n                var playersFound = false;\r\n                for (var i = 0; i < this.props.G.players.length; i++) {\r\n                    const index = i;\r\n                    if (index != currentPlayerID &&\r\n                        this.isSameTile(this.props.G.players[index].position)) {\r\n                        actionButtons.push(\r\n                            <button onClick={() => { this.carry(index); }}>\r\n                                Player {index}\r\n                            </button>\r\n                        );\r\n                        playersFound = true;\r\n                    }\r\n                }\r\n                //spawned no buttons?\r\n                if (!playersFound) {\r\n                    this.setState({ chooseCarry: false, carryErrorMsg: \"Nobody to carry! (They must be on the same tile.)\" });\r\n                    setTimeout(() => this.setState({ carryErrorMsg: '' }), 3000);\r\n                }\r\n            }\r\n        }\r\n        actionButtons.push(\r\n            <div>\r\n                {this.state.carryErrorMsg}\r\n            </div>\r\n        )\r\n        actionButtons.push(\r\n            <div>\r\n                {this.state.dropErrorMsg}\r\n            </div>\r\n        )\r\n\r\n        //only show pickup part button when the tile of the current player position\r\n        //has at least 1 finalPart, and the tile is revealed\r\n        if (!this.props.G.isNavigating) {\r\n            if (this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].isRevealed &&\r\n                this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].finalParts.length > 0) {\r\n                actionButtons.push(\r\n                    <button onClick={() => { this.pickUpFinalPart(); }}>\r\n                        Pick up part (1)\r\n                    </button>\r\n                )\r\n            }\r\n        }\r\n\r\n        //navigator only\r\n        if (!this.props.G.isNavigating) {\r\n            if (this.props.G.players[this.props.ctx.currentPlayer].role === \"Navigator\") {\r\n                actionButtons.push(\r\n                    <button onClick={() => { this.setState({ chooseNavigate: !this.state.chooseNavigate }) }}>\r\n                        Navigate (1):\r\n                    </button>\r\n                );\r\n            }\r\n            //spawn choose player buttons\r\n            if (this.state.chooseNavigate) {\r\n                for (var i = 0; i < this.props.G.players.length; i++) {\r\n                    const index = i;\r\n                    if (index != this.props.ctx.currentPlayer) {\r\n                        actionButtons.push(\r\n                            <button onClick={() => { this.navigate(index); }}>\r\n                                Player {index}\r\n                            </button>\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.props.G.isNavigating) {\r\n            actionButtons.push(\r\n                <div>\r\n                    <button onClick={() => { this.props.undo(); }}>\r\n                        Undo\r\n                    </button>\r\n                    <button onClick={() => { this.props.moves.stopNavigating() }}>\r\n                        End navigation\r\n                    </button>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            actionButtons.push(\r\n                <div>\r\n                    <button onClick={() => { this.props.undo(); }}>\r\n                        Undo\r\n                    </button>\r\n                    <button onClick={() => { this.endTurn(); }}>\r\n                        End turn\r\n                    </button>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        var rightbar = [];\r\n        //player info\r\n        rightbar.push(<div>Players:</div>)\r\n        var playerInfoList = [];\r\n        for (var i = 0; i < this.props.ctx.numPlayers; i++) {\r\n            if (this.props.G.players[i].role === \"Climber\" && this.props.G.players[i].carryingPlayer !== -1) {\r\n                playerInfoList.push(\r\n                    <div>\r\n                        {i} - {this.props.G.players[i].role} 🍼 {this.props.G.players[i].water} / {this.props.G.players[i].maxWater}\r\n                        - Carrying Player {this.props.G.players[i].carryingPlayer}\r\n                    </div>\r\n                );\r\n            }\r\n            else {\r\n                playerInfoList.push(\r\n                    <div>\r\n                        {i} - {this.props.G.players[i].role} 🍼 {this.props.G.players[i].water} / {this.props.G.players[i].maxWater}\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n        rightbar.push(playerInfoList);\r\n\r\n        rightbar.push(\r\n            <div>\r\n                <p></p>\r\n                <div>Current storm level: {this.props.G.stormLevel}</div>\r\n                <p></p>\r\n            </div>\r\n        );\r\n\r\n        //storm deck last turn\r\n        rightbar.push(\r\n            <div>\r\n                <p></p>\r\n                End of last turn:\r\n            </div>\r\n        );\r\n        for (var i = 0; i < this.props.G.lastDrawType.length; i++) {\r\n            rightbar.push(\r\n                <div>\r\n                    {this.props.G.lastDrawType[i]}\r\n                </div>\r\n            );\r\n        }\r\n        //probabilities\r\n        rightbar.push(\r\n            <div>\r\n                <p></p>\r\n                <div>\r\n                    Chance of 1+ Sun Beats Down at end of turn:&nbsp;\r\n                    {((1 - (1 - this.props.G.sunBeatsDownProb / 100) ** (this.props.G.numDraws)) * 100).toFixed(2)}%\r\n                </div>\r\n                <div>\r\n                    Chance of 1+ Storm Picks Up at end of turn:&nbsp;\r\n                    {((1 - (1 - this.props.G.stormPicksUpProb / 100) ** (this.props.G.numDraws)) * 100).toFixed(2)}%\r\n                </div>\r\n            </div>\r\n        );\r\n        //currently collected parts\r\n        var partList = [];\r\n        for (var i = 0; i < this.props.G.collectedParts.length; i++) {\r\n            var color;\r\n            if (this.props.G.collectedParts[i] === \"A\") {\r\n                color = \"red\";\r\n            }\r\n            else if (this.props.G.collectedParts[i] === \"B\") {\r\n                color = \"green\";\r\n            }\r\n            else if (this.props.G.collectedParts[i] === \"C\") {\r\n                color = \"blue\";\r\n            }\r\n            else if (this.props.G.collectedParts[i] === \"D\") {\r\n                color = \"purple\";\r\n            }\r\n            partList.push(\r\n                <div className={color}>\r\n                    {this.props.G.collectedParts[i]}\r\n                </div>\r\n            );\r\n        }\r\n        if (this.props.G.collectedParts.length === 0) {\r\n            rightbar.push(\r\n                <div>\r\n                    <p></p>\r\n                    Collected parts (4 total): none\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            rightbar.push(\r\n                <div>\r\n                    <p></p>\r\n                    Collected parts (4 total): {partList}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        var draw3, draw4, draw5, draw6, death;\r\n        if (this.props.ctx.numPlayers === 2) {\r\n            draw3 = \"1 - 3\";\r\n            draw4 = \"4 - 7\";\r\n            draw5 = \"8 - 10\";\r\n            draw6 = \"11 - 12\";\r\n            death = \"13\";\r\n        }\r\n        else if (this.props.ctx.numPlayers === 3 || this.props.ctx.numPlayers === 4) {\r\n            draw3 = \"1 - 4\";\r\n            draw4 = \"5 - 8\";\r\n            draw5 = \"9 - 11\";\r\n            draw6 = \"12 - 13\";\r\n            death = \"14\";\r\n        }\r\n        else if (this.props.ctx.numPlayers === 5) {\r\n            draw3 = \"1 - 5\";\r\n            draw4 = \"6 - 9\";\r\n            draw5 = \"10 - 12\";\r\n            draw6 = \"13 - 14\";\r\n            death = \"15\";\r\n        }\r\n        rightbar.push(\r\n            <div className=\"small\">\r\n                <p></p>\r\n                <div>\r\n                    Draw 2 at storm level 0\r\n                </div>\r\n                <div>\r\n                    Draw 3 at levels {draw3}\r\n                </div>\r\n                <div>\r\n                    Draw 4 at levels {draw4}\r\n                </div>\r\n                <div>\r\n                    Draw 5 at levels {draw5}\r\n                </div>\r\n                <div>\r\n                    Draw 6 at levels {draw6}\r\n                </div>\r\n                <div>\r\n                    Game over at level {death}\r\n                </div>\r\n                <p></p>\r\n                <div>\r\n                    Archeologist: removes 2 sand when digging\r\n                </div>\r\n                <div>\r\n                    Climber: can move over any tile; allows everyone on current tile to move. Carry (0): bring another player\r\n                </div>\r\n                <div>\r\n                    Explorer: can move, dig, and use items diagonally\r\n                </div>\r\n                <div>\r\n                    Meteorologist: Mitigate (1): draw 1 less storm card at end of turn\r\n                </div>\r\n                <div>\r\n                    Navigator: Navigate (1): move any other player up to 3 tiles; Climber and Explorer keep their abilities\r\n                </div>\r\n                <div>\r\n                    Water Carrier: can give water to adjacent players. Collect Water (1): collect 2 water from a well\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"fl\">\r\n                    <div className=\"header center\">\r\n                        {header}\r\n                    </div>\r\n                    <table>\r\n                        <tbody>{tiles}</tbody>\r\n                    </table>\r\n                    <div className=\"center\">\r\n                        {actionButtons}\r\n                    </div>\r\n                </div>\r\n                <div className=\"fl\">\r\n                    {rightbar}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Client } from 'boardgame.io/react';\r\nimport { ForbiddenDesert } from './Game';\r\nimport { ForbiddenDesertBoard } from './board';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  state = { numPlayers: null };\r\n\r\n  render() {\r\n    if (this.state.numPlayers === null) {\r\n      return (\r\n        <div className=\"center\">\r\n          <div>\r\n            !! THIS IS A WORK IN PROGRESS !!\r\n          </div>\r\n          <div id=\"title\">\r\n            FORBIDDEN DESERT\r\n          </div>\r\n          <div>\r\n            Based off the original game designed by Gamewright.\r\n          </div>\r\n          <div>\r\n            <a href=\"https://www.gamewright.com/gamewright/pdfs/Rules/ForbiddenDesertTM-RULES.pdf\">Official rules manual</a>\r\n          </div>\r\n          <div>\r\n            <a href=\"https://boardgamegeek.com/boardgame/136063/forbidden-desert\">BoardGameGeek listing</a>\r\n          </div>\r\n          <div>\r\n            <a href=\"https://github.com/hwabis/forbidden-desert\">Source code</a>\r\n          </div>\r\n          <div id=\"header\">\r\n            <p>Select number of players:</p>\r\n            <button onClick={() => this.setState({ numPlayers: 2 })}>\r\n              2\r\n            </button>\r\n            <button onClick={() => this.setState({ numPlayers: 3 })}>\r\n              3\r\n            </button>\r\n            <button onClick={() => this.setState({ numPlayers: 4 })}>\r\n              4\r\n            </button>\r\n            <button onClick={() => this.setState({ numPlayers: 5 })}>\r\n              5\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    else {\r\n      const ForbiddenDesertClient = Client({\r\n        game: ForbiddenDesert,\r\n        numPlayers: this.state.numPlayers,\r\n        board: ForbiddenDesertBoard,\r\n      });\r\n      return (\r\n        <div>\r\n          <ForbiddenDesertClient />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}