{"version":3,"sources":["Game.js","board.js","App.js","index.js"],"names":["ForbiddenDesert","setup","ctx","players","setupPlayers","numPlayers","tiles","setupTiles","equipmentDeck","setupEquipment","difficultyName","stormLevel","numDraws","lastDrawType","collectedParts","stormPicksUpProb","sunBeatsDownProb","turnEnded","numMoves","isNavigating","navigatingID","navigatingNumMoves","moves","move","G","pos","currentPlayer","position","carryingPlayer","dig","role","sandCount","excavate","currPos","isRevealed","type","i","length","water","maxWater","found","part","hid","vid","partName","index","finalParts","push","equipment","pop","undoable","giveWater","giveID","receiveID","pickUpFinalPart","tempRemovedPart","splice","mitigate","collectWater","carry","id","drop","navigate","events","setStage","setPlayerInfo","setDifficulty","diff","removeWater","placeFinalPart","addSand","magicFinalPart","turn","stages","navigating","stopNavigating","endStage","onBegin","onEnd","draw","val","random","Die","bothQualify","doStormPicksUp","Math","min","stormPicksuPProb","stormPos","maxTilesAffected","windDirection","windStrength","affectedPos","candidatePos","floor","tempStormTile","prevPos","directionString","affectedPlayers","j","endIf","win","launchpadPos","count","getRandomInt","max","shuffle","sandTiles","deck","array","randomIndex","currentIndex","ForbiddenDesertBoard","state","assignID","assignDifficulty","digging","chooseCarry","chooseNavigate","excavateErrorMsg","mitigateErrorMsg","carryErrorMsg","dropErrorMsg","playerID","this","props","setState","currentPlayerID","isBuried","isSameTile","isAdjacentTile","isDiagonalTile","setTimeout","giverID","receiverID","givingWater","waterErrorMsg","carrying","currentPlayerPos","check1","playerID1","playerID2","pos1","pos2","check2","abs","endTurn","className","onClick","assignRoleTo","assignDifficultyTo","idToStateClass","Array","fill","map","currentClass","tileID","_","tileIsDiggable","gameover","tileIsMovable","row","tile","playersOnThisTile","k","sandIndicator","l","concat","onClickTile","header","actionButtons","accesskey","playersFound","undo","rightbar","playerInfoList","giver","giveWaterButtons","isSameTile2","isAdjacentTile2","giveWaterTo","join","toFixed","draw3","draw4","draw5","draw6","death","partList","color","infobar","React","Component","App","href","target","ForbiddenDesertClient","Client","game","board","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.88aefc43.chunk.js","sourcesContent":["import { INVALID_MOVE } from \"boardgame.io/core\";\r\n\r\nexport const ForbiddenDesert = {\r\n    setup: (ctx) => ({\r\n        players: setupPlayers(ctx.numPlayers),\r\n        tiles: setupTiles(),\r\n        equipmentDeck: setupEquipment(),\r\n        difficultyName: \"\",\r\n        stormLevel: 0,\r\n        numDraws: 0,\r\n        //for showing end-of-last-turn history\r\n        lastDrawType: [],\r\n        //collect 4 parts\r\n        collectedParts: [],\r\n        //for storm probability stuff (see sim.py)\r\n        stormPicksUpProb: 1,\r\n        sunBeatsDownProb: 1,\r\n        //for turn onEnd; there's a bug where sometimes (particularly when people are at 0 water),\r\n        //onEnd happens twice. i can't figure out the cause, but this should fix it\r\n        turnEnded: false,\r\n        //use this instead of ctx.numMoves\r\n        numMoves: 0,\r\n        //navigator\r\n        isNavigating: false,\r\n        navigatingID: -1,\r\n        navigatingNumMoves: 0,\r\n    }),\r\n\r\n    moves: {\r\n        move: (G, ctx, pos) => {\r\n            if (G.numMoves < 4) {\r\n                G.players[ctx.currentPlayer].position = pos;\r\n                //climber\r\n                if (G.players[ctx.currentPlayer].carryingPlayer !== -1) {\r\n                    G.players[G.players[ctx.currentPlayer].carryingPlayer].position = pos;\r\n                }\r\n                G.numMoves += 1;\r\n            }\r\n        },\r\n        dig: (G, ctx, pos) => {\r\n            if (G.numMoves < 4) {\r\n                if (G.players[ctx.currentPlayer].role === \"Archeologist\") {\r\n                    G.tiles[pos].sandCount -= 2;\r\n                    if (G.tiles[pos].sandCount < 0) {\r\n                        G.tiles[pos].sandCount = 0;\r\n                    }\r\n                }\r\n                else {\r\n                    G.tiles[pos].sandCount--;\r\n                }\r\n                G.numMoves += 1;\r\n            }\r\n        },\r\n        excavate: {\r\n            move: (G, ctx) => {\r\n                if (G.numMoves < 4) {\r\n                    const currPos = G.players[ctx.currentPlayer].position;\r\n                    G.tiles[currPos].isRevealed = true;\r\n                    if (G.tiles[currPos].type === \"well\") {\r\n                        //everyone on currPos gets two water\r\n                        for (var i = 0; i < G.players.length; i++) {\r\n                            if (G.players[i].position === currPos) {\r\n                                G.players[i].water += 2;\r\n                            }\r\n                            if (G.players[i].water > G.players[i].maxWater) {\r\n                                G.players[i].water = G.players[i].maxWater;\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (G.tiles[currPos].type === \"clue\") {\r\n                        //check if the other clue has also been revealed\r\n                        //if so, then generate finalPart on the appropriate tile\r\n                        var found = false;\r\n                        for (var i = 0; i < G.tiles.length; i++) {\r\n                            if (G.tiles[i].isRevealed && G.tiles[i].type === \"clue\" &&\r\n                                i !== currPos && G.tiles[i].part === G.tiles[currPos].part) {\r\n                                found = true;\r\n                            }\r\n                        }\r\n                        if (found) {\r\n                            var hid;\r\n                            var vid;\r\n                            var partName = G.tiles[currPos].part;\r\n                            for (var i = 0; i < G.tiles.length; i++) {\r\n                                if (G.tiles[i].part === partName && G.tiles[i].pos === \"h\") {\r\n                                    hid = i;\r\n                                }\r\n                                if (G.tiles[i].part === partName && G.tiles[i].pos === \"v\") {\r\n                                    vid = i;\r\n                                }\r\n                            }\r\n                            //index = (hid rounded down to the nearest multiple of 5) + (vid % 5)\r\n                            while ((hid % 5) !== 0 && hid >= 0) {\r\n                                hid -= 1;\r\n                            }\r\n                            const index = hid + (vid % 5);\r\n                            G.tiles[index].finalParts.push(partName);\r\n                        }\r\n                    }\r\n                    else if (G.tiles[currPos].type === \"gear\" || G.tiles[currPos].type === \"tunnel\") {\r\n                        if (G.equipmentDeck.length > 0) {\r\n                            //just pop off the top; deck is already shuffled\r\n                            G.players[ctx.currentPlayer].equipment.push(G.equipmentDeck.pop());\r\n                        }\r\n                    }\r\n                    G.numMoves += 1;\r\n                }\r\n            },\r\n            undoable: false\r\n        },\r\n        giveWater: (G, ctx, giveID, receiveID) => {\r\n            //free move\r\n            G.players[giveID].water -= 1;\r\n            G.players[receiveID].water += 1;\r\n        },\r\n        pickUpFinalPart: (G, ctx) => {\r\n            if (G.numMoves < 4) {\r\n                const tempRemovedPart = G.tiles[G.players[ctx.currentPlayer].position].finalParts[0];\r\n                //remove the first final part from tile\r\n                G.tiles[G.players[ctx.currentPlayer].position].finalParts.splice(0, 1);\r\n                //add to collected parts\r\n                G.collectedParts.push(tempRemovedPart);\r\n                G.numMoves += 1;\r\n            }\r\n        },\r\n        mitigate: (G, ctx) => {\r\n            if (G.numMoves < 4) {\r\n                G.numDraws -= 1;\r\n                G.numMoves += 1;\r\n            }\r\n        },\r\n        collectWater: (G, ctx) => {\r\n            if (G.numMoves < 4) {\r\n                G.players[ctx.currentPlayer].water += 2;\r\n                if (G.players[ctx.currentPlayer].water > G.players[ctx.currentPlayer].maxWater) {\r\n                    G.players[ctx.currentPlayer].water = G.players[ctx.currentPlayer].maxWater;\r\n                }\r\n                G.numMoves += 1;\r\n            }\r\n        },\r\n        //climber\r\n        carry: (G, ctx, id) => {\r\n            //free move\r\n            G.players[ctx.currentPlayer].carryingPlayer = id;\r\n        },\r\n        drop: (G, ctx) => {\r\n            //free move\r\n            G.players[ctx.currentPlayer].carryingPlayer = -1;\r\n        },\r\n        //navigator\r\n        navigate: (G, ctx, id) => {\r\n            if (G.numMoves < 4) {\r\n                G.isNavigating = true;\r\n                G.navigatingID = id;\r\n                ctx.events.setStage(\"navigating\");\r\n                G.numMoves += 1;\r\n            }\r\n        },\r\n        setPlayerInfo: {\r\n            move: (G, ctx, id, role) => {\r\n                //free move\r\n                G.players[id].role = role;\r\n                if (role === \"Archeologist\" || role === \"Climber\") {\r\n                    G.players[id].maxWater = 3;\r\n                    G.players[id].water = 3;\r\n                }\r\n                else if (role === \"Explorer\" || role === \"Meteorologist\" || role === \"Navigator\") {\r\n                    G.players[id].maxWater = 4;\r\n                    G.players[id].water = 4;\r\n                }\r\n                else {\r\n                    G.players[id].maxWater = 5;\r\n                    G.players[id].water = 5;\r\n                }\r\n            },\r\n            undoable: false,\r\n        },\r\n        setDifficulty: {\r\n            move: (G, ctx, diff) => {\r\n                //free move \r\n                G.stormLevel = diff;\r\n                if (diff === 0) {\r\n                    G.numDraws = 2;\r\n                    G.difficultyName = \"Novice\";\r\n                }\r\n                else {\r\n                    if (diff === 1) {\r\n                        G.difficultyName = \"Normal\";\r\n                    }\r\n                    else if (diff === 2) {\r\n                        G.difficultyName = \"Elite\";\r\n                    }\r\n                    else if (diff === 3) {\r\n                        G.difficultyName = \"Legendary\";\r\n                    }\r\n                    G.numDraws = 3;\r\n                }\r\n            },\r\n            undoable: false,\r\n        },\r\n        //DEBUG ONLY\r\n        removeWater: (G, ctx, id) => {\r\n            G.players[id].water -= 1;\r\n        },\r\n        placeFinalPart: (G, ctx, id) => {\r\n            G.tiles[id].finalParts.push(\"Z\");\r\n        },\r\n        addSand: (G, ctx, id) => {\r\n            G.tiles[id].sandCount += 1;\r\n        },\r\n        magicFinalPart: (G, ctx) => {\r\n            G.collectedParts.push(\"Z\");\r\n        },\r\n    },\r\n\r\n    turn: {\r\n        stages: {\r\n            navigating: {\r\n                moves: {\r\n                    move: (G, ctx, pos) => {\r\n                        if (G.navigatingNumMoves < 3) {\r\n                            G.players[G.navigatingID].position = pos;\r\n                            //climber\r\n                            if (G.players[G.navigatingID].carryingPlayer !== -1) {\r\n                                G.players[G.players[G.navigatingID].carryingPlayer].position = pos;\r\n                            }\r\n                            G.navigatingNumMoves += 1;\r\n                        }\r\n                    },\r\n                    //climber only\r\n                    carry: (G, ctx, id) => {\r\n                        //free move\r\n                        G.players[G.navigatingID].carryingPlayer = id;\r\n                    },\r\n                    drop: (G, ctx) => {\r\n                        //free move\r\n                        G.players[G.navigatingID].carryingPlayer = -1;\r\n                    },\r\n                    stopNavigating: (G, ctx, pos) => {\r\n                        //climber automatically drop\r\n                        G.players[G.navigatingID].carryingPlayer = -1;\r\n                        G.isNavigating = false;\r\n                        G.navigatingNumMoves = 0;\r\n                        ctx.events.endStage();\r\n                    }\r\n                },\r\n            }\r\n        },\r\n        onBegin: (G, ctx) => {\r\n            G.numMoves = 0;\r\n            G.turnEnded = false;\r\n        },\r\n        onEnd: (G, ctx) => {\r\n            if (!G.turnEnded) {\r\n                //climber automatically drop\r\n                G.players[ctx.currentPlayer].carryingPlayer = -1;\r\n\r\n                G.lastDrawType = [];\r\n                //numDraws should be set from end of last turn\r\n                //(we set it at the end for meteorologist to be able to decrement it during turn)\r\n                for (var draw = 0; draw < G.numDraws; draw++) {\r\n                    var val = ctx.random.Die(100);\r\n                    if (val <= (G.stormPicksUpProb) || val <= (G.sunBeatsDownProb)) {\r\n                        var bothQualify = false;\r\n                        var doStormPicksUp = false;\r\n                        //if both qualify...\r\n                        if (val <= Math.min((G.stormPicksuPProb), (G.sunBeatsDownProb))) {\r\n                            bothQualify = true;\r\n                            //...prioritize the one with higher probability.\r\n                            if ((G.stormPicksUpProb) > (G.sunBeatsDownProb)) {\r\n                                doStormPicksUp = true;\r\n                            }\r\n                        }\r\n                        if ((!bothQualify && val <= (G.stormPicksUpProb)) || (bothQualify && doStormPicksUp)) {\r\n                            G.stormLevel += 1;\r\n                            G.lastDrawType.push(\"Storm Picks Up\");\r\n                            //reset stormPicksUp probability\r\n                            G.stormPicksUpProb = 1;\r\n                            //increment sunBeatsDown\r\n                            G.sunBeatsDownProb += 2;\r\n                        }\r\n                        else {\r\n                            for (var i = 0; i < G.players.length; i++) {\r\n                                if (!(G.tiles[G.players[i].position].type === \"tunnel\" && G.tiles[G.players[i].position].isRevealed)) {\r\n                                    G.players[i].water -= 1;\r\n                                }\r\n                            }\r\n                            G.lastDrawType.push(\"Sun Beats Down\");\r\n                            //reset sunBeatsDown\r\n                            G.sunBeatsDownProb = 1;\r\n                            //increment stormPicksUp\r\n                            G.stormPicksUpProb += 1;\r\n                        }\r\n                    }\r\n                    else {\r\n                        //increment both\r\n                        G.stormPicksUpProb += 1;\r\n                        G.sunBeatsDownProb += 2;\r\n\r\n                        var stormPos = 0;\r\n                        for (stormPos; stormPos < G.tiles.length; stormPos++) {\r\n                            if (G.tiles[stormPos].type === \"storm\") {\r\n                                break;\r\n                            }\r\n                        }\r\n                        //1 = up, 2 = left, 3 = down, 4 = right\r\n                        var windDirection = ctx.random.Die(4);\r\n                        //1-3 = 1, 4-5 = 2, 6 = 3\r\n                        var windStrength = ctx.random.Die(6);\r\n                        var maxTilesAffected;\r\n                        if (windStrength <= 3) {\r\n                            maxTilesAffected = 1;\r\n                        }\r\n                        else if (windStrength <= 5) {\r\n                            maxTilesAffected = 2;\r\n                        }\r\n                        else {\r\n                            maxTilesAffected = 3;\r\n                        }\r\n                        //identify positions of tiles that are moved\r\n                        var affectedPos = [];\r\n                        var candidatePos = stormPos;\r\n                        if (windDirection === 1) {\r\n                            while (affectedPos.length < maxTilesAffected) {\r\n                                candidatePos += 5;\r\n                                if (candidatePos >= 0 && candidatePos <= 24) {\r\n                                    affectedPos.push(candidatePos);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (windDirection === 2) {\r\n                            while (affectedPos.length < maxTilesAffected) {\r\n                                candidatePos += 1;\r\n                                //check whether on the same row\r\n                                if (candidatePos >= 0 && candidatePos <= 24 &&\r\n                                    Math.floor(candidatePos / 5) === Math.floor(stormPos / 5)) {\r\n                                    affectedPos.push(candidatePos);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (windDirection === 3) {\r\n                            while (affectedPos.length < maxTilesAffected) {\r\n                                candidatePos -= 5;\r\n                                if (candidatePos >= 0 && candidatePos <= 24) {\r\n                                    affectedPos.push(candidatePos);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (windDirection === 4) {\r\n                            while (affectedPos.length < maxTilesAffected) {\r\n                                candidatePos -= 1;\r\n                                //check whether on the same row\r\n                                if (candidatePos >= 0 && candidatePos <= 24 &&\r\n                                    Math.floor(candidatePos / 5) === Math.floor(stormPos / 5)) {\r\n                                    affectedPos.push(candidatePos);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        //add 1 sand to affected tiles\r\n                        for (var i = 0; i < affectedPos.length; i++) {\r\n                            G.tiles[affectedPos[i]].sandCount += 1;\r\n                        }\r\n\r\n                        //execute movements\r\n                        const tempStormTile = G.tiles[stormPos];\r\n                        var prevPos = stormPos;\r\n                        //edge case: first give all of stormPos's finalParts to the first affectedPos tile\r\n                        if (affectedPos.length > 0) {\r\n                            for (var i = 0; i < G.tiles[stormPos].finalParts.length; i++) {\r\n                                G.tiles[affectedPos[0]].finalParts.push(G.tiles[stormPos].finalParts[i]);\r\n                            }\r\n                            //clear storm's finalParts\r\n                            G.tiles[stormPos].finalParts = [];\r\n                        }\r\n                        //...now execute\r\n                        for (var i = 0; i < affectedPos.length; i++) {\r\n                            G.tiles[prevPos] = G.tiles[affectedPos[i]];\r\n                            prevPos = affectedPos[i];\r\n                        }\r\n                        if (affectedPos.length !== 0) {\r\n                            G.tiles[affectedPos[affectedPos.length - 1]] = tempStormTile;\r\n                        }\r\n\r\n                        //move all affected players\r\n                        var affectedPlayers = [];\r\n                        for (var i = 0; i < G.players.length; i++) {\r\n                            for (var j = 0; j < affectedPos.length; j++) {\r\n                                if (G.players[i].position === affectedPos[j]) {\r\n                                    affectedPlayers.push(i);\r\n                                }\r\n                            }\r\n                        }\r\n                        for (var i = 0; i < affectedPlayers.length; i++) {\r\n                            if (windDirection === 1) {\r\n                                G.players[affectedPlayers[i]].position -= 5;\r\n                            }\r\n                            else if (windDirection === 2) {\r\n                                G.players[affectedPlayers[i]].position -= 1;\r\n                            }\r\n                            else if (windDirection === 3) {\r\n                                G.players[affectedPlayers[i]].position += 5;\r\n                            }\r\n                            else if (windDirection === 4) {\r\n                                G.players[affectedPlayers[i]].position += 1;\r\n                            }\r\n                        }\r\n\r\n                        var directionString;\r\n                        if (windDirection === 1) {\r\n                            directionString = \"up\";\r\n                        }\r\n                        else if (windDirection === 2) {\r\n                            directionString = \"left\";\r\n                        }\r\n                        else if (windDirection === 3) {\r\n                            directionString = \"down\";\r\n                        }\r\n                        else if (windDirection === 4) {\r\n                            directionString = \"right\";\r\n                        }\r\n                        G.lastDrawType.push(\"Wind: \" + directionString + \", strength \" + maxTilesAffected);\r\n                    }\r\n                }\r\n                //check storm level + ctx.numPlayers, and draw according to that\r\n                if (G.stormLevel === 0) {\r\n                    G.numDraws = 2;\r\n                }\r\n                else if (ctx.numPlayers === 2) {\r\n                    if (G.stormLevel <= 3) {\r\n                        G.numDraws = 3;\r\n                    }\r\n                    else if (G.stormLevel <= 7) {\r\n                        G.numDraws = 4;\r\n                    }\r\n                    else if (G.stormLevel <= 10) {\r\n                        G.numDraws = 5;\r\n                    }\r\n                    else {\r\n                        G.numDraws = 6;\r\n                    }\r\n                }\r\n                else if (ctx.numPlayers === 3 || ctx.numPlayers === 4) {\r\n                    if (G.stormLevel <= 4) {\r\n                        G.numDraws = 3;\r\n                    }\r\n                    else if (G.stormLevel <= 8) {\r\n                        G.numDraws = 4;\r\n                    }\r\n                    else if (G.stormLevel <= 11) {\r\n                        G.numDraws = 5;\r\n                    }\r\n                    else {\r\n                        G.numDraws = 6;\r\n                    }\r\n                }\r\n                else if (ctx.numPlayers === 5) {\r\n                    if (G.stormLevel <= 5) {\r\n                        G.numDraws = 3;\r\n                    }\r\n                    else if (G.stormLevel <= 9) {\r\n                        G.numDraws = 4;\r\n                    }\r\n                    else if (G.stormLevel <= 12) {\r\n                        G.numDraws = 5;\r\n                    }\r\n                    else {\r\n                        G.numDraws = 6;\r\n                    }\r\n                }\r\n                G.turnEnded = true;\r\n            }\r\n        }\r\n    },\r\n\r\n    endIf: (G, ctx) => {\r\n        for (var i = 0; i < G.players.length; i++) {\r\n            if (G.players[i].water < 0) {\r\n                return { win: false };\r\n            }\r\n        }\r\n        if ((ctx.numPlayers === 2 && G.stormLevel === 13) ||\r\n            ((ctx.numPlayers === 3 || ctx.numPlayers === 4) && G.stormLevel === 14) ||\r\n            (ctx.numPlayers === 5 && G.stormLevel === 15)) {\r\n            return { win: false };\r\n        }\r\n        if (G.collectedParts.length === 4) {\r\n            //first find launchpad position\r\n            var launchpadPos;\r\n            for (var i = 0; i < G.tiles.length; i++) {\r\n                if (G.tiles[i].type === \"launchpad\") {\r\n                    launchpadPos = i;\r\n                    break;\r\n                }\r\n            }\r\n            //check if every player is on it\r\n            var count = 0;\r\n            for (var i = 0; i < G.players.length; i++) {\r\n                if (G.players[i].position === launchpadPos) {\r\n                    count += 1;\r\n                }\r\n            }\r\n            if (count === G.players.length) {\r\n                return { win: true };\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n};\r\n\r\nvar setupPlayers = (numPlayers) => {\r\n    var players = [];\r\n    var pos = getRandomInt(25);\r\n    while (pos === 12) {\r\n        pos = getRandomInt(25);\r\n    }\r\n    for (var i = 0; i < numPlayers; i++) {\r\n        players.push({\r\n            role: \"\",\r\n            position: pos,\r\n            water: 0,\r\n            maxWater: 0,\r\n            equipment: [],\r\n            carryingPlayer: -1,\r\n        });\r\n    }\r\n    return players;\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\nvar setupTiles = () => {\r\n    var tiles = [];\r\n    for (var i = 0; i < 2; i++) {\r\n        tiles.push({\r\n            isRevealed: false,\r\n            sandCount: 0,\r\n            type: \"well\",\r\n            finalParts: []\r\n        });\r\n    }\r\n    tiles.push({\r\n        isRevealed: false,\r\n        sandCount: 0,\r\n        type: \"mirage\",\r\n        finalParts: []\r\n    });\r\n    for (var i = 0; i < 9; i++) {\r\n        tiles.push({\r\n            isRevealed: false,\r\n            sandCount: 0,\r\n            type: \"gear\",\r\n            finalParts: []\r\n        });\r\n    }\r\n    for (var i = 0; i < 3; i++) {\r\n        tiles.push({\r\n            isRevealed: false,\r\n            sandCount: 0,\r\n            type: \"tunnel\",\r\n            finalParts: []\r\n        })\r\n    }\r\n    for (var i = 0; i < 4; i++) {\r\n        for (var j = 0; j < 2; j++) {\r\n            //parts: A, B, C, D\r\n            //pos: 0 --> vertical, 1 --> horizontal\r\n            var part;\r\n            var pos;\r\n            if (i === 0) part = \"A\";\r\n            else if (i === 1) part = \"B\";\r\n            else if (i === 2) part = \"C\";\r\n            else if (i === 3) part = \"D\";\r\n            if (j === 0) pos = \"h\";\r\n            else if (j === 1) pos = \"v\"\r\n            tiles.push({\r\n                isRevealed: false,\r\n                sandCount: 0,\r\n                type: \"clue\",\r\n                part: part,\r\n                pos: pos,\r\n                finalParts: []\r\n            });\r\n        }\r\n    }\r\n    tiles.push({\r\n        isRevealed: false,\r\n        sandCount: 0,\r\n        type: \"launchpad\",\r\n        finalParts: []\r\n    })\r\n    shuffle(tiles);\r\n    tiles.splice(12, 0, {\r\n        isRevealed: false,\r\n        sandCount: 0,\r\n        type: \"storm\",\r\n        finalParts: []\r\n    });\r\n\r\n    //setup sand\r\n    const sandTiles = [2, 6, 8, 10, 14, 16, 18, 22];\r\n    for (var i = 0; i < sandTiles.length; i++) {\r\n        tiles[sandTiles[i]].sandCount = 1;\r\n    }\r\n    return tiles;\r\n}\r\n\r\nvar setupEquipment = () => {\r\n    var deck = [];\r\n    for (var i = 0; i < 3; i++) {\r\n        deck.push(\"Jet Pack\");\r\n    }\r\n    for (var i = 0; i < 3; i++) {\r\n        deck.push(\"Dune Blaster\");\r\n    }\r\n    for (var i = 0; i < 2; i++) {\r\n        deck.push(\"Terrascope\");\r\n    }\r\n    for (var i = 0; i < 2; i++) {\r\n        deck.push(\"Solar Shield\");\r\n    }\r\n    deck.push(\"Secret Water Reserve\");\r\n    deck.push(\"Time Throttle\");\r\n    shuffle(deck);\r\n    return deck;\r\n}\r\n\r\n//https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array lol sorry :(\r\nfunction shuffle(array) {\r\n    var currentIndex = array.length, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex--;\r\n\r\n        // And swap it with the current element.\r\n        [array[currentIndex], array[randomIndex]] = [\r\n            array[randomIndex], array[currentIndex]];\r\n    }\r\n\r\n    return array;\r\n}","import React from 'react';\r\nimport './board.css'\r\n\r\nexport class ForbiddenDesertBoard extends React.Component {\r\n    state = {\r\n        assignID: 0,\r\n        assignDifficulty: false,\r\n        digging: false,\r\n        chooseCarry: false,\r\n        chooseNavigate: false,\r\n        excavateErrorMsg: '',\r\n        mitigateErrorMsg: '',\r\n        carryErrorMsg: '',\r\n        dropErrorMsg: '',\r\n    }\r\n\r\n    assignRoleTo(playerID, role) {\r\n        this.props.moves.setPlayerInfo(playerID, role);\r\n        this.setState({ assignID: this.state.assignID + 1 });\r\n    }\r\n    assignDifficultyTo(diff) {\r\n        this.props.moves.setDifficulty(diff);\r\n        this.setState({ assignDifficulty: true })\r\n    }\r\n    //move, or dig if this.state.digging\r\n    onClickTile(id) {\r\n        var currentPlayerID;\r\n        this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n\r\n        if (this.isBuried()) {\r\n            //you can only dig when buried\r\n            if (this.isSameTile(id) && this.state.digging && this.props.G.tiles[id].sandCount > 0) {\r\n                this.props.moves.dig(id);\r\n                this.setState({ digging: false });\r\n            }\r\n        }\r\n        else if (this.isAdjacentTile(id) || this.isSameTile(id) ||\r\n            (this.isDiagonalTile(id) && this.props.G.players[currentPlayerID].role === \"Explorer\")) {\r\n            if (this.state.digging && this.props.G.tiles[id].sandCount > 0) {\r\n                this.props.moves.dig(id);\r\n                this.setState({ digging: false });\r\n            }\r\n            else if (!this.isSameTile(id) &&\r\n                (this.props.G.tiles[id].sandCount < 2 || this.props.G.players[currentPlayerID].role === \"Climber\")\r\n                && !this.state.digging) {\r\n                this.props.moves.move(id);\r\n            }\r\n        }\r\n        //move through tunnel\r\n        else if (this.props.G.tiles[id].type === \"tunnel\" && this.props.G.tiles[id].isRevealed &&\r\n            this.props.G.tiles[this.props.G.players[currentPlayerID].position].type === \"tunnel\" &&\r\n            this.props.G.tiles[this.props.G.players[currentPlayerID].position].isRevealed &&\r\n            this.props.G.tiles[id].sandCount < 2 && !this.state.digging) {\r\n            this.props.moves.move(id);\r\n        }\r\n    }\r\n    excavate() {\r\n        if (this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].isRevealed === true) {\r\n            this.setState({ excavateErrorMsg: \"This tile is already excavated!\" })\r\n            setTimeout(() => this.setState({ excavateErrorMsg: '' }), 3000);\r\n        }\r\n        else if (this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].sandCount !== 0) {\r\n            this.setState({ excavateErrorMsg: \"Remove all sand on this tile before excavating!\" })\r\n            setTimeout(() => this.setState({ excavateErrorMsg: '' }), 3000);\r\n        }\r\n        else {\r\n            this.props.moves.excavate();\r\n        }\r\n    }\r\n    giveWaterTo(giverID, receiverID) {\r\n        if (this.props.G.players[giverID].water === 0) {\r\n            this.setState({ givingWater: false, waterErrorMsg: \"You don't have enough water!\" });\r\n            setTimeout(() => this.setState({ waterErrorMsg: '' }), 3000);\r\n        }\r\n        else if (this.props.G.players[receiverID].water === this.props.G.players[receiverID].maxWater) {\r\n            this.setState({ givingWater: false, waterErrorMsg: \"Target has full water!\" });\r\n            setTimeout(() => this.setState({ waterErrorMsg: '' }), 3000);\r\n        }\r\n        else {\r\n            this.props.moves.giveWater(giverID, receiverID);\r\n            this.setState({ givingWater: false });\r\n        }\r\n    }\r\n    pickUpFinalPart() {\r\n        //no need to check condition; button won't show up if it's not met\r\n        this.props.moves.pickUpFinalPart();\r\n    }\r\n    mitigate() {\r\n        if (this.props.G.numDraws > 0) {\r\n            this.props.moves.mitigate();\r\n        }\r\n        else {\r\n            this.setState({ mitigateErrorMsg: \"All storm cards already mitigated!\" })\r\n            setTimeout(() => this.setState({ mitigateErrorMsg: '' }), 3000);\r\n        }\r\n    }\r\n    navigate(id) {\r\n        this.setState({ chooseNavigate: false })\r\n        this.props.moves.navigate(id);\r\n    }\r\n    collectWater() {\r\n        this.props.moves.collectWater();\r\n    }\r\n    carry(playerID) {\r\n        this.setState({ chooseCarry: false, carrying: true });\r\n        this.props.moves.carry(playerID);\r\n    }\r\n    drop() {\r\n        var currentPlayerID;\r\n        this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n\r\n        this.setState({ chooseCarry: false, carrying: false });\r\n        if (this.props.G.players[currentPlayerID].carryingPlayer === -1) {\r\n            this.setState({ dropErrorMsg: \"Nobody to drop! Carry first.\" });\r\n            setTimeout(() => this.setState({ dropErrorMsg: '' }), 3000);\r\n        }\r\n        else {\r\n            this.props.moves.drop();\r\n        }\r\n    }\r\n    //SPAGHETTI CODE ALERT: PARAMETERS ARE VERY INCONSISTENT ACROSS THESE FUNCTIONS\r\n    //SOME ARE TILE ID'S OR SOMETHING, SOME ARE PLAYER ID'S\r\n    //honestly these one-parameter methods shouldn't exist. but i would have to refactor a LOT if i were to fix it\r\n    isAdjacentTile(id) {\r\n        var currentPlayerID;\r\n        this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n\r\n        const currentPlayerPos = this.props.G.players[currentPlayerID].position;\r\n        var check1 = id >= 0 && id <= 24 &&\r\n            (id === currentPlayerPos - 1 || id === currentPlayerPos + 1 ||\r\n                id === currentPlayerPos - 5 || id === currentPlayerPos + 5);\r\n        if (id === currentPlayerPos - 1 || id === currentPlayerPos + 1) {\r\n            //check2 is to prevent moving across the entire board, e.g. between 4-5, 9-10, etc.\r\n            var check2 = (Math.floor(id / 5) === Math.floor(currentPlayerPos / 5));\r\n            return check2;\r\n        }\r\n        else {\r\n            return check1;\r\n        }\r\n    }\r\n    isAdjacentTile2(playerID1, playerID2) {\r\n        var pos1 = this.props.G.players[playerID1].position;\r\n        var pos2 = this.props.G.players[playerID2].position;\r\n        var check1 =\r\n            (pos1 === pos2 - 1 || pos1 === pos2 + 1 ||\r\n                pos1 === pos2 - 5 || pos1 === pos2 + 5);\r\n        if (pos1 === pos2 - 1 || pos1 === pos2 + 1) {\r\n            //check2 is to prevent moving across the entire board, e.g. between 4-5, 9-10, etc.\r\n            var check2 = (Math.floor(pos1 / 5) === Math.floor(pos2 / 5));\r\n            return check2;\r\n        }\r\n        else {\r\n            return check1;\r\n        }\r\n    }\r\n    isSameTile(id) {\r\n        var currentPlayerID;\r\n        this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n\r\n        return (id === this.props.G.players[currentPlayerID].position);\r\n    }\r\n    isSameTile2(playerID1, playerID2) {\r\n        return (this.props.G.players[playerID1].position === this.props.G.players[playerID2].position);\r\n    }\r\n    isDiagonalTile(id) {\r\n        var currentPlayerID;\r\n        this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n\r\n        const currentPlayerPos = this.props.G.players[currentPlayerID].position;\r\n        var check1 = id >= 0 && id <= 24 &&\r\n            (id === currentPlayerPos - 6 || id === currentPlayerPos - 4 ||\r\n                id === currentPlayerPos + 4 || id === currentPlayerPos + 6);\r\n        //check2 is to make sure id is exactly one row away from the current tile\r\n        var check2 = Math.abs(Math.floor(id / 5) - Math.floor(currentPlayerPos / 5)) === 1;\r\n        return check1 && check2;\r\n    }\r\n    isDiagonalTile2(playerID1, playerID2) {\r\n        var pos1 = this.props.G.players[playerID1].position;\r\n        var pos2 = this.props.G.players[playerID2].position;\r\n        var check1 = \r\n            (pos1 === playerID2 - 6 || pos1 === playerID2 - 4 ||\r\n                pos1 === playerID2 + 4 || pos1 === playerID2 + 6);\r\n        //check2 is to make sure id is exactly one row away from the current tile\r\n        var check2 = Math.abs(Math.floor(pos1 / 5) - Math.floor(playerID2 / 5)) === 1;\r\n        return check1 && check2;\r\n    }\r\n    endTurn() {\r\n        this.setState({ digging: false });\r\n        this.props.events.endTurn();\r\n    }\r\n\r\n    //for idToStateClass purposes, not onClickTile\r\n    tileIsMovable(id) {\r\n        var currentPlayerID;\r\n        this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n\r\n        if (this.isBuried()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return (this.isAdjacentTile(id)\r\n                || (this.props.G.players[currentPlayerID].role === \"Explorer\" && this.isDiagonalTile(id))\r\n                || (this.props.G.tiles[this.props.G.players[currentPlayerID].position].type === \"tunnel\"\r\n                    && this.props.G.tiles[this.props.G.players[currentPlayerID].position].isRevealed\r\n                    && this.props.G.tiles[id].type === \"tunnel\" && this.props.G.tiles[id].isRevealed))\r\n                && !this.isSameTile(id)\r\n                && (this.props.G.tiles[id].sandCount < 2 || this.props.G.players[currentPlayerID].role === \"Climber\")\r\n                && !this.state.digging && !this.isBuried();\r\n        }\r\n    }\r\n    //for idToStateClass purposes, not onClickTile\r\n    tileIsDiggable(id) {\r\n        if (this.isBuried()) {\r\n            return this.isSameTile(id) && this.state.digging && this.props.G.tiles[id].sandCount > 0;\r\n            //last condition here should always be true lol\r\n        }\r\n        else {\r\n            return (this.isAdjacentTile(id) || this.isSameTile(id)\r\n                || (this.props.G.players[this.props.ctx.currentPlayer].role === \"Explorer\" && this.isDiagonalTile(id)))\r\n                && (this.state.digging && this.props.G.tiles[id].sandCount > 0);\r\n        }\r\n    }\r\n    //returns whether current player is buried\r\n    isBuried() {\r\n        var currentPlayerID;\r\n        this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n\r\n        //check if current tile has a climber on it;\r\n        //iterate through all players, and check if a climber's position is current position\r\n        const currPos = this.props.G.players[currentPlayerID].position;\r\n        for (var i = 0; i < this.props.G.players.length; i++) {\r\n            if (this.props.G.players[i].role === \"Climber\" && this.props.G.players[i].position === currPos) {\r\n                return false;\r\n            }\r\n        }\r\n        return this.props.G.tiles[currPos].sandCount > 1;\r\n    }\r\n\r\n    render() {\r\n        //role selection screen\r\n        if (this.state.assignID < this.props.ctx.numPlayers) {\r\n            return (\r\n                <div className=\"center\">\r\n                    <div id=\"title\">\r\n                        Role Selection\r\n                    </div>\r\n                    <div className=\"header\">\r\n                        Choose role for Player {this.state.assignID}:\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Archeologist\"); }}>\r\n                            Archeologist\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Climber\"); }}>\r\n                            Climber\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Explorer\"); }}>\r\n                            Explorer\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Meteorologist\"); }}>\r\n                            Meteorologist\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Navigator\"); }}>\r\n                            Navigator\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Water Carrier\"); }}>\r\n                            Water Carrier\r\n                        </button>\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        <div>\r\n                            <p id=\"header\">Archeologist (🍼3)</p>\r\n                            <ul>\r\n                                <li>Removes 2 sand when digging instead of 1.</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Climber (🍼3)</p>\r\n                            <ul>\r\n                                <li>Carry: moves 1 other player along with Climber. (Cost: free)</li>\r\n                                <li>Can move over tiles with 2 or more sand.</li>\r\n                                <li>Allows all players on Climber's current tile to leave even with 2 or more sand.</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Explorer (🍼4)</p>\r\n                            <ul>\r\n                                <li>Can move, dig, and use items diagonally.</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Meteorologist (🍼4)</p>\r\n                            <ul>\r\n                                <li>Mitigate: draw 1 less Storm at the end of the turn. (Cost: 1 action)</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Navigator (🍼4)</p>\r\n                            <ul>\r\n                                <li>Navigate: move another player up to 3 tiles. Climber and Explorer keep their abilities. (Cost: 1 action)</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Water Carrier (🍼5)</p>\r\n                            <ul>\r\n                                <li>Collect Water: take 2 water from an excavated well. (Cost: 1 action)</li>\r\n                                <li>Can give water to adjacent players (for free).</li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        //difficulty selection screen\r\n        if (this.state.assignDifficulty === false) {\r\n            return (\r\n                <div className=\"center\">\r\n                    <div id=\"title\">\r\n                        Difficulty Selection\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        <button onClick={() => { this.assignDifficultyTo(0); }}>\r\n                            Novice\r\n                        </button>\r\n                        <button onClick={() => { this.assignDifficultyTo(1); }}>\r\n                            Normal\r\n                        </button>\r\n                        <button onClick={() => { this.assignDifficultyTo(2); }}>\r\n                            Elite\r\n                        </button>\r\n                        <button onClick={() => { this.assignDifficultyTo(3); }}>\r\n                            Legendary\r\n                        </button>\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        (Difficulty sets the starting storm level.)\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        var currentPlayerID;\r\n        this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n\r\n        //adds class to render borders on appropriate tiles when this.state.digging\r\n        //or when moving (!this.state.digging)\r\n        let idToStateClass =\r\n            new Array(25).fill(\" \")\r\n                .map((currentClass, tileID, _) => {\r\n                    if (this.state.digging && this.tileIsDiggable(tileID) && this.props.G.numMoves < 4 && !this.props.ctx.gameover) {\r\n                        return `${currentClass} diggable` // Add the `diggable` class to this\r\n                    } else {\r\n                        return `${currentClass}`; // Do not add any more classes\r\n                    }\r\n                }) // You can chain additional `map` function calls if you need to add more classes to a tile based on the current state of your program\r\n                .map((currentClass, tileID, _) => {\r\n                    if (!this.state.digging && this.tileIsMovable(tileID)\r\n                        && ((!this.props.G.isNavigating && this.props.G.numMoves < 4) || (this.props.G.isNavigating && this.props.G.navigatingNumMoves < 3))\r\n                        && !this.props.ctx.gameover) {\r\n                        return `${currentClass} movable`\r\n                    } else {\r\n                        return `${currentClass}`;\r\n                    }\r\n                }) // May be problematic if you somehow add multiple classes that have conflicting properties\r\n\r\n        var tiles = [];\r\n        for (var i = 0; i < 5; i++) {\r\n            var row = [];\r\n            for (var j = 0; j < 5; j++) {\r\n                var tile = [];\r\n                const id = 5 * i + j;\r\n                if (this.props.G.tiles[id].type === \"storm\") {\r\n                    //render finalParts if it has at least one\r\n                    if (this.props.G.tiles[id].finalParts.length > 0) {\r\n                        tile.push(<div className=\"final-part\">Parts: {this.props.G.tiles[id].finalParts}</div>)\r\n                    }\r\n                    row.push(<td className=\"storm\">{tile}</td>);\r\n                }\r\n                else {\r\n                    var playersOnThisTile = [];\r\n                    //render players on current tile\r\n                    for (var k = 0; k < this.props.G.players.length; k++) {\r\n                        if (this.props.G.players[k].position === id) {\r\n                            playersOnThisTile.push(k);\r\n                        }\r\n                    }\r\n                    tile.push(<div className=\"player\">{playersOnThisTile}</div>);\r\n                    //render sandCount\r\n                    if (this.props.G.tiles[id].sandCount !== 0) {\r\n                        var sandIndicator = \"\";\r\n                        for (var l = 0; l < this.props.G.tiles[id].sandCount; l++) {\r\n                            sandIndicator = sandIndicator.concat(\"l\");\r\n                        }\r\n                        tile.push(<div className={this.props.G.tiles[id].sandCount > 1 ? \"sand red\" : \"sand\"}>\r\n                            {sandIndicator}</div>);\r\n                    }\r\n                    //render finalParts if it has at least one\r\n                    if (this.props.G.tiles[id].finalParts.length > 0) {\r\n                        tile.push(<div className=\"final-part\">Parts: {this.props.G.tiles[id].finalParts}</div>)\r\n                    }\r\n                    //render unrevealed backgrounds (set by className CSS)\r\n                    if (this.props.G.tiles[id].isRevealed === false) {\r\n                        row.push(<td key={id} className={(this.props.G.tiles[id].type === \"well\" || this.props.G.tiles[id].type === \"mirage\" ?\r\n                            \"unrevealed-water\" : \"unrevealed\") + idToStateClass[id]} onClick={() => this.onClickTile(id)}>{tile}</td>);\r\n                    }\r\n                    //render clue tile (assign the right className)\r\n                    else if (this.props.G.tiles[id].type === \"clue\") {\r\n                        const className = this.props.G.tiles[id].part + this.props.G.tiles[id].pos + idToStateClass[id];\r\n                        row.push(<td key={id} className={className + idToStateClass[id]}\r\n                            onClick={() => this.onClickTile(id)}>{tile}</td>);\r\n                    }\r\n                    else {\r\n                        row.push(<td key={id} className={this.props.G.tiles[id].type + idToStateClass[id]}\r\n                            onClick={() => this.onClickTile(id)}>{tile}</td>);\r\n                    }\r\n                }\r\n            }\r\n            tiles.push(<tr key={i}>{row}</tr>);\r\n        }\r\n\r\n        var header = [];\r\n        if (this.props.ctx.gameover) {\r\n            if (this.props.ctx.gameover.win) {\r\n                header.push(\r\n                    <div>\r\n                        VICTORY (Difficulty: {this.props.G.difficultyName})\r\n                    </div>\r\n                )\r\n            }\r\n            else {\r\n                header.push(\r\n                    <div>\r\n                        DEFEAT (Difficulty: {this.props.G.difficultyName})\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n        if (this.props.G.isNavigating) {\r\n            header.push(\r\n                <div>\r\n                    <div>\r\n                        Player {this.props.ctx.currentPlayer} navigating Player {this.props.G.navigatingID}\r\n                    </div>\r\n                    <div>\r\n                        Actions left in navigation: {3 - this.props.G.navigatingNumMoves}, Actions left in turn: {4 - this.props.G.numMoves}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            header.push(\r\n                <div>\r\n                    <div>\r\n                        Player {this.props.ctx.currentPlayer}'s turn\r\n                    </div>\r\n                    <div>\r\n                        Actions left in turn: {4 - this.props.G.numMoves}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        var actionButtons = [];\r\n        if (this.isBuried()) {\r\n            actionButtons.push(\r\n                <div>\r\n                    You are buried!\r\n                </div>\r\n            )\r\n        }\r\n        if (!this.props.G.isNavigating) {\r\n            actionButtons.push(\r\n                <div>\r\n                    <button accesskey=\"d\" onClick={() => { this.setState({ digging: !this.state.digging }); }}>\r\n                        Dig (1)\r\n                    </button>\r\n                    <button accesskey=\"x\" onClick={() => { this.excavate(); }}>\r\n                        Excavate (1)\r\n                    </button>\r\n                    <div>\r\n                        {this.state.digging ? \"Choose a tile to dig.\" : \"\"}\r\n                    </div>\r\n                </div>\r\n            );\r\n            actionButtons.push(\r\n                <div>\r\n                    {this.state.excavateErrorMsg}\r\n                </div>\r\n            )\r\n            //Mitigate for meteorologist only\r\n            if (this.props.G.players[this.props.ctx.currentPlayer].role === \"Meteorologist\") {\r\n                actionButtons.push(\r\n                    <button onClick={() => { this.mitigate(); }}>\r\n                        Mitigate (1)\r\n                    </button>\r\n                )\r\n            }\r\n            actionButtons.push(\r\n                <div>\r\n                    {this.state.mitigateErrorMsg}\r\n                </div>\r\n            )\r\n            //collectWater for water carrier only\r\n            if (this.props.G.players[this.props.ctx.currentPlayer].role === \"Water Carrier\"\r\n                && this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].type === \"well\"\r\n                && this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].isRevealed\r\n                && this.props.G.players[this.props.ctx.currentPlayer].water < this.props.G.players[this.props.ctx.currentPlayer].maxWater) {\r\n                actionButtons.push(\r\n                    <button onClick={() => { this.collectWater(); }}>\r\n                        Collect +2 water (1)\r\n                    </button>\r\n                )\r\n            }\r\n        }\r\n\r\n        //carry for climber only\r\n        if (this.props.G.players[currentPlayerID].role === \"Climber\") {\r\n            actionButtons.push(\r\n                <div>\r\n                    <button onClick={() => { this.setState({ chooseCarry: !this.state.chooseCarry }) }}>\r\n                        Carry (0):\r\n                    </button>\r\n                    <button onClick={() => { this.drop(); }}>\r\n                        Drop (0)\r\n                    </button>\r\n                </div>\r\n            )\r\n            //spawn choose player buttons\r\n            if (this.state.chooseCarry) {\r\n                //find if there are any players on current tile\r\n                var playersFound = false;\r\n                for (var i = 0; i < this.props.G.players.length; i++) {\r\n                    const index = i;\r\n                    if (index != currentPlayerID &&\r\n                        this.isSameTile(this.props.G.players[index].position)) {\r\n                        actionButtons.push(\r\n                            <button onClick={() => { this.carry(index); }}>\r\n                                Player {index}\r\n                            </button>\r\n                        );\r\n                        playersFound = true;\r\n                    }\r\n                }\r\n                //spawned no buttons?\r\n                if (!playersFound) {\r\n                    this.setState({ chooseCarry: false, carryErrorMsg: \"Nobody to carry! (They must be on the same tile.)\" });\r\n                    setTimeout(() => this.setState({ carryErrorMsg: '' }), 3000);\r\n                }\r\n            }\r\n        }\r\n        actionButtons.push(\r\n            <div>\r\n                {this.state.carryErrorMsg}\r\n            </div>\r\n        )\r\n        actionButtons.push(\r\n            <div>\r\n                {this.state.dropErrorMsg}\r\n            </div>\r\n        )\r\n\r\n        //only show pickup part button when the tile of the current player position\r\n        //has at least 1 finalPart, and the tile is revealed\r\n        if (!this.props.G.isNavigating) {\r\n            if (this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].isRevealed &&\r\n                this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].finalParts.length > 0) {\r\n                actionButtons.push(\r\n                    <button onClick={() => { this.pickUpFinalPart(); }}>\r\n                        Pick up part (1)\r\n                    </button>\r\n                )\r\n            }\r\n        }\r\n\r\n        //navigator only\r\n        if (!this.props.G.isNavigating) {\r\n            if (this.props.G.players[this.props.ctx.currentPlayer].role === \"Navigator\") {\r\n                actionButtons.push(\r\n                    <button onClick={() => { this.setState({ chooseNavigate: !this.state.chooseNavigate }) }}>\r\n                        Navigate (1):\r\n                    </button>\r\n                );\r\n            }\r\n            //spawn choose player buttons\r\n            if (this.state.chooseNavigate) {\r\n                for (var i = 0; i < this.props.G.players.length; i++) {\r\n                    const index = i;\r\n                    if (index != this.props.ctx.currentPlayer) {\r\n                        actionButtons.push(\r\n                            <button onClick={() => { this.navigate(index); }}>\r\n                                Player {index}\r\n                            </button>\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.props.G.isNavigating) {\r\n            actionButtons.push(\r\n                <div>\r\n                    <button accesskey=\"z\" onClick={() => { this.props.undo(); }}>\r\n                        Undo\r\n                    </button>\r\n                    <button accesskey=\"e\" onClick={() => { this.props.moves.stopNavigating() }}>\r\n                        End navigation\r\n                    </button>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            actionButtons.push(\r\n                <div>\r\n                    <button accesskey=\"z\" onClick={() => { this.props.undo(); }}>\r\n                        Undo\r\n                    </button>\r\n                    <button accesskey=\"e\" onClick={() => { this.endTurn(); }}>\r\n                        End turn\r\n                    </button>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        var rightbar = [];\r\n        //player info\r\n        rightbar.push(\r\n            <div>\r\n                {this.state.waterErrorMsg}\r\n            </div>\r\n        );\r\n        rightbar.push(<div>Players:</div>)\r\n        var playerInfoList = [];\r\n        for (var i = 0; i < this.props.ctx.numPlayers; i++) {\r\n            const giver = i;\r\n            var giveWaterButtons = [];\r\n            for (var j = 0; j < this.props.ctx.numPlayers; j++) {\r\n                const index = j;\r\n                if (index !== giver\r\n                    && (this.isSameTile2(giver, index)\r\n                        || (this.props.G.players[giver].role === \"Water Carrier\" &&\r\n                            this.isAdjacentTile2(giver, index)))) {\r\n                    giveWaterButtons.push(\r\n                        <button className=\"small-button\" onClick={() => { this.giveWaterTo(giver, index); }}>\r\n                            {index}\r\n                        </button>\r\n                    );\r\n                }\r\n            }\r\n            if (this.props.G.players[i].role === \"Climber\" && this.props.G.players[i].carryingPlayer !== -1) {\r\n                playerInfoList.push(\r\n                    <div>\r\n                        <div>\r\n                            {i} - {this.props.G.players[i].role} 🍼 {this.props.G.players[i].water} / {this.props.G.players[i].maxWater}&nbsp;\r\n                            - Carrying Player {this.props.G.players[i].carryingPlayer}&nbsp;\r\n                            - Give water to: {giveWaterButtons}\r\n                        </div>\r\n                        <div>\r\n                            {this.props.G.players[i].equipment.join(\", \")}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n            else {\r\n                playerInfoList.push(\r\n                    <div>\r\n                        <div>\r\n                            {i} - {this.props.G.players[i].role} 🍼 {this.props.G.players[i].water} / {this.props.G.players[i].maxWater}&nbsp;\r\n                            - Give water to: {giveWaterButtons}\r\n                        </div>\r\n                        <div>\r\n                            {this.props.G.players[i].equipment.join(\", \")}\r\n                        </div>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n        rightbar.push(playerInfoList);\r\n\r\n        rightbar.push(\r\n            <div>\r\n                <p></p>\r\n                <div>Current storm level: {this.props.G.stormLevel}</div>\r\n                <p></p>\r\n            </div>\r\n        );\r\n\r\n        //storm deck last turn\r\n        rightbar.push(\r\n            <div>\r\n                <p></p>\r\n                End of last turn:\r\n            </div>\r\n        );\r\n        for (var i = 0; i < this.props.G.lastDrawType.length; i++) {\r\n            rightbar.push(\r\n                <div>\r\n                    {this.props.G.lastDrawType[i]}\r\n                </div>\r\n            );\r\n        }\r\n        //probabilities\r\n        rightbar.push(\r\n            <div>\r\n                <p></p>\r\n                <div>\r\n                    Chance of 1+ Sun Beats Down at end of turn:&nbsp;\r\n                    {((1 - (1 - this.props.G.sunBeatsDownProb / 100) ** (this.props.G.numDraws)) * 100).toFixed(2)}%\r\n                </div>\r\n                <div>\r\n                    Chance of 1+ Storm Picks Up at end of turn:&nbsp;\r\n                    {((1 - (1 - this.props.G.stormPicksUpProb / 100) ** (this.props.G.numDraws)) * 100).toFixed(2)}%\r\n                </div>\r\n            </div>\r\n        );\r\n        //currently collected parts\r\n        var partList = [];\r\n        for (var i = 0; i < this.props.G.collectedParts.length; i++) {\r\n            var color;\r\n            if (this.props.G.collectedParts[i] === \"A\") {\r\n                color = \"red\";\r\n            }\r\n            else if (this.props.G.collectedParts[i] === \"B\") {\r\n                color = \"green\";\r\n            }\r\n            else if (this.props.G.collectedParts[i] === \"C\") {\r\n                color = \"blue\";\r\n            }\r\n            else if (this.props.G.collectedParts[i] === \"D\") {\r\n                color = \"purple\";\r\n            }\r\n            partList.push(\r\n                <div className={color}>\r\n                    {this.props.G.collectedParts[i]}\r\n                </div>\r\n            );\r\n        }\r\n        if (this.props.G.collectedParts.length === 0) {\r\n            rightbar.push(\r\n                <div>\r\n                    <p></p>\r\n                    Collected parts (4 total): none\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            rightbar.push(\r\n                <div>\r\n                    <p></p>\r\n                    Collected parts (4 total): {partList}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        var draw3, draw4, draw5, draw6, death;\r\n        if (this.props.ctx.numPlayers === 2) {\r\n            draw3 = \"1 - 3\";\r\n            draw4 = \"4 - 7\";\r\n            draw5 = \"8 - 10\";\r\n            draw6 = \"11 - 12\";\r\n            death = \"13\";\r\n        }\r\n        else if (this.props.ctx.numPlayers === 3 || this.props.ctx.numPlayers === 4) {\r\n            draw3 = \"1 - 4\";\r\n            draw4 = \"5 - 8\";\r\n            draw5 = \"9 - 11\";\r\n            draw6 = \"12 - 13\";\r\n            death = \"14\";\r\n        }\r\n        else if (this.props.ctx.numPlayers === 5) {\r\n            draw3 = \"1 - 5\";\r\n            draw4 = \"6 - 9\";\r\n            draw5 = \"10 - 12\";\r\n            draw6 = \"13 - 14\";\r\n            death = \"15\";\r\n        }\r\n\r\n        var infobar = []\r\n        infobar.push(\r\n            <div className=\"infobar\">\r\n                <p></p>\r\n                <div>\r\n                    Draw 2 at storm level 0\r\n                </div>\r\n                <div>\r\n                    Draw 3 at levels {draw3}\r\n                </div>\r\n                <div>\r\n                    Draw 4 at levels {draw4}\r\n                </div>\r\n                <div>\r\n                    Draw 5 at levels {draw5}\r\n                </div>\r\n                <div>\r\n                    Draw 6 at levels {draw6}\r\n                </div>\r\n                <div>\r\n                    Game over at level {death}\r\n                </div>\r\n                <p></p>\r\n                <div>\r\n                    Archeologist - removes 2 sand when digging\r\n                </div>\r\n                <div>\r\n                    Climber - can move over any tile; allows everyone on current tile to move.\r\n                </div>\r\n                <div>\r\n                    &emsp;Carry (0): bring another player\r\n                </div>\r\n                <div>\r\n                    Explorer - can move, dig, and use Dune Blaster diagonally\r\n                </div>\r\n                <div>\r\n                    Meteorologist - Mitigate (1): draw 1 less storm card at end of turn\r\n                </div>\r\n                <div>\r\n                    Navigator - Navigate (1): move any other player up to 3 tiles;\r\n                </div>\r\n                <div>\r\n                    &emsp;Climber and Explorer keep their abilities\r\n                </div>\r\n                <div>\r\n                    Water Carrier - can give water to adjacent players.\r\n                </div>\r\n                <div>\r\n                    &emsp;Collect Water (1): collect 2 water from a well\r\n                </div>\r\n                <p></p>\r\n                <div>\r\n                    Dune Blaster: dig all sand from a diggable tile\r\n                </div>\r\n                <div>\r\n                    Jet Pack: move to any unblocked tile. Can carry one player on ride\r\n                </div>\r\n                <div>\r\n                    Secret Water Reserve: give 2 water to all players on current tile\r\n                </div>\r\n                <div>\r\n                    Solar Shield: prevent Sun Beats Down to all players on\r\n                </div>\r\n                <div>\r\n                    &emsp;the tile this was used, until user's next turn\r\n                </div>\r\n                <div>\r\n                    Terrascope: peak under an unexcavated tile\r\n                </div>\r\n                <div>\r\n                    Time Throttle (owner's turn only): gain 2 extra actions this turn\r\n                </div>\r\n                <p></p>\r\n                <div>\r\n                    Starting equipment deck:\r\n                </div>\r\n                <div>\r\n                    3x Dune Blaster, 3x Jet Pack,\r\n                </div>\r\n                <div>\r\n                    2x Solar Shield, 2x Terrascope,\r\n                </div>\r\n                <div>\r\n                    1x Secret Water Reserve, 1x Time Throttle\r\n                </div>\r\n                <p></p>\r\n                <div>Hotkeys:</div>\r\n                <div>Dig: alt + d</div>\r\n                <div>Excavate: alt + x</div>\r\n                <div>Undo: alt + z</div>\r\n                <div>End turn / navigation: alt + e</div>\r\n            </div>\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"fl\">\r\n                    <div className=\"header center\">\r\n                        {header}\r\n                    </div>\r\n                    <table>\r\n                        <tbody>{tiles}</tbody>\r\n                    </table>\r\n                    <div className=\"center\">\r\n                        {actionButtons}\r\n                    </div>\r\n                </div>\r\n                <div className=\"fl\">\r\n                    {rightbar}\r\n                </div>\r\n                <div className=\"fl\">\r\n                    {infobar}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Client } from 'boardgame.io/react';\r\nimport { ForbiddenDesert } from './Game';\r\nimport { ForbiddenDesertBoard } from './board';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  state = { numPlayers: null };\r\n\r\n  render() {\r\n    if (this.state.numPlayers === null) {\r\n      return (\r\n        <div className=\"center\">\r\n          <div>\r\n            !! THIS IS A WORK IN PROGRESS !!\r\n          </div>\r\n          <div id=\"title\">\r\n            FORBIDDEN DESERT\r\n          </div>\r\n          <div>\r\n            Based off the original game by Gamewright, designed by Matt Leacock.\r\n          </div>\r\n          <div>\r\n            <a href=\"https://www.gamewright.com/gamewright/pdfs/Rules/ForbiddenDesertTM-RULES.pdf\" target=\"_blank\">Official rules manual</a>\r\n          </div>\r\n          <div>\r\n            <a href=\"https://boardgamegeek.com/boardgame/136063/forbidden-desert\" target=\"_blank\">BoardGameGeek listing</a>\r\n          </div>\r\n          <div>\r\n            <a href=\"https://github.com/hwabis/forbidden-desert\" target=\"_blank\">Source code</a>\r\n          </div>\r\n          <div id=\"header\">\r\n            <p>Select number of players:</p>\r\n            <button onClick={() => this.setState({ numPlayers: 2 })}>\r\n              2\r\n            </button>\r\n            <button onClick={() => this.setState({ numPlayers: 3 })}>\r\n              3\r\n            </button>\r\n            <button onClick={() => this.setState({ numPlayers: 4 })}>\r\n              4\r\n            </button>\r\n            <button onClick={() => this.setState({ numPlayers: 5 })}>\r\n              5\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    else {\r\n      const ForbiddenDesertClient = Client({\r\n        game: ForbiddenDesert,\r\n        numPlayers: this.state.numPlayers,\r\n        board: ForbiddenDesertBoard,\r\n      });\r\n      return (\r\n        <div>\r\n          <ForbiddenDesertClient />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}