{"version":3,"sources":["Game.js","board.js","App.js","index.js"],"names":["ForbiddenDesert","setup","ctx","players","setupPlayers","numPlayers","tiles","setupTiles","equipmentDeck","setupEquipment","difficultyName","stormLevel","numDraws","lastDrawType","collectedParts","stormPicksUpProb","sunBeatsDownProb","turnEnded","numMoves","isNavigating","navigatingID","navigatingNumMoves","moves","move","G","pos","currentPlayer","position","carryingPlayer","dig","role","sandCount","excavate","currPos","peek","isRevealed","type","i","length","water","maxWater","found","part","hid","vid","partName","index","finalParts","push","equipment","pop","undoable","giveWater","giveID","receiveID","pickUpFinalPart","tempRemovedPart","splice","mitigate","collectWater","carry","id","carrierID","carryPlayerID","drop","playerID","noUndoDrop","navigate","events","setStage","giveEquipment","equipmentIndex","targetPlayerID","item","duneBlaster","targetTileID","jetPack","terrascope","solarShield","solarShielding","secretWaterReserve","timeThrottle","setPlayerInfo","setDifficulty","diff","removeWater","placeFinalPart","addSand","magicFinalPart","giveDuneBlaster","giveJetPack","giveTerrascope","giveSolarShield","giveSecretWaterReserve","giveTimeThrottle","turn","stages","navigating","stopNavigating","endStage","onBegin","onEnd","draw","val","random","Die","bothQualify","doStormPicksUp","Math","min","stormPicksuPProb","solarShielded","j","stormPos","maxTilesAffected","windDirection","windStrength","affectedPos","candidatePos","floor","tempStormTile","prevPos","directionString","affectedPlayers","endIf","win","launchpadPos","count","getRandomInt","max","shuffle","sandTiles","deck","array","randomIndex","currentIndex","ForbiddenDesertBoard","state","assignID","assignDifficulty","digging","chooseCarry","chooseNavigate","duneBlasting","duneBlastingPlayerID","duneBlastingInventoryID","jetPacking","jetPackingPlayerID","jetPackingInventoryID","terrascoping","terrascopingPlayerID","terrascopingInventoryID","excavateErrorMsg","mitigateErrorMsg","carryErrorMsg","dropErrorMsg","this","props","setState","currentPlayerID","isBuried","isSameTile","isAdjacentTile","isDiagonalTile","setTimeout","giverID","receiverID","waterErrorMsg","player","undefined","equipmentName","currentPlayerPos","check1","playerID1","playerID2","pos1","pos2","check2","abs","endTurn","className","onClick","assignRoleTo","assignDifficultyTo","idToStateClass","Array","fill","map","currentClass","tileID","_","tileIsDiggable","gameover","tileIsMovable","row","tile","playersOnThisTile","k","sandIndicator","l","concat","classN","onClickTile","header","actionButtons","accessKey","carryingPlayerID","playersFound","isSameTile2","undo","rightbar","playerInfoList","giveWaterButtons","giver","isAdjacentTile2","giveWaterTo","giveEquipmentButtons","giveEquipmentTo","useEquipment","peekedTiles","partLetter","color","join","toFixed","draw3","draw4","draw5","draw6","death","partList","infobar","React","Component","App","href","target","ForbiddenDesertClient","Client","game","board","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a59b2a5.chunk.js","sourcesContent":["import { INVALID_MOVE } from \"boardgame.io/core\";\r\n\r\nexport const ForbiddenDesert = {\r\n    setup: (ctx) => ({\r\n        players: setupPlayers(ctx.numPlayers),\r\n        tiles: setupTiles(),\r\n        equipmentDeck: setupEquipment(),\r\n        difficultyName: \"\",\r\n        stormLevel: 0,\r\n        numDraws: 0,\r\n        //for showing end-of-last-turn history\r\n        lastDrawType: [],\r\n        //collect 4 parts\r\n        collectedParts: [],\r\n        //for storm probability stuff (see sim.py)\r\n        stormPicksUpProb: 3,\r\n        sunBeatsDownProb: 3,\r\n        //for turn onEnd; there's a bug where sometimes (particularly when people are at 0 water),\r\n        //onEnd happens twice. i can't figure out the cause, but this should fix it\r\n        turnEnded: false,\r\n        //use this instead of ctx.numMoves\r\n        numMoves: 0,\r\n        //navigator\r\n        isNavigating: false,\r\n        navigatingID: -1,\r\n        navigatingNumMoves: 0,\r\n    }),\r\n\r\n    moves: {\r\n        move: (G, ctx, pos) => {\r\n            if (G.numMoves < 4) {\r\n                G.players[ctx.currentPlayer].position = pos;\r\n                //climber\r\n                if (G.players[ctx.currentPlayer].carryingPlayer !== -1) {\r\n                    G.players[G.players[ctx.currentPlayer].carryingPlayer].position = pos;\r\n                }\r\n                G.numMoves += 1;\r\n            }\r\n        },\r\n        dig: (G, ctx, pos) => {\r\n            if (G.numMoves < 4) {\r\n                if (G.players[ctx.currentPlayer].role === \"Archeologist\") {\r\n                    G.tiles[pos].sandCount -= 2;\r\n                    if (G.tiles[pos].sandCount < 0) {\r\n                        G.tiles[pos].sandCount = 0;\r\n                    }\r\n                }\r\n                else {\r\n                    G.tiles[pos].sandCount--;\r\n                }\r\n                G.numMoves += 1;\r\n            }\r\n        },\r\n        excavate: {\r\n            move: (G, ctx) => {\r\n                if (G.numMoves < 4) {\r\n                    const currPos = G.players[ctx.currentPlayer].position;\r\n                    //remove peeked\r\n                    G.tiles[currPos].peek = false;\r\n\r\n                    G.tiles[currPos].isRevealed = true;\r\n                    if (G.tiles[currPos].type === \"well\") {\r\n                        //everyone on currPos gets two water\r\n                        for (var i = 0; i < G.players.length; i++) {\r\n                            if (G.players[i].position === currPos) {\r\n                                G.players[i].water += 2;\r\n                            }\r\n                            if (G.players[i].water > G.players[i].maxWater) {\r\n                                G.players[i].water = G.players[i].maxWater;\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (G.tiles[currPos].type === \"clue\") {\r\n                        //check if the other clue has also been revealed\r\n                        //if so, then generate finalPart on the appropriate tile\r\n                        var found = false;\r\n                        for (var i = 0; i < G.tiles.length; i++) {\r\n                            if (G.tiles[i].isRevealed && G.tiles[i].type === \"clue\" &&\r\n                                i !== currPos && G.tiles[i].part === G.tiles[currPos].part) {\r\n                                found = true;\r\n                            }\r\n                        }\r\n                        if (found) {\r\n                            var hid;\r\n                            var vid;\r\n                            var partName = G.tiles[currPos].part;\r\n                            for (var i = 0; i < G.tiles.length; i++) {\r\n                                if (G.tiles[i].part === partName && G.tiles[i].pos === \"h\") {\r\n                                    hid = i;\r\n                                }\r\n                                if (G.tiles[i].part === partName && G.tiles[i].pos === \"v\") {\r\n                                    vid = i;\r\n                                }\r\n                            }\r\n                            //index = (hid rounded down to the nearest multiple of 5) + (vid % 5)\r\n                            while ((hid % 5) !== 0 && hid >= 0) {\r\n                                hid -= 1;\r\n                            }\r\n                            const index = hid + (vid % 5);\r\n                            G.tiles[index].finalParts.push(partName);\r\n                        }\r\n                    }\r\n                    else if (G.tiles[currPos].type === \"gear\" || G.tiles[currPos].type === \"tunnel\") {\r\n                        if (G.equipmentDeck.length > 0) {\r\n                            //just pop off the top; deck is already shuffled\r\n                            G.players[ctx.currentPlayer].equipment.push(G.equipmentDeck.pop());\r\n                        }\r\n                    }\r\n                    G.numMoves += 1;\r\n                }\r\n            },\r\n            undoable: false\r\n        },\r\n        giveWater: (G, ctx, giveID, receiveID) => {\r\n            //free move\r\n            G.players[giveID].water -= 1;\r\n            G.players[receiveID].water += 1;\r\n        },\r\n        pickUpFinalPart: (G, ctx) => {\r\n            if (G.numMoves < 4) {\r\n                const tempRemovedPart = G.tiles[G.players[ctx.currentPlayer].position].finalParts[0];\r\n                //remove the first final part from tile\r\n                G.tiles[G.players[ctx.currentPlayer].position].finalParts.splice(0, 1);\r\n                //add to collected parts\r\n                G.collectedParts.push(tempRemovedPart);\r\n                G.numMoves += 1;\r\n            }\r\n        },\r\n        mitigate: (G, ctx) => {\r\n            if (G.numMoves < 4) {\r\n                G.numDraws -= 1;\r\n                G.numMoves += 1;\r\n            }\r\n        },\r\n        collectWater: (G, ctx) => {\r\n            if (G.numMoves < 4) {\r\n                G.players[ctx.currentPlayer].water += 2;\r\n                if (G.players[ctx.currentPlayer].water > G.players[ctx.currentPlayer].maxWater) {\r\n                    G.players[ctx.currentPlayer].water = G.players[ctx.currentPlayer].maxWater;\r\n                }\r\n                G.numMoves += 1;\r\n            }\r\n        },\r\n        //climber\r\n        carry: (G, ctx, id, carrierID) => {\r\n            //free move\r\n            var carryPlayerID;\r\n            carrierID = undefined ? carryPlayerID = ctx.currentPlayer : carryPlayerID = carrierID;\r\n            G.players[carryPlayerID].carryingPlayer = id;\r\n        },\r\n        drop: (G, ctx, playerID) => {\r\n            //free move\r\n            var carryPlayerID;\r\n            playerID = undefined ? carryPlayerID = ctx.currentPlayer : carryPlayerID = playerID;\r\n            G.players[carryPlayerID].carryingPlayer = -1;\r\n        },\r\n        noUndoDrop: {\r\n            move: (G, ctx, playerID) => {\r\n                //free move\r\n                var carryPlayerID;\r\n                playerID = undefined ? carryPlayerID = ctx.currentPlayer : carryPlayerID = playerID;\r\n                G.players[carryPlayerID].carryingPlayer = -1;\r\n            },\r\n            undoable: false\r\n        },\r\n        //navigator\r\n        navigate: (G, ctx, id) => {\r\n            if (G.numMoves < 4) {\r\n                G.isNavigating = true;\r\n                G.navigatingID = id;\r\n                ctx.events.setStage(\"navigating\");\r\n                G.numMoves += 1;\r\n            }\r\n        },\r\n        giveEquipment: (G, ctx, playerID, equipmentIndex, targetPlayerID) => {\r\n            const item = G.players[playerID].equipment[equipmentIndex];\r\n            G.players[targetPlayerID].equipment.push(item);\r\n            G.players[playerID].equipment.splice(equipmentIndex, 1);\r\n        },\r\n        duneBlaster: {\r\n            move: (G, ctx, playerID, equipmentIndex, targetTileID) => {\r\n                G.tiles[targetTileID].sandCount = 0;\r\n                //remove item\r\n                G.players[playerID].equipment.splice(equipmentIndex, 1);\r\n            },\r\n            undoable: false\r\n        },\r\n        jetPack: {\r\n            move: (G, ctx, playerID, equipmentIndex, targetTileID) => {\r\n                //move\r\n                G.players[playerID].position = targetTileID;\r\n                if (G.players[playerID].carryingPlayer !== -1) {\r\n                    G.players[G.players[playerID].carryingPlayer].position = targetTileID;\r\n                }\r\n                //drop any players\r\n                G.players[playerID].carryingPlayer = -1;\r\n                //remove item\r\n                G.players[playerID].equipment.splice(equipmentIndex, 1);\r\n            },\r\n            undoable: false\r\n        },\r\n        terrascope: {\r\n            move: (G, ctx, playerID, equipmentIndex, targetTileID) => {\r\n                G.tiles[targetTileID].peek = true;\r\n                //remove item\r\n                G.players[playerID].equipment.splice(equipmentIndex, 1);\r\n            },\r\n            undoable: false\r\n        },\r\n        solarShield: {\r\n            move: (G, ctx, playerID, equipmentIndex) => {\r\n                G.players[playerID].solarShielding = true;\r\n                //remove item\r\n                G.players[playerID].equipment.splice(equipmentIndex, 1);\r\n            },\r\n            undoable: false\r\n        },\r\n        secretWaterReserve: {\r\n            move: (G, ctx, playerID, equipmentIndex) => {\r\n                //everyone on this tile gets two water\r\n                for (var i = 0; i < G.players.length; i++) {\r\n                    if (G.players[i].position === G.players[playerID].position) {\r\n                        G.players[i].water += 2;\r\n                    }\r\n                    if (G.players[i].water > G.players[i].maxWater) {\r\n                        G.players[i].water = G.players[i].maxWater;\r\n                    }\r\n                }\r\n                //remove item\r\n                G.players[playerID].equipment.splice(equipmentIndex, 1);\r\n            },\r\n            undoable: false\r\n        },\r\n        timeThrottle: {\r\n            move: (G, ctx, playerID, equipmentIndex) => {\r\n                G.numMoves -= 2;\r\n                //remove item\r\n                G.players[playerID].equipment.splice(equipmentIndex, 1);\r\n            },\r\n            undoable: false\r\n        },\r\n        setPlayerInfo: {\r\n            move: (G, ctx, id, role) => {\r\n                //free move\r\n                G.players[id].role = role;\r\n                if (role === \"Archeologist\" || role === \"Climber\") {\r\n                    G.players[id].maxWater = 3;\r\n                    G.players[id].water = 3;\r\n                }\r\n                else if (role === \"Explorer\" || role === \"Meteorologist\" || role === \"Navigator\") {\r\n                    G.players[id].maxWater = 4;\r\n                    G.players[id].water = 4;\r\n                }\r\n                else {\r\n                    G.players[id].maxWater = 5;\r\n                    G.players[id].water = 5;\r\n                }\r\n            },\r\n            undoable: false,\r\n        },\r\n        setDifficulty: {\r\n            move: (G, ctx, diff) => {\r\n                //free move \r\n                G.stormLevel = diff;\r\n                if (diff === 0) {\r\n                    G.numDraws = 2;\r\n                    G.difficultyName = \"Novice\";\r\n                }\r\n                else {\r\n                    if (diff === 1) {\r\n                        G.difficultyName = \"Normal\";\r\n                    }\r\n                    else if (diff === 2) {\r\n                        G.difficultyName = \"Elite\";\r\n                    }\r\n                    else if (diff === 3) {\r\n                        G.difficultyName = \"Legendary\";\r\n                    }\r\n                    G.numDraws = 3;\r\n                }\r\n            },\r\n            undoable: false,\r\n        },\r\n        //DEBUG ONLY\r\n        removeWater: (G, ctx, id) => {\r\n            G.players[id].water -= 1;\r\n        },\r\n        placeFinalPart: (G, ctx, id) => {\r\n            G.tiles[id].finalParts.push(\"Z\");\r\n        },\r\n        addSand: (G, ctx, id) => {\r\n            G.tiles[id].sandCount += 1;\r\n        },\r\n        magicFinalPart: (G, ctx) => {\r\n            G.collectedParts.push(\"Z\");\r\n        },\r\n        giveDuneBlaster: (G, ctx, playerID) => {\r\n            G.players[playerID].equipment.push(\"Dune Blaster\");\r\n        },\r\n        giveJetPack: (G, ctx, playerID) => {\r\n            G.players[playerID].equipment.push(\"Jet Pack\");\r\n        },\r\n        giveTerrascope: (G, ctx, playerID) => {\r\n            G.players[playerID].equipment.push(\"Terrascope\");\r\n        },\r\n        giveSolarShield: (G, ctx, playerID) => {\r\n            G.players[playerID].equipment.push(\"Solar Shield\");\r\n        },\r\n        giveSecretWaterReserve: (G, ctx, playerID) => {\r\n            G.players[playerID].equipment.push(\"Secret Water Reserve\");\r\n        },\r\n        giveTimeThrottle: (G, ctx, playerID) => {\r\n            G.players[playerID].equipment.push(\"Time Throttle\");\r\n        },\r\n    },\r\n\r\n    turn: {\r\n        stages: {\r\n            navigating: {\r\n                moves: {\r\n                    move: (G, ctx, pos) => {\r\n                        if (G.navigatingNumMoves < 3) {\r\n                            G.players[G.navigatingID].position = pos;\r\n                            //climber\r\n                            if (G.players[G.navigatingID].carryingPlayer !== -1) {\r\n                                G.players[G.players[G.navigatingID].carryingPlayer].position = pos;\r\n                            }\r\n                            G.navigatingNumMoves += 1;\r\n                        }\r\n                    },\r\n                    //climber only\r\n                    carry: (G, ctx, id) => {\r\n                        //free move\r\n                        G.players[G.navigatingID].carryingPlayer = id;\r\n                    },\r\n                    drop: (G, ctx) => {\r\n                        //free move\r\n                        G.players[G.navigatingID].carryingPlayer = -1;\r\n                    },\r\n                    stopNavigating: (G, ctx, pos) => {\r\n                        //climber automatically drop\r\n                        G.players[G.navigatingID].carryingPlayer = -1;\r\n                        G.isNavigating = false;\r\n                        G.navigatingNumMoves = 0;\r\n                        ctx.events.endStage();\r\n                    }\r\n                },\r\n            }\r\n        },\r\n        onBegin: (G, ctx) => {\r\n            G.numMoves = 0;\r\n            G.turnEnded = false;\r\n            //remove solarShielding from current player\r\n            G.players[ctx.currentPlayer].solarShielding = false;\r\n        },\r\n        onEnd: (G, ctx) => {\r\n            if (!G.turnEnded) {\r\n                //climber automatically drop\r\n                G.players[ctx.currentPlayer].carryingPlayer = -1;\r\n\r\n                G.lastDrawType = [];\r\n                //numDraws should be set from end of last turn\r\n                //(we set it at the end for meteorologist to be able to decrement it during turn)\r\n                for (var draw = 0; draw < G.numDraws; draw++) {\r\n                    var val = ctx.random.Die(100);\r\n                    if (val <= (G.stormPicksUpProb) || val <= (G.sunBeatsDownProb)) {\r\n                        var bothQualify = false;\r\n                        var doStormPicksUp = false;\r\n                        //if both qualify...\r\n                        if (val <= Math.min((G.stormPicksuPProb), (G.sunBeatsDownProb))) {\r\n                            bothQualify = true;\r\n                            //...prioritize the one with higher probability.\r\n                            if ((G.stormPicksUpProb) > (G.sunBeatsDownProb)) {\r\n                                doStormPicksUp = true;\r\n                            }\r\n                        }\r\n                        if ((!bothQualify && val <= (G.stormPicksUpProb)) || (bothQualify && doStormPicksUp)) {\r\n                            G.stormLevel += 1;\r\n                            G.lastDrawType.push(\"Storm Picks Up\");\r\n                            //reset stormPicksUp probability\r\n                            G.stormPicksUpProb = 3;\r\n                            //increment sunBeatsDown\r\n                            G.sunBeatsDownProb += 2;\r\n                        }\r\n                        else {\r\n                            for (var i = 0; i < G.players.length; i++) {\r\n                                //first check if player is on a tile with a player with solarShielding\r\n                                var solarShielded = false;\r\n                                for (var j = 0; j < G.players.length; j++) {\r\n                                    if (G.players[j].position === G.players[i].position && G.players[j].solarShielding) {\r\n                                        solarShielded = true;\r\n                                    }\r\n                                }\r\n                                if (!(G.tiles[G.players[i].position].type === \"tunnel\" && G.tiles[G.players[i].position].isRevealed)\r\n                                    && !solarShielded) {\r\n                                    G.players[i].water -= 1;\r\n                                }\r\n                            }\r\n                            G.lastDrawType.push(\"Sun Beats Down\");\r\n                            //reset sunBeatsDown\r\n                            G.sunBeatsDownProb = 3;\r\n                            //increment stormPicksUp\r\n                            G.stormPicksUpProb += 1;\r\n                        }\r\n                    }\r\n                    else {\r\n                        //increment both\r\n                        G.stormPicksUpProb += 1;\r\n                        G.sunBeatsDownProb += 2;\r\n\r\n                        var stormPos = 0;\r\n                        for (stormPos; stormPos < G.tiles.length; stormPos++) {\r\n                            if (G.tiles[stormPos].type === \"storm\") {\r\n                                break;\r\n                            }\r\n                        }\r\n                        //1 = up, 2 = left, 3 = down, 4 = right\r\n                        var windDirection = ctx.random.Die(4);\r\n                        //1-3 = 1, 4-5 = 2, 6 = 3\r\n                        var windStrength = ctx.random.Die(6);\r\n                        var maxTilesAffected;\r\n                        if (windStrength <= 3) {\r\n                            maxTilesAffected = 1;\r\n                        }\r\n                        else if (windStrength <= 5) {\r\n                            maxTilesAffected = 2;\r\n                        }\r\n                        else {\r\n                            maxTilesAffected = 3;\r\n                        }\r\n                        //identify positions of tiles that are moved\r\n                        var affectedPos = [];\r\n                        var candidatePos = stormPos;\r\n                        if (windDirection === 1) {\r\n                            while (affectedPos.length < maxTilesAffected) {\r\n                                candidatePos += 5;\r\n                                if (candidatePos >= 0 && candidatePos <= 24) {\r\n                                    affectedPos.push(candidatePos);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (windDirection === 2) {\r\n                            while (affectedPos.length < maxTilesAffected) {\r\n                                candidatePos += 1;\r\n                                //check whether on the same row\r\n                                if (candidatePos >= 0 && candidatePos <= 24 &&\r\n                                    Math.floor(candidatePos / 5) === Math.floor(stormPos / 5)) {\r\n                                    affectedPos.push(candidatePos);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (windDirection === 3) {\r\n                            while (affectedPos.length < maxTilesAffected) {\r\n                                candidatePos -= 5;\r\n                                if (candidatePos >= 0 && candidatePos <= 24) {\r\n                                    affectedPos.push(candidatePos);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (windDirection === 4) {\r\n                            while (affectedPos.length < maxTilesAffected) {\r\n                                candidatePos -= 1;\r\n                                //check whether on the same row\r\n                                if (candidatePos >= 0 && candidatePos <= 24 &&\r\n                                    Math.floor(candidatePos / 5) === Math.floor(stormPos / 5)) {\r\n                                    affectedPos.push(candidatePos);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        //add 1 sand to affected tiles\r\n                        for (var i = 0; i < affectedPos.length; i++) {\r\n                            G.tiles[affectedPos[i]].sandCount += 1;\r\n                        }\r\n\r\n                        //execute movements\r\n                        const tempStormTile = G.tiles[stormPos];\r\n                        var prevPos = stormPos;\r\n                        //edge case: first give all of stormPos's finalParts to the first affectedPos tile\r\n                        if (affectedPos.length > 0) {\r\n                            for (var i = 0; i < G.tiles[stormPos].finalParts.length; i++) {\r\n                                G.tiles[affectedPos[0]].finalParts.push(G.tiles[stormPos].finalParts[i]);\r\n                            }\r\n                            //clear storm's finalParts\r\n                            G.tiles[stormPos].finalParts = [];\r\n                        }\r\n                        //...now execute\r\n                        for (var i = 0; i < affectedPos.length; i++) {\r\n                            G.tiles[prevPos] = G.tiles[affectedPos[i]];\r\n                            prevPos = affectedPos[i];\r\n                        }\r\n                        if (affectedPos.length !== 0) {\r\n                            G.tiles[affectedPos[affectedPos.length - 1]] = tempStormTile;\r\n                        }\r\n\r\n                        //move all affected players\r\n                        var affectedPlayers = [];\r\n                        for (var i = 0; i < G.players.length; i++) {\r\n                            for (var j = 0; j < affectedPos.length; j++) {\r\n                                if (G.players[i].position === affectedPos[j]) {\r\n                                    affectedPlayers.push(i);\r\n                                }\r\n                            }\r\n                        }\r\n                        for (var i = 0; i < affectedPlayers.length; i++) {\r\n                            if (windDirection === 1) {\r\n                                G.players[affectedPlayers[i]].position -= 5;\r\n                            }\r\n                            else if (windDirection === 2) {\r\n                                G.players[affectedPlayers[i]].position -= 1;\r\n                            }\r\n                            else if (windDirection === 3) {\r\n                                G.players[affectedPlayers[i]].position += 5;\r\n                            }\r\n                            else if (windDirection === 4) {\r\n                                G.players[affectedPlayers[i]].position += 1;\r\n                            }\r\n                        }\r\n\r\n                        var directionString;\r\n                        if (windDirection === 1) {\r\n                            directionString = \"up\";\r\n                        }\r\n                        else if (windDirection === 2) {\r\n                            directionString = \"left\";\r\n                        }\r\n                        else if (windDirection === 3) {\r\n                            directionString = \"down\";\r\n                        }\r\n                        else if (windDirection === 4) {\r\n                            directionString = \"right\";\r\n                        }\r\n                        G.lastDrawType.push(\"Wind: \" + directionString + \", strength \" + maxTilesAffected);\r\n                    }\r\n                }\r\n                //check storm level + ctx.numPlayers, and draw according to that\r\n                if (G.stormLevel === 0) {\r\n                    G.numDraws = 2;\r\n                }\r\n                else if (ctx.numPlayers === 2) {\r\n                    if (G.stormLevel <= 3) {\r\n                        G.numDraws = 3;\r\n                    }\r\n                    else if (G.stormLevel <= 7) {\r\n                        G.numDraws = 4;\r\n                    }\r\n                    else if (G.stormLevel <= 10) {\r\n                        G.numDraws = 5;\r\n                    }\r\n                    else {\r\n                        G.numDraws = 6;\r\n                    }\r\n                }\r\n                else if (ctx.numPlayers === 3 || ctx.numPlayers === 4) {\r\n                    if (G.stormLevel <= 4) {\r\n                        G.numDraws = 3;\r\n                    }\r\n                    else if (G.stormLevel <= 8) {\r\n                        G.numDraws = 4;\r\n                    }\r\n                    else if (G.stormLevel <= 11) {\r\n                        G.numDraws = 5;\r\n                    }\r\n                    else {\r\n                        G.numDraws = 6;\r\n                    }\r\n                }\r\n                else if (ctx.numPlayers === 5) {\r\n                    if (G.stormLevel <= 5) {\r\n                        G.numDraws = 3;\r\n                    }\r\n                    else if (G.stormLevel <= 9) {\r\n                        G.numDraws = 4;\r\n                    }\r\n                    else if (G.stormLevel <= 12) {\r\n                        G.numDraws = 5;\r\n                    }\r\n                    else {\r\n                        G.numDraws = 6;\r\n                    }\r\n                }\r\n                G.turnEnded = true;\r\n            }\r\n        }\r\n    },\r\n\r\n    endIf: (G, ctx) => {\r\n        for (var i = 0; i < G.players.length; i++) {\r\n            if (G.players[i].water < 0) {\r\n                return { win: false };\r\n            }\r\n        }\r\n        if ((ctx.numPlayers === 2 && G.stormLevel === 13) ||\r\n            ((ctx.numPlayers === 3 || ctx.numPlayers === 4) && G.stormLevel === 14) ||\r\n            (ctx.numPlayers === 5 && G.stormLevel === 15)) {\r\n            return { win: false };\r\n        }\r\n        if (G.collectedParts.length === 4) {\r\n            //first find launchpad position\r\n            var launchpadPos;\r\n            for (var i = 0; i < G.tiles.length; i++) {\r\n                if (G.tiles[i].type === \"launchpad\") {\r\n                    launchpadPos = i;\r\n                    break;\r\n                }\r\n            }\r\n            //check if every player is on it\r\n            var count = 0;\r\n            for (var i = 0; i < G.players.length; i++) {\r\n                if (G.players[i].position === launchpadPos) {\r\n                    count += 1;\r\n                }\r\n            }\r\n            if (count === G.players.length && G.tiles[launchpadPos].isRevealed) {\r\n                return { win: true };\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n};\r\n\r\nvar setupPlayers = (numPlayers) => {\r\n    var players = [];\r\n    var pos = getRandomInt(25);\r\n    while (pos === 12) {\r\n        pos = getRandomInt(25);\r\n    }\r\n    for (var i = 0; i < numPlayers; i++) {\r\n        players.push({\r\n            role: \"\",\r\n            position: pos,\r\n            water: 0,\r\n            maxWater: 0,\r\n            equipment: [],\r\n            carryingPlayer: -1,\r\n            solarShielding: false,\r\n        });\r\n    }\r\n    return players;\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\nvar setupTiles = () => {\r\n    var tiles = [];\r\n    for (var i = 0; i < 2; i++) {\r\n        tiles.push({\r\n            isRevealed: false,\r\n            sandCount: 0,\r\n            type: \"well\",\r\n            finalParts: [],\r\n            peek: false\r\n        });\r\n    }\r\n    tiles.push({\r\n        isRevealed: false,\r\n        sandCount: 0,\r\n        type: \"mirage\",\r\n        finalParts: [],\r\n        peek: false\r\n    });\r\n    for (var i = 0; i < 9; i++) {\r\n        tiles.push({\r\n            isRevealed: false,\r\n            sandCount: 0,\r\n            type: \"gear\",\r\n            finalParts: [],\r\n            peek: false\r\n        });\r\n    }\r\n    for (var i = 0; i < 3; i++) {\r\n        tiles.push({\r\n            isRevealed: false,\r\n            sandCount: 0,\r\n            type: \"tunnel\",\r\n            finalParts: [],\r\n            peek: false\r\n        })\r\n    }\r\n    for (var i = 0; i < 4; i++) {\r\n        for (var j = 0; j < 2; j++) {\r\n            //parts: A, B, C, D\r\n            //pos: 0 --> vertical, 1 --> horizontal\r\n            var part;\r\n            var pos;\r\n            if (i === 0) part = \"A\";\r\n            else if (i === 1) part = \"B\";\r\n            else if (i === 2) part = \"C\";\r\n            else if (i === 3) part = \"D\";\r\n            if (j === 0) pos = \"h\";\r\n            else if (j === 1) pos = \"v\"\r\n            tiles.push({\r\n                isRevealed: false,\r\n                sandCount: 0,\r\n                type: \"clue\",\r\n                part: part,\r\n                pos: pos,\r\n                finalParts: [],\r\n                peek: false\r\n            });\r\n        }\r\n    }\r\n    tiles.push({\r\n        isRevealed: false,\r\n        sandCount: 0,\r\n        type: \"launchpad\",\r\n        finalParts: [],\r\n        peek: false\r\n    })\r\n    shuffle(tiles);\r\n    tiles.splice(12, 0, {\r\n        isRevealed: false,\r\n        sandCount: 0,\r\n        type: \"storm\",\r\n        finalParts: [],\r\n        peek: false\r\n    });\r\n\r\n    //setup sand\r\n    const sandTiles = [2, 6, 8, 10, 14, 16, 18, 22];\r\n    for (var i = 0; i < sandTiles.length; i++) {\r\n        tiles[sandTiles[i]].sandCount = 1;\r\n    }\r\n    return tiles;\r\n}\r\n\r\nvar setupEquipment = () => {\r\n    var deck = [];\r\n    for (var i = 0; i < 3; i++) {\r\n        deck.push(\"Jet Pack\");\r\n    }\r\n    for (var i = 0; i < 3; i++) {\r\n        deck.push(\"Dune Blaster\");\r\n    }\r\n    for (var i = 0; i < 2; i++) {\r\n        deck.push(\"Terrascope\");\r\n    }\r\n    for (var i = 0; i < 2; i++) {\r\n        deck.push(\"Solar Shield\");\r\n    }\r\n    deck.push(\"Secret Water Reserve\");\r\n    deck.push(\"Time Throttle\");\r\n    shuffle(deck);\r\n    return deck;\r\n}\r\n\r\n//https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array lol sorry :(\r\nfunction shuffle(array) {\r\n    var currentIndex = array.length, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex--;\r\n\r\n        // And swap it with the current element.\r\n        [array[currentIndex], array[randomIndex]] = [\r\n            array[randomIndex], array[currentIndex]];\r\n    }\r\n\r\n    return array;\r\n}","import React from 'react';\r\nimport './board.css'\r\n\r\nexport class ForbiddenDesertBoard extends React.Component {\r\n    state = {\r\n        assignID: 0,\r\n        assignDifficulty: false,\r\n        digging: false,\r\n        chooseCarry: false,\r\n        chooseNavigate: false,\r\n        duneBlasting: false,\r\n        duneBlastingPlayerID: -1,\r\n        duneBlastingInventoryID: -1,\r\n        jetPacking: false,\r\n        jetPackingPlayerID: -1,\r\n        jetPackingInventoryID: -1,\r\n        terrascoping: false,\r\n        terrascopingPlayerID: -1,\r\n        terrascopingInventoryID: -1,\r\n        excavateErrorMsg: '',\r\n        mitigateErrorMsg: '',\r\n        carryErrorMsg: '',\r\n        dropErrorMsg: '',\r\n    }\r\n\r\n    assignRoleTo(playerID, role) {\r\n        this.props.moves.setPlayerInfo(playerID, role);\r\n        this.setState({ assignID: this.state.assignID + 1 });\r\n    }\r\n    assignDifficultyTo(diff) {\r\n        this.props.moves.setDifficulty(diff);\r\n        this.setState({ assignDifficulty: true })\r\n    }\r\n    //move, or dig if this.state.digging, or dune blast if this.state.duneBlasting\r\n    onClickTile(id) {\r\n        var currentPlayerID;\r\n        if (this.state.duneBlasting) {\r\n            currentPlayerID = this.state.duneBlastingPlayerID;\r\n            if (this.isBuried()) {\r\n                if (this.isSameTile(id)) {\r\n                    this.props.moves.duneBlaster(currentPlayerID, this.state.duneBlastingInventoryID, id);\r\n                    this.setState({\r\n                        duneBlasting: false,\r\n                        duneBlastingPlayerID: -1,\r\n                        duneBlastingInventoryID: -1,\r\n                    });\r\n                }\r\n            }\r\n            else if (this.isAdjacentTile(id) || this.isSameTile(id) ||\r\n                (this.isDiagonalTile(id) && this.props.G.players[currentPlayerID].role === \"Explorer\")) {\r\n                if (this.props.G.tiles[id].sandCount > 0) {\r\n                    this.props.moves.duneBlaster(currentPlayerID, this.state.duneBlastingInventoryID, id);\r\n                    this.setState({\r\n                        duneBlasting: false,\r\n                        duneBlastingPlayerID: -1,\r\n                        duneBlastingInventoryID: -1,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        else if (this.state.jetPacking) {\r\n            currentPlayerID = this.state.jetPackingPlayerID;\r\n            //gonna assume you can jetpack out even when buried...\r\n            if (this.props.G.tiles[id].sandCount < 2) {\r\n                this.props.moves.jetPack(currentPlayerID, this.state.jetPackingInventoryID, id);\r\n                this.setState({\r\n                    jetPacking: false,\r\n                    jetPackingPlayerID: -1,\r\n                    jetPackingInventoryID: -1\r\n                });\r\n            }\r\n        }\r\n        else if (this.state.terrascoping) {\r\n            currentPlayerID = this.state.terrascopingPlayerID;\r\n            if (!this.props.G.tiles[id].isRevealed && !this.props.G.tiles[id].peek) {\r\n                this.props.moves.terrascope(currentPlayerID, this.state.terrascopingInventoryID, id);\r\n                this.setState({\r\n                    terrascoping: false,\r\n                    terrascopingPlayerID: -1,\r\n                    terrascopingInventoryID: -1\r\n                });\r\n            }\r\n        }\r\n        else {\r\n            this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n            if (this.isBuried()) {\r\n                //you can only dig when buried\r\n                if (this.isSameTile(id) && this.state.digging && this.props.G.tiles[id].sandCount > 0) {\r\n                    this.props.moves.dig(id);\r\n                    this.setState({ digging: false });\r\n                }\r\n            }\r\n            else if (this.isAdjacentTile(id) || this.isSameTile(id) ||\r\n                (this.isDiagonalTile(id) && this.props.G.players[currentPlayerID].role === \"Explorer\")) {\r\n                if (this.state.digging && this.props.G.tiles[id].sandCount > 0) {\r\n                    this.props.moves.dig(id);\r\n                    this.setState({ digging: false });\r\n                }\r\n                else if (!this.isSameTile(id) &&\r\n                    (this.props.G.tiles[id].sandCount < 2 || this.props.G.players[currentPlayerID].role === \"Climber\")\r\n                    && !this.state.digging) {\r\n                    this.props.moves.move(id);\r\n                }\r\n            }\r\n            //move through tunnel\r\n            else if (this.props.G.tiles[id].type === \"tunnel\" && this.props.G.tiles[id].isRevealed &&\r\n                this.props.G.tiles[this.props.G.players[currentPlayerID].position].type === \"tunnel\" &&\r\n                this.props.G.tiles[this.props.G.players[currentPlayerID].position].isRevealed &&\r\n                this.props.G.tiles[id].sandCount < 2 && !this.state.digging) {\r\n                this.props.moves.move(id);\r\n            }\r\n        }\r\n    }\r\n    excavate() {\r\n        if (this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].isRevealed === true) {\r\n            this.setState({ excavateErrorMsg: \"This tile is already excavated!\" })\r\n            setTimeout(() => this.setState({ excavateErrorMsg: '' }), 3000);\r\n        }\r\n        else if (this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].sandCount !== 0) {\r\n            this.setState({ excavateErrorMsg: \"Remove all sand on this tile before excavating!\" })\r\n            setTimeout(() => this.setState({ excavateErrorMsg: '' }), 3000);\r\n        }\r\n        else {\r\n            this.props.moves.excavate();\r\n        }\r\n    }\r\n    giveWaterTo(giverID, receiverID) {\r\n        if (this.props.G.players[giverID].water === 0) {\r\n            this.setState({ waterErrorMsg: \"You don't have enough water!\" });\r\n            setTimeout(() => this.setState({ waterErrorMsg: '' }), 3000);\r\n        }\r\n        else if (this.props.G.players[receiverID].water === this.props.G.players[receiverID].maxWater) {\r\n            this.setState({ waterErrorMsg: \"Target has full water!\" });\r\n            setTimeout(() => this.setState({ waterErrorMsg: '' }), 3000);\r\n        }\r\n        else {\r\n            this.props.moves.giveWater(giverID, receiverID);\r\n        }\r\n    }\r\n    giveEquipmentTo(player, index, targetPlayerID) {\r\n        this.props.moves.giveEquipment(player, index, targetPlayerID);\r\n    }\r\n    pickUpFinalPart() {\r\n        //no need to check condition; button won't show up if it's not met\r\n        this.props.moves.pickUpFinalPart();\r\n    }\r\n    mitigate() {\r\n        if (this.props.G.numDraws > 0) {\r\n            this.props.moves.mitigate();\r\n        }\r\n        else {\r\n            this.setState({ mitigateErrorMsg: \"All storm cards already mitigated!\" })\r\n            setTimeout(() => this.setState({ mitigateErrorMsg: '' }), 3000);\r\n        }\r\n    }\r\n    navigate(id) {\r\n        this.setState({ chooseNavigate: false })\r\n        this.props.moves.navigate(id);\r\n    }\r\n    collectWater() {\r\n        this.props.moves.collectWater();\r\n    }\r\n    carry(playerID, carrierID) {\r\n        this.setState({ chooseCarry: false });\r\n        this.props.moves.carry(playerID, carrierID);\r\n    }\r\n    drop(playerID) {\r\n        var currentPlayerID;\r\n        if (playerID === undefined) {\r\n            this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n        }\r\n        else {\r\n            currentPlayerID = playerID;\r\n        }\r\n\r\n        this.setState({ chooseCarry: false });\r\n        if (this.props.G.players[currentPlayerID].carryingPlayer === -1) {\r\n            this.setState({ dropErrorMsg: \"Nobody to drop! Carry first.\" });\r\n            setTimeout(() => this.setState({ dropErrorMsg: '' }), 3000);\r\n        }\r\n        else {\r\n            this.props.moves.drop(currentPlayerID);\r\n        }\r\n    }\r\n    useEquipment(playerID, equipmentIndex, equipmentName) {\r\n        if (equipmentName === \"Dune Blaster\") {\r\n            if (playerID === this.state.duneBlastingPlayerID) {\r\n                this.setState({\r\n                    digging: false,\r\n                    jetPacking: false,\r\n                    terrascoping: false,\r\n                    duneBlasting: false,\r\n                    duneBlastingPlayerID: -1,\r\n                    duneBlastingInventoryID: -1\r\n                });\r\n            }\r\n            else {\r\n                this.setState({\r\n                    digging: false,\r\n                    jetPacking: false,\r\n                    terrascoping: false,\r\n                    duneBlasting: true,\r\n                    duneBlastingPlayerID: playerID,\r\n                    duneBlastingInventoryID: equipmentIndex\r\n                });\r\n            }\r\n            //the actual move happens in onClickTile\r\n        }\r\n        else if (equipmentName === \"Jet Pack\") {\r\n            if (playerID === this.state.jetPackingPlayerID) {\r\n                this.setState({\r\n                    digging: false,\r\n                    duneBlasting: false,\r\n                    terrascoping: false,\r\n                    jetPacking: false,\r\n                    jetPackingPlayerID: -1,\r\n                    jetPackingInventoryID: -1\r\n                });\r\n                //drop anyone if was carrying\r\n                //TODO: THIS FIXES PLAYERS BEING ABLE TO ABUSE CARRY -> MOVE EVEN IF THEY'RE NOT CLIMBER\r\n                //BUT THIS PREVENTS UNDO UNNECESSARILY... can't think of a fix for now :(\r\n                this.props.moves.noUndoDrop(playerID);\r\n            }\r\n            else {\r\n                this.setState({\r\n                    digging: false,\r\n                    duneBlasting: false,\r\n                    terrascoping: false,\r\n                    jetPacking: true,\r\n                    jetPackingPlayerID: playerID,\r\n                    jetPackingInventoryID: equipmentIndex\r\n                });\r\n            }\r\n            //the actual move happens in onClickTile\r\n        }\r\n        else if (equipmentName === \"Solar Shield\") {\r\n            //apparently solar shields move with the player\r\n            //https://boardgamegeek.com/thread/1346173/solar-shield-clarification\r\n            this.props.moves.solarShield(playerID, equipmentIndex);\r\n        }\r\n        else if (equipmentName === \"Terrascope\") {\r\n            if (playerID === this.state.terrascopingPlayerID) {\r\n                this.setState({\r\n                    digging: false,\r\n                    duneBlasting: false,\r\n                    jetPacking: false,\r\n                    terrascoping: false,\r\n                    terrascopingPlayerID: -1,\r\n                    terrascopingInventoryID: -1\r\n                });\r\n            }\r\n            else {\r\n                this.setState({\r\n                    digging: false,\r\n                    duneBlasting: false,\r\n                    jetPacking: false,\r\n                    terrascoping: true,\r\n                    terrascopingPlayerID: playerID,\r\n                    terrascopingInventoryID: equipmentIndex\r\n                });\r\n            }\r\n            //the actual move happens in onClickTile\r\n        }\r\n        else if (equipmentName === \"Secret Water Reserve\") {\r\n            this.props.moves.secretWaterReserve(playerID, equipmentIndex);\r\n        }\r\n        else if (equipmentName === \"Time Throttle\") {\r\n            this.props.moves.timeThrottle(playerID, equipmentIndex);\r\n        }\r\n    }\r\n    //SPAGHETTI CODE ALERT: PARAMETERS ARE VERY INCONSISTENT ACROSS THESE FUNCTIONS\r\n    //SOME ARE TILE ID'S OR SOMETHING, SOME ARE PLAYER ID'S\r\n    //honestly these one-parameter methods shouldn't exist. but i would have to refactor a LOT if i were to fix it\r\n    isAdjacentTile(id) {\r\n        var currentPlayerID;\r\n        this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n        if (this.state.duneBlasting) {\r\n            currentPlayerID = this.state.duneBlastingPlayerID\r\n        }\r\n\r\n        const currentPlayerPos = this.props.G.players[currentPlayerID].position;\r\n        var check1 = id >= 0 && id <= 24 &&\r\n            (id === currentPlayerPos - 1 || id === currentPlayerPos + 1 ||\r\n                id === currentPlayerPos - 5 || id === currentPlayerPos + 5);\r\n        if (id === currentPlayerPos - 1 || id === currentPlayerPos + 1) {\r\n            //check2 is to prevent moving across the entire board, e.g. between 4-5, 9-10, etc.\r\n            var check2 = (Math.floor(id / 5) === Math.floor(currentPlayerPos / 5));\r\n            return check2;\r\n        }\r\n        else {\r\n            return check1;\r\n        }\r\n    }\r\n    isAdjacentTile2(playerID1, playerID2) {\r\n        var pos1 = this.props.G.players[playerID1].position;\r\n        var pos2 = this.props.G.players[playerID2].position;\r\n        var check1 =\r\n            (pos1 === pos2 - 1 || pos1 === pos2 + 1 ||\r\n                pos1 === pos2 - 5 || pos1 === pos2 + 5);\r\n        if (pos1 === pos2 - 1 || pos1 === pos2 + 1) {\r\n            //check2 is to prevent moving across the entire board, e.g. between 4-5, 9-10, etc.\r\n            var check2 = (Math.floor(pos1 / 5) === Math.floor(pos2 / 5));\r\n            return check2;\r\n        }\r\n        else {\r\n            return check1;\r\n        }\r\n    }\r\n    isSameTile(id) {\r\n        var currentPlayerID;\r\n        this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n        if (this.state.duneBlasting) {\r\n            currentPlayerID = this.state.duneBlastingPlayerID\r\n        }\r\n\r\n        return (id === this.props.G.players[currentPlayerID].position);\r\n    }\r\n    isSameTile2(playerID1, playerID2) {\r\n        return (this.props.G.players[playerID1].position === this.props.G.players[playerID2].position);\r\n    }\r\n    isDiagonalTile(id) {\r\n        var currentPlayerID;\r\n        this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n        if (this.state.duneBlasting) {\r\n            currentPlayerID = this.state.duneBlastingPlayerID\r\n        }\r\n\r\n        const currentPlayerPos = this.props.G.players[currentPlayerID].position;\r\n        var check1 = id >= 0 && id <= 24 &&\r\n            (id === currentPlayerPos - 6 || id === currentPlayerPos - 4 ||\r\n                id === currentPlayerPos + 4 || id === currentPlayerPos + 6);\r\n        //check2 is to make sure id is exactly one row away from the current tile\r\n        var check2 = Math.abs(Math.floor(id / 5) - Math.floor(currentPlayerPos / 5)) === 1;\r\n        return check1 && check2;\r\n    }\r\n    isDiagonalTile2(playerID1, playerID2) {\r\n        var pos1 = this.props.G.players[playerID1].position;\r\n        var pos2 = this.props.G.players[playerID2].position;\r\n        var check1 =\r\n            (pos1 === playerID2 - 6 || pos1 === playerID2 - 4 ||\r\n                pos1 === playerID2 + 4 || pos1 === playerID2 + 6);\r\n        //check2 is to make sure id is exactly one row away from the current tile\r\n        var check2 = Math.abs(Math.floor(pos1 / 5) - Math.floor(playerID2 / 5)) === 1;\r\n        return check1 && check2;\r\n    }\r\n    endTurn() {\r\n        this.setState({\r\n            digging: false,\r\n            duneBlasting: false,\r\n            jetPacking: false,\r\n            terrascoping: false,\r\n        });\r\n        this.props.events.endTurn();\r\n    }\r\n\r\n    //for idToStateClass purposes, not onClickTile\r\n    tileIsMovable(id) {\r\n        var currentPlayerID;\r\n        this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n\r\n        if (this.isBuried()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return (this.isAdjacentTile(id)\r\n                || (this.props.G.players[currentPlayerID].role === \"Explorer\" && this.isDiagonalTile(id))\r\n                || (this.props.G.tiles[this.props.G.players[currentPlayerID].position].type === \"tunnel\"\r\n                    && this.props.G.tiles[this.props.G.players[currentPlayerID].position].isRevealed\r\n                    && this.props.G.tiles[id].type === \"tunnel\" && this.props.G.tiles[id].isRevealed))\r\n                && !this.isSameTile(id)\r\n                && (this.props.G.tiles[id].sandCount < 2 || this.props.G.players[currentPlayerID].role === \"Climber\")\r\n                && !this.state.digging && !this.isBuried();\r\n        }\r\n    }\r\n    //for idToStateClass purposes, not onClickTile\r\n    tileIsDiggable(id) {\r\n        if (this.isBuried()) {\r\n            return this.isSameTile(id) && (this.state.digging || this.state.duneBlasting) && this.props.G.tiles[id].sandCount > 0;\r\n            //last condition here should always be true lol\r\n        }\r\n        else {\r\n            return (this.isAdjacentTile(id) || this.isSameTile(id)\r\n                || (this.props.G.players[(this.state.duneBlasting ? this.state.duneBlastingPlayerID : this.props.ctx.currentPlayer)].role === \"Explorer\" && this.isDiagonalTile(id)))\r\n                && (this.state.digging || this.state.duneBlasting) && this.props.G.tiles[id].sandCount > 0;\r\n        }\r\n    }\r\n    //returns whether current player is buried\r\n    isBuried() {\r\n        var currentPlayerID;\r\n        this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n        if (this.state.duneBlasting) {\r\n            currentPlayerID = this.state.duneBlastingPlayerID\r\n        }\r\n\r\n        //check if current tile has a climber on it;\r\n        //iterate through all players, and check if a climber's position is current position\r\n        const currPos = this.props.G.players[currentPlayerID].position;\r\n        for (var i = 0; i < this.props.G.players.length; i++) {\r\n            if (this.props.G.players[i].role === \"Climber\" && this.props.G.players[i].position === currPos) {\r\n                return false;\r\n            }\r\n        }\r\n        return this.props.G.tiles[currPos].sandCount > 1;\r\n    }\r\n\r\n    render() {\r\n        //role selection screen\r\n        if (this.state.assignID < this.props.ctx.numPlayers) {\r\n            return (\r\n                <div className=\"center\">\r\n                    <div id=\"title\">\r\n                        Role Selection\r\n                    </div>\r\n                    <div className=\"header\">\r\n                        Choose role for Player {this.state.assignID}:\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Archeologist\"); }}>\r\n                            Archeologist\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Climber\"); }}>\r\n                            Climber\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Explorer\"); }}>\r\n                            Explorer\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Meteorologist\"); }}>\r\n                            Meteorologist\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Navigator\"); }}>\r\n                            Navigator\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Water Carrier\"); }}>\r\n                            Water Carrier\r\n                        </button>\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        <div>\r\n                            <p id=\"header\">Archeologist (🍼3)</p>\r\n                            <ul>\r\n                                <li>Removes 2 sand when digging instead of 1.</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Climber (🍼3)</p>\r\n                            <ul>\r\n                                <li>Carry: moves 1 other player along with Climber. (Cost: free)</li>\r\n                                <li>Can move over tiles with 2 or more sand.</li>\r\n                                <li>Allows all players on Climber's current tile to leave even with 2 or more sand.</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Explorer (🍼4)</p>\r\n                            <ul>\r\n                                <li>Can move, dig, and use items diagonally.</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Meteorologist (🍼4)</p>\r\n                            <ul>\r\n                                <li>Mitigate: draw 1 less Storm at the end of the turn. (Cost: 1 action)</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Navigator (🍼4)</p>\r\n                            <ul>\r\n                                <li>Navigate: move another player up to 3 tiles. Climber and Explorer keep their abilities. (Cost: 1 action)</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Water Carrier (🍼5)</p>\r\n                            <ul>\r\n                                <li>Collect Water: take 2 water from an excavated well. (Cost: 1 action)</li>\r\n                                <li>Can give water to adjacent players (for free).</li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        //difficulty selection screen\r\n        if (this.state.assignDifficulty === false) {\r\n            return (\r\n                <div className=\"center\">\r\n                    <div id=\"title\">\r\n                        Difficulty Selection\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        <button onClick={() => { this.assignDifficultyTo(0); }}>\r\n                            Novice\r\n                        </button>\r\n                        <button onClick={() => { this.assignDifficultyTo(1); }}>\r\n                            Normal\r\n                        </button>\r\n                        <button onClick={() => { this.assignDifficultyTo(2); }}>\r\n                            Elite\r\n                        </button>\r\n                        <button onClick={() => { this.assignDifficultyTo(3); }}>\r\n                            Legendary\r\n                        </button>\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        (Difficulty sets the starting storm level.)\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        var currentPlayerID;\r\n        this.props.G.isNavigating ? currentPlayerID = this.props.G.navigatingID : currentPlayerID = this.props.ctx.currentPlayer;\r\n\r\n        //adds class to render borders on appropriate tiles when this.state.digging\r\n        //or when moving (!this.state.digging)\r\n        let idToStateClass =\r\n            new Array(25).fill(\" \")\r\n                .map((currentClass, tileID, _) => {\r\n                    if ((this.state.digging || this.state.duneBlasting)\r\n                        && this.tileIsDiggable(tileID) && (this.state.duneBlasting || this.props.G.numMoves < 4) && !this.props.ctx.gameover) {\r\n                        return `${currentClass} diggable` // Add the `diggable` class to this\r\n                    } else {\r\n                        return `${currentClass}`; // Do not add any more classes\r\n                    }\r\n                }) // You can chain additional `map` function calls if you need to add more classes to a tile based on the current state of your program\r\n                .map((currentClass, tileID, _) => {\r\n                    if (!(this.state.digging || this.state.duneBlasting || this.state.jetPacking || this.state.terrascoping)\r\n                        && this.tileIsMovable(tileID)\r\n                        && ((!this.props.G.isNavigating && this.props.G.numMoves < 4) || (this.props.G.isNavigating && this.props.G.navigatingNumMoves < 3))\r\n                        && !this.props.ctx.gameover) {\r\n                        return `${currentClass} movable`\r\n                    } else {\r\n                        return `${currentClass}`;\r\n                    }\r\n                })\r\n                .map((currentClass, tileID, _) => {\r\n                    if (this.state.jetPacking && this.props.G.tiles[tileID].sandCount < 2\r\n                        && !this.props.ctx.gameover) {\r\n                        return `${currentClass} item-select`\r\n                    } else {\r\n                        return `${currentClass}`;\r\n                    }\r\n                })\r\n                .map((currentClass, tileID, _) => {\r\n                    if (this.state.terrascoping && !this.props.G.tiles[tileID].isRevealed\r\n                        && !this.props.G.tiles[tileID].peek && !this.props.ctx.gameover) {\r\n                        return `${currentClass} item-select`\r\n                    } else {\r\n                        return `${currentClass}`;\r\n                    }\r\n                })\r\n                .map((currentClass, tileID, _) => {\r\n                    //find all players on current tile, and whether they are solarShielding\r\n                    for (var i = 0; i < this.props.G.players.length; i++) {\r\n                        if (this.props.G.players[i].position === tileID && this.props.G.players[i].solarShielding) {\r\n                            return `${currentClass} shielded`\r\n                        }\r\n                    }\r\n                    return `${currentClass}`;\r\n                })\r\n\r\n        var tiles = [];\r\n        for (var i = 0; i < 5; i++) {\r\n            var row = [];\r\n            for (var j = 0; j < 5; j++) {\r\n                var tile = [];\r\n                const id = 5 * i + j;\r\n                if (this.props.G.tiles[id].type === \"storm\") {\r\n                    //render finalParts if it has at least one\r\n                    if (this.props.G.tiles[id].finalParts.length > 0) {\r\n                        tile.push(<div className=\"final-part\">Parts: {this.props.G.tiles[id].finalParts}</div>)\r\n                    }\r\n                    row.push(<td className=\"storm\">{tile}</td>);\r\n                }\r\n                else {\r\n                    var playersOnThisTile = [];\r\n                    //render players on current tile\r\n                    for (var k = 0; k < this.props.G.players.length; k++) {\r\n                        if (this.props.G.players[k].position === id) {\r\n                            playersOnThisTile.push(k);\r\n                        }\r\n                    }\r\n                    tile.push(<div className=\"player\">{playersOnThisTile}</div>);\r\n                    //render sandCount\r\n                    if (this.props.G.tiles[id].sandCount !== 0) {\r\n                        var sandIndicator = \"\";\r\n                        for (var l = 0; l < this.props.G.tiles[id].sandCount; l++) {\r\n                            sandIndicator = sandIndicator.concat(\"l\");\r\n                        }\r\n                        tile.push(<div className={this.props.G.tiles[id].sandCount > 1 ? \"sand red\" : \"sand\"}>\r\n                            {sandIndicator}</div>);\r\n                    }\r\n                    //render finalParts if it has at least one\r\n                    if (this.props.G.tiles[id].finalParts.length > 0) {\r\n                        tile.push(<div className=\"final-part\">Parts: {this.props.G.tiles[id].finalParts}</div>)\r\n                    }\r\n\r\n                    //render unrevealed backgrounds (set by className CSS)\r\n                    if (this.props.G.tiles[id].isRevealed === false) {\r\n                        var classN = (this.props.G.tiles[id].type === \"well\" || this.props.G.tiles[id].type === \"mirage\" ?\r\n                            \"unrevealed-water\" : \"unrevealed\");\r\n                        if (this.props.G.tiles[id].peek === true) {\r\n                            classN = classN + \"-peeked\";\r\n                        }\r\n                        classN = classN + idToStateClass[id];\r\n                        row.push(<td key={id} className={classN} onClick={() => this.onClickTile(id)}>{tile}</td>);\r\n                    }\r\n                    //render clue tile (assign the right className)\r\n                    else if (this.props.G.tiles[id].type === \"clue\") {\r\n                        const className = this.props.G.tiles[id].part + this.props.G.tiles[id].pos + idToStateClass[id];\r\n                        row.push(<td key={id} className={className + idToStateClass[id]}\r\n                            onClick={() => this.onClickTile(id)}>{tile}</td>);\r\n                    }\r\n                    else {\r\n                        row.push(<td key={id} className={this.props.G.tiles[id].type + idToStateClass[id]}\r\n                            onClick={() => this.onClickTile(id)}>{tile}</td>);\r\n                    }\r\n                }\r\n            }\r\n            tiles.push(<tr key={i}>{row}</tr>);\r\n        }\r\n\r\n        var header = [];\r\n        if (this.props.ctx.gameover) {\r\n            if (this.props.ctx.gameover.win) {\r\n                header.push(\r\n                    <div>\r\n                        VICTORY (Difficulty: {this.props.G.difficultyName})\r\n                    </div>\r\n                )\r\n            }\r\n            else {\r\n                header.push(\r\n                    <div>\r\n                        DEFEAT (Difficulty: {this.props.G.difficultyName})\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n        if (this.props.G.isNavigating) {\r\n            header.push(\r\n                <div>\r\n                    <div>\r\n                        Player {this.props.ctx.currentPlayer} navigating Player {this.props.G.navigatingID}\r\n                    </div>\r\n                    <div>\r\n                        Actions left in navigation: {3 - this.props.G.navigatingNumMoves}, Actions left in turn: {4 - this.props.G.numMoves}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            header.push(\r\n                <div>\r\n                    <div>\r\n                        Player {this.props.ctx.currentPlayer}'s turn\r\n                    </div>\r\n                    <div>\r\n                        Actions left in turn: {4 - this.props.G.numMoves}\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        var actionButtons = [];\r\n        if (this.isBuried()) {\r\n            actionButtons.push(\r\n                <div>\r\n                    You are buried!\r\n                </div>\r\n            )\r\n        }\r\n        if (!this.props.G.isNavigating) {\r\n            actionButtons.push(\r\n                <div>\r\n                    <button accessKey=\"d\" onClick={() => {\r\n                        this.setState({\r\n                            digging: !this.state.digging,\r\n                            duneBlasting: false,\r\n                            jetPacking: false,\r\n                            terrascoping: false\r\n                        });\r\n                    }}>\r\n                        Dig (1)\r\n                    </button>\r\n                    <button accessKey=\"x\" onClick={() => { this.excavate(); }}>\r\n                        Excavate (1)\r\n                    </button>\r\n                    <div>\r\n                        {this.state.digging ? \"Choose a tile to dig.\" : \"\"}\r\n                    </div>\r\n                </div>\r\n            );\r\n            actionButtons.push(\r\n                <div>\r\n                    {this.state.excavateErrorMsg}\r\n                </div>\r\n            )\r\n            //Mitigate for meteorologist only\r\n            if (this.props.G.players[this.props.ctx.currentPlayer].role === \"Meteorologist\") {\r\n                actionButtons.push(\r\n                    <button onClick={() => { this.mitigate(); }}>\r\n                        Mitigate (1)\r\n                    </button>\r\n                )\r\n            }\r\n            actionButtons.push(\r\n                <div>\r\n                    {this.state.mitigateErrorMsg}\r\n                </div>\r\n            )\r\n            //collectWater for water carrier only\r\n            if (this.props.G.players[this.props.ctx.currentPlayer].role === \"Water Carrier\"\r\n                && this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].type === \"well\"\r\n                && this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].isRevealed\r\n                && this.props.G.players[this.props.ctx.currentPlayer].water < this.props.G.players[this.props.ctx.currentPlayer].maxWater) {\r\n                actionButtons.push(\r\n                    <button onClick={() => { this.collectWater(); }}>\r\n                        Collect +2 water (1)\r\n                    </button>\r\n                )\r\n            }\r\n        }\r\n\r\n        //carry for climber only, or jetPacking\r\n        if (this.props.G.players[currentPlayerID].role === \"Climber\"\r\n            || this.state.jetPacking) {\r\n            var carryingPlayerID = currentPlayerID;\r\n            if (this.state.jetPacking) {\r\n                carryingPlayerID = this.state.jetPackingPlayerID;\r\n            }\r\n            actionButtons.push(\r\n                <div>\r\n                    <button onClick={() => { this.setState({ chooseCarry: !this.state.chooseCarry }) }}>\r\n                        Carry (0):\r\n                    </button>\r\n                    <button onClick={() => { this.drop(carryingPlayerID); }}>\r\n                        Drop (0)\r\n                    </button>\r\n                </div>\r\n            )\r\n            //spawn choose player buttons\r\n            if (this.state.chooseCarry) {\r\n                //find if there are any players on current tile\r\n                var playersFound = false;\r\n                for (var i = 0; i < this.props.G.players.length; i++) {\r\n                    const index = i;\r\n                    if (index != carryingPlayerID &&\r\n                        this.isSameTile2(index, carryingPlayerID)) {\r\n                        actionButtons.push(\r\n                            <button onClick={() => { this.carry(index, carryingPlayerID); }}>\r\n                                Player {index}\r\n                            </button>\r\n                        );\r\n                        playersFound = true;\r\n                    }\r\n                }\r\n                //spawned no buttons?\r\n                if (!playersFound) {\r\n                    this.setState({ chooseCarry: false, carryErrorMsg: \"Nobody to carry! (They must be on the same tile.)\" });\r\n                    setTimeout(() => this.setState({ carryErrorMsg: '' }), 3000);\r\n                }\r\n            }\r\n        }\r\n        actionButtons.push(\r\n            <div>\r\n                {this.state.carryErrorMsg}\r\n            </div>\r\n        )\r\n        actionButtons.push(\r\n            <div>\r\n                {this.state.dropErrorMsg}\r\n            </div>\r\n        )\r\n\r\n        //only show pickup part button when the tile of the current player position\r\n        //has at least 1 finalPart, and the tile is revealed\r\n        if (!this.props.G.isNavigating) {\r\n            if (this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].isRevealed &&\r\n                this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].finalParts.length > 0 &&\r\n                this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].sandCount < 2) {\r\n                actionButtons.push(\r\n                    <button onClick={() => { this.pickUpFinalPart(); }}>\r\n                        Pick up part (1)\r\n                    </button>\r\n                )\r\n            }\r\n        }\r\n\r\n        //navigator only\r\n        if (!this.props.G.isNavigating) {\r\n            if (this.props.G.players[this.props.ctx.currentPlayer].role === \"Navigator\") {\r\n                actionButtons.push(\r\n                    <button onClick={() => { this.setState({ chooseNavigate: !this.state.chooseNavigate }) }}>\r\n                        Navigate (1):\r\n                    </button>\r\n                );\r\n            }\r\n            //spawn choose player buttons\r\n            if (this.state.chooseNavigate) {\r\n                for (var i = 0; i < this.props.G.players.length; i++) {\r\n                    const index = i;\r\n                    if (index != this.props.ctx.currentPlayer) {\r\n                        actionButtons.push(\r\n                            <button onClick={() => { this.navigate(index); }}>\r\n                                Player {index}\r\n                            </button>\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.props.G.isNavigating) {\r\n            actionButtons.push(\r\n                <div>\r\n                    <button accessKey=\"z\" onClick={() => { this.props.undo(); }}>\r\n                        Undo\r\n                    </button>\r\n                    <button accessKey=\"e\" onClick={() => { this.props.moves.stopNavigating() }}>\r\n                        End navigation\r\n                    </button>\r\n                </div>\r\n            )\r\n        }\r\n        else {\r\n            actionButtons.push(\r\n                <div>\r\n                    <button accessKey=\"z\" onClick={() => { this.props.undo(); }}>\r\n                        Undo\r\n                    </button>\r\n                    <button accessKey=\"e\" onClick={() => { this.endTurn(); }}>\r\n                        End turn\r\n                    </button>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        var rightbar = [];\r\n        //player info\r\n        rightbar.push(\r\n            <div>\r\n                {this.state.waterErrorMsg}\r\n            </div>\r\n        );\r\n        rightbar.push(<div>Players:</div>)\r\n        var playerInfoList = [];\r\n        for (var i = 0; i < this.props.ctx.numPlayers; i++) {\r\n            //setup water buttons\r\n            var giveWaterButtons = [];\r\n            for (var j = 0; j < this.props.ctx.numPlayers; j++) {\r\n                const giver = i;\r\n                const index = j;\r\n                if (index !== giver\r\n                    && (this.isSameTile2(giver, index)\r\n                        || (this.props.G.players[giver].role === \"Water Carrier\" &&\r\n                            this.isAdjacentTile2(giver, index)))) {\r\n                    giveWaterButtons.push(\r\n                        <button className=\"small-button\" onClick={() => { this.giveWaterTo(giver, index); }}>\r\n                            {index}\r\n                        </button>\r\n                    );\r\n                }\r\n            }\r\n            //listing + water buttons\r\n            if (this.props.G.players[i].carryingPlayer !== -1) {\r\n                playerInfoList.push(\r\n                    <div>\r\n                        {i} - {this.props.G.players[i].role} 🍼 {this.props.G.players[i].water} / {this.props.G.players[i].maxWater}&nbsp;\r\n                        - Carrying Player {this.props.G.players[i].carryingPlayer}&nbsp;\r\n                        - Give water to: {giveWaterButtons}\r\n                    </div>\r\n                );\r\n            }\r\n            else {\r\n                playerInfoList.push(\r\n                    <div>\r\n                        {i} - {this.props.G.players[i].role} 🍼 {this.props.G.players[i].water} / {this.props.G.players[i].maxWater}&nbsp;\r\n                        - Give water to: {giveWaterButtons}\r\n                    </div>\r\n                );\r\n            }\r\n            //equipment\r\n            for (var k = 0; k < this.props.G.players[i].equipment.length; k++) {\r\n                const player = i;\r\n                const index = k;\r\n                //setup give buttons\r\n                var giveEquipmentButtons = [];\r\n                //oh god too many loop variables too many inconsistent names im so bad :(\r\n                for (var l = 0; l < this.props.ctx.numPlayers; l++) {\r\n                    const targetPlayerID = l;\r\n                    if (targetPlayerID !== player && (this.isSameTile2(player, targetPlayerID))) {\r\n                        giveEquipmentButtons.push(\r\n                            <button className=\"small-button\" onClick={() => { this.giveEquipmentTo(player, index, targetPlayerID); }}>\r\n                                {targetPlayerID}\r\n                            </button>\r\n                        );\r\n                    }\r\n                }\r\n                //don't show use button if it's a time throttle and it's not your turn\r\n                if (this.props.G.players[player].equipment[index] === \"Time Throttle\" && player != this.props.ctx.currentPlayer) {\r\n                    playerInfoList.push(\r\n                        <div>\r\n                            {this.props.G.players[player].equipment[index]} - Give to: {giveEquipmentButtons}\r\n                        </div>\r\n                    );\r\n                }\r\n                else {\r\n                    playerInfoList.push(\r\n                        <div>\r\n                            {this.props.G.players[player].equipment[index]} -&nbsp;\r\n                            <button className=\"small-button\" onClick={() => {\r\n                                this.useEquipment(player, index, this.props.G.players[player].equipment[index]);\r\n                            }}>\r\n                                Use\r\n                            </button> - Give to: {giveEquipmentButtons}\r\n                        </div>\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        rightbar.push(playerInfoList);\r\n\r\n        if (this.state.duneBlasting) {\r\n            rightbar.push(\r\n                <div className=\"red\">\r\n                    <p></p>\r\n                    ==Choose a tile to use Dune Blast.==\r\n                </div>\r\n            )\r\n        }\r\n        if (this.state.jetPacking) {\r\n            rightbar.push(\r\n                <div className=\"red\">\r\n                    <p></p>\r\n                    ==Choose a tile to use Jetpack to.==\r\n                </div>\r\n            )\r\n        }\r\n        if (this.state.terrascoping) {\r\n            rightbar.push(\r\n                <div className=\"red\">\r\n                    <p></p>\r\n                    ==Choose a tile to peak.==\r\n                </div>\r\n            )\r\n        }\r\n\r\n        //show tiles that are peeked, if any\r\n        var peekedTiles = []\r\n        for (var i = 0; i < this.props.G.tiles.length; i++) {\r\n            if (this.props.G.tiles[i].peek === true) {\r\n                if (this.props.G.tiles[i].type !== \"clue\") {\r\n                    peekedTiles.push(this.props.G.tiles[i].type);\r\n                }\r\n                else {\r\n                    var partLetter = this.props.G.tiles[i].part;\r\n                    var color;\r\n                    if (partLetter === \"A\") color = \"red\";\r\n                    if (partLetter === \"B\") color = \"green\";\r\n                    if (partLetter === \"C\") color = \"blue\";\r\n                    if (partLetter === \"D\") color = \"purple\";\r\n                    var pos;\r\n                    if (this.props.G.tiles[i].pos === \"h\") pos = \"horizontal\";\r\n                    if (this.props.G.tiles[i].pos === \"v\") pos = \"vertical\";\r\n                    peekedTiles.push(\"clue - \" + partLetter + \" (\" + color + \") - \" + pos);\r\n                }\r\n            }\r\n        }\r\n        if (peekedTiles.length > 0) {\r\n            rightbar.push(\r\n                <div>\r\n                    <p></p>\r\n                    Peeked tiles:\r\n                    <div>\r\n                        {peekedTiles.join(\", \")}\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n\r\n        rightbar.push(\r\n            <div>\r\n                <p></p>\r\n                <div>Current storm level: {this.props.G.stormLevel}</div>\r\n                <p></p>\r\n            </div>\r\n        );\r\n\r\n        //storm deck last turn\r\n        rightbar.push(\r\n            <div>\r\n                <p></p>\r\n                End of last turn:\r\n            </div>\r\n        );\r\n        for (var i = 0; i < this.props.G.lastDrawType.length; i++) {\r\n            rightbar.push(\r\n                <div>\r\n                    {this.props.G.lastDrawType[i]}\r\n                </div>\r\n            );\r\n        }\r\n        //probabilities\r\n        rightbar.push(\r\n            <div>\r\n                <p></p>\r\n                <div>\r\n                    Chance of 1+ Sun Beats Down at end of turn:&nbsp;\r\n                    {((1 - (1 - this.props.G.sunBeatsDownProb / 100) ** (this.props.G.numDraws)) * 100).toFixed(2)}%\r\n                </div>\r\n                <div>\r\n                    Chance of 1+ Storm Picks Up at end of turn:&nbsp;\r\n                    {((1 - (1 - this.props.G.stormPicksUpProb / 100) ** (this.props.G.numDraws)) * 100).toFixed(2)}%\r\n                </div>\r\n            </div>\r\n        );\r\n        //currently collected parts\r\n        var partList = [];\r\n        for (var i = 0; i < this.props.G.collectedParts.length; i++) {\r\n            var color;\r\n            if (this.props.G.collectedParts[i] === \"A\") {\r\n                color = \"red\";\r\n            }\r\n            else if (this.props.G.collectedParts[i] === \"B\") {\r\n                color = \"green\";\r\n            }\r\n            else if (this.props.G.collectedParts[i] === \"C\") {\r\n                color = \"blue\";\r\n            }\r\n            else if (this.props.G.collectedParts[i] === \"D\") {\r\n                color = \"purple\";\r\n            }\r\n            partList.push(\r\n                <div className={color}>\r\n                    {this.props.G.collectedParts[i]}\r\n                </div>\r\n            );\r\n        }\r\n        if (this.props.G.collectedParts.length === 0) {\r\n            rightbar.push(\r\n                <div>\r\n                    <p></p>\r\n                    Collected parts (4 total): none\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            rightbar.push(\r\n                <div>\r\n                    <p></p>\r\n                    Collected parts (4 total): {partList}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        var draw3, draw4, draw5, draw6, death;\r\n        if (this.props.ctx.numPlayers === 2) {\r\n            draw3 = \"1 - 3\";\r\n            draw4 = \"4 - 7\";\r\n            draw5 = \"8 - 10\";\r\n            draw6 = \"11 - 12\";\r\n            death = \"13\";\r\n        }\r\n        else if (this.props.ctx.numPlayers === 3 || this.props.ctx.numPlayers === 4) {\r\n            draw3 = \"1 - 4\";\r\n            draw4 = \"5 - 8\";\r\n            draw5 = \"9 - 11\";\r\n            draw6 = \"12 - 13\";\r\n            death = \"14\";\r\n        }\r\n        else if (this.props.ctx.numPlayers === 5) {\r\n            draw3 = \"1 - 5\";\r\n            draw4 = \"6 - 9\";\r\n            draw5 = \"10 - 12\";\r\n            draw6 = \"13 - 14\";\r\n            death = \"15\";\r\n        }\r\n\r\n        var infobar = []\r\n        infobar.push(\r\n            <div className=\"infobar\">\r\n                <p></p>\r\n                <div>\r\n                    Draw 2 at storm level 0\r\n                </div>\r\n                <div>\r\n                    Draw 3 at levels {draw3}\r\n                </div>\r\n                <div>\r\n                    Draw 4 at levels {draw4}\r\n                </div>\r\n                <div>\r\n                    Draw 5 at levels {draw5}\r\n                </div>\r\n                <div>\r\n                    Draw 6 at levels {draw6}\r\n                </div>\r\n                <div>\r\n                    Game over at level {death}\r\n                </div>\r\n                <p></p>\r\n                <div>\r\n                    Archeologist - removes 2 sand when digging\r\n                </div>\r\n                <div>\r\n                    Climber - can move over any tile; allows everyone on current tile to move.\r\n                </div>\r\n                <div>\r\n                    &emsp;Carry (0): bring another player\r\n                </div>\r\n                <div>\r\n                    Explorer - can move, dig, and use Dune Blaster diagonally\r\n                </div>\r\n                <div>\r\n                    Meteorologist - Mitigate (1): draw 1 less storm card at end of turn\r\n                </div>\r\n                <div>\r\n                    Navigator - Navigate (1): move any other player up to 3 tiles;\r\n                </div>\r\n                <div>\r\n                    &emsp;Climber and Explorer keep their abilities\r\n                </div>\r\n                <div>\r\n                    Water Carrier - can give water to adjacent players.\r\n                </div>\r\n                <div>\r\n                    &emsp;Collect Water (1): collect 2 water from a well\r\n                </div>\r\n                <p></p>\r\n                <div>\r\n                    Dune Blaster: dig all sand from a tile you can dig\r\n                </div>\r\n                <div>\r\n                    Jet Pack: move to any unblocked tile (Climber is not exempt);\r\n                </div>\r\n                <div>\r\n                    &emsp;can carry one player on ride\r\n                </div>\r\n                <div>\r\n                    Secret Water Reserve: give 2 water to all players on current tile\r\n                </div>\r\n                <div>\r\n                    Solar Shield: prevent Sun Beats Down to all players on the user's tile;\r\n                </div>\r\n                <div>\r\n                    &emsp;expires at the start of the user's next turn\r\n                </div>\r\n                <div>\r\n                    Terrascope: peek under an unexcavated tile\r\n                </div>\r\n                <div>\r\n                    Time Throttle (owner's turn only): gain 2 extra actions this turn\r\n                </div>\r\n                <p></p>\r\n                <div>\r\n                    Starting equipment deck:\r\n                </div>\r\n                <div>\r\n                    3x Dune Blaster, 3x Jet Pack,\r\n                </div>\r\n                <div>\r\n                    2x Solar Shield, 2x Terrascope,\r\n                </div>\r\n                <div>\r\n                    1x Secret Water Reserve, 1x Time Throttle\r\n                </div>\r\n                <p></p>\r\n                <div>Hotkeys (some may not function depending on the browser):</div>\r\n                <div>Dig: shift + alt + d</div>\r\n                <div>Excavate: shift + alt + x</div>\r\n                <div>Undo: shift + alt + z</div>\r\n                <div>End turn / navigation: shift + alt + e</div>\r\n            </div>\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"fl\">\r\n                    <div className=\"header center\">\r\n                        {header}\r\n                    </div>\r\n                    <table>\r\n                        <tbody>{tiles}</tbody>\r\n                    </table>\r\n                    <div className=\"center\">\r\n                        {actionButtons}\r\n                    </div>\r\n                </div>\r\n                <div className=\"fl\">\r\n                    {rightbar}\r\n                </div>\r\n                <div className=\"fl\">\r\n                    {infobar}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Client } from 'boardgame.io/react';\r\nimport { ForbiddenDesert } from './Game';\r\nimport { ForbiddenDesertBoard } from './board';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  state = { numPlayers: null };\r\n\r\n  render() {\r\n    if (this.state.numPlayers === null) {\r\n      return (\r\n        <div className=\"center\">\r\n          <div id=\"title\">\r\n            FORBIDDEN DESERT\r\n          </div>\r\n          <div>\r\n            Based off the original game by Gamewright, designed by Matt Leacock.\r\n          </div>\r\n          <div>\r\n            <a href=\"https://www.gamewright.com/gamewright/pdfs/Rules/ForbiddenDesertTM-RULES.pdf\" target=\"_blank\">Official rules manual</a>\r\n          </div>\r\n          <div>\r\n            <a href=\"https://boardgamegeek.com/boardgame/136063/forbidden-desert\" target=\"_blank\">BoardGameGeek listing</a>\r\n          </div>\r\n          <div>\r\n            <a href=\"https://github.com/hwabis/forbidden-desert\" target=\"_blank\">Source code</a>\r\n          </div>\r\n          <div id=\"header\">\r\n            <p>Select number of players:</p>\r\n            <button onClick={() => this.setState({ numPlayers: 2 })}>\r\n              2\r\n            </button>\r\n            <button onClick={() => this.setState({ numPlayers: 3 })}>\r\n              3\r\n            </button>\r\n            <button onClick={() => this.setState({ numPlayers: 4 })}>\r\n              4\r\n            </button>\r\n            <button onClick={() => this.setState({ numPlayers: 5 })}>\r\n              5\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    else {\r\n      const ForbiddenDesertClient = Client({\r\n        game: ForbiddenDesert,\r\n        numPlayers: this.state.numPlayers,\r\n        board: ForbiddenDesertBoard,\r\n      });\r\n      return (\r\n        <div>\r\n          <ForbiddenDesertClient />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}