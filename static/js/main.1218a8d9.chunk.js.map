{"version":3,"sources":["Game.js","board.js","App.js","index.js"],"names":["ForbiddenDesert","setup","ctx","players","setupPlayers","numPlayers","tiles","setupTiles","stormLevel","lastDrawType","moves","move","G","pos","currentPlayer","position","dig","sandCount","excavate","isRevealed","undoable","giveWater","id","water","noLimit","doNothing","events","endTurn","setPlayerInfo","role","maxWater","setDifficulty","diff","removeWater","turn","moveLimit","onEnd","val","random","Die","i","length","type","push","stormPos","affectedPos","tempStormTile","affectedPlayers","endIf","getRandomInt","max","Math","floor","j","part","array","randomIndex","currentIndex","shuffle","splice","sandTiles","ForbiddenDesertBoard","state","assignID","assignDifficulty","digging","givingWater","this","props","setState","isAdjacentTile","isSameTile","isBuried","currentPlayerPos","className","onClick","assignRoleTo","assignDifficultyTo","row","tile","playersOnThisTile","k","sandIndicator","l","concat","onClickTile","actionButtons","index","giveWaterTo","undo","rightbar","draw3","draw4","draw5","draw6","death","playerInfoList","numMoves","React","Component","App","href","ForbiddenDesertClient","Client","game","board","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1218a8d9.chunk.js","sourcesContent":["export const ForbiddenDesert = {\r\n    //tile: \"isRevealed\", \"sandCount\"\r\n    //tile types: \"well\", \"mirage\", \"gear\", \"tunnel\", \"clue\", \"launchpad\", \"storm\"\r\n    //tile: \"part\" and \"pos\" only for type \"clue\"\r\n    //parts are \"0\", \"1\", \"2\", \"3\"; pos are \"0\" (vertical) and \"1\" (horizontal)\r\n    setup: (ctx) => ({\r\n        players: setupPlayers(ctx.numPlayers),\r\n        tiles: setupTiles(),\r\n        stormLevel: 0,\r\n        lastDrawType: [],\r\n    }),\r\n\r\n    moves: {\r\n        move: (G, ctx, pos) => {\r\n            G.players[ctx.currentPlayer].position = pos;\r\n        },\r\n        dig: (G, ctx, pos) => {\r\n            G.tiles[pos].sandCount--;\r\n        },\r\n        excavate: {\r\n            move: (G, ctx) => {\r\n                G.tiles[G.players[ctx.currentPlayer].position].isRevealed = true;\r\n            },\r\n            undoable: false\r\n        },\r\n        giveWater: {\r\n            move: (G, ctx, id) => {\r\n                G.players[ctx.currentPlayer].water -= 1;\r\n                G.players[id].water += 1;\r\n            },\r\n            noLimit: true\r\n        },\r\n        doNothing: (G, ctx) => {\r\n            ctx.events.endTurn();\r\n        },\r\n        setPlayerInfo: {\r\n            move: (G, ctx, id, role) => {\r\n                G.players[id].role = role;\r\n                if (role === \"Archeologist\" || role === \"Climber\") {\r\n                    G.players[id].maxWater = 3;\r\n                    G.players[id].water = 3;\r\n                }\r\n                else if (role === \"Explorer\" || role === \"Meteorologist\" || role === \"Navigator\") {\r\n                    G.players[id].maxWater = 4;\r\n                    G.players[id].water = 4;\r\n                }\r\n                else {\r\n                    G.players[id].maxWater = 5;\r\n                    G.players[id].water = 5;\r\n                }\r\n            },\r\n            undoable: false,\r\n            noLimit: true\r\n        },\r\n        setDifficulty: {\r\n            move: (G, ctx, diff) => {\r\n                G.stormLevel = diff;\r\n            },\r\n            undoable: false,\r\n            noLimit: true\r\n        },\r\n        //DEBUG ONLY\r\n        removeWater: {\r\n            move: (G, ctx, id) => {\r\n                G.players[id].water -= 1;\r\n            },\r\n            noLimit: true\r\n        },\r\n    },\r\n\r\n    turn: {\r\n        moveLimit: 4,\r\n        onEnd: (G, ctx) => {\r\n            G.lastDrawType = [];\r\n            //eventually check storm level + ctx.numPlayers, and draw according to that\r\n\r\n            //val: 1-4=sunBeatsDown, 5-7=stormPicksUp, 8-31 wind\r\n            const val = ctx.random.Die(31);\r\n            if (val <= 4) {\r\n                for (var i = 0; i < G.players.length; i++) {\r\n                    if (!(G.tiles[G.players[i].position].type === \"tunnel\" && G.tiles[G.players[i].position].isRevealed)) {\r\n                        G.players[i].water -= 1;\r\n                    }\r\n                }\r\n                G.lastDrawType.push(\"Sun Beats Down\");\r\n            }\r\n            else if (val <= 7) {\r\n                G.stormLevel += 1;\r\n                G.lastDrawType.push(\"Storm Picks Up\")\r\n            }\r\n            else {\r\n                //TODO: finish this ... \r\n                var stormPos = 0;\r\n                for (stormPos; stormPos < G.tiles.length; stormPos++) {\r\n                    if (G.tiles[stormPos].type === \"storm\") {\r\n                        break;\r\n                    }\r\n                }\r\n                //change this to array later..\r\n                var affectedPos = stormPos + 1;\r\n                var tempStormTile = G.tiles[stormPos];\r\n                G.tiles[stormPos] = G.tiles[affectedPos];\r\n                G.tiles[affectedPos] = tempStormTile;\r\n\r\n                //move all affected players\r\n                var affectedPlayers = []\r\n                for (var i = 0; i < G.players.length; i++) {\r\n                    if (G.players[i].position === affectedPos) {\r\n                        affectedPlayers.push(i);\r\n                    }\r\n                }\r\n                for (var i = 0; i < affectedPlayers.length; i++) {\r\n                    G.players[affectedPlayers[i]].position -= 1;\r\n                }\r\n                //TODO: specify wind strength + type\r\n                G.lastDrawType.push(\"Wind\");\r\n            }\r\n        }\r\n    },\r\n\r\n    endIf: (G, ctx) => {\r\n        for (var i = 0; i < G.players.length; i++) {\r\n            if (G.players[i].water === -1) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n};\r\n\r\nvar setupPlayers = (numPlayers) => {\r\n    var players = [];\r\n    var pos = getRandomInt(25);\r\n    while (pos === 12) {\r\n        pos = getRandomInt(25);\r\n    }\r\n    for (var i = 0; i < numPlayers; i++) {\r\n        players.push({\r\n            role: \"\",\r\n            position: pos,\r\n            water: 0,\r\n            maxWater: 0,\r\n        });\r\n    }\r\n    return players;\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\nvar setupTiles = () => {\r\n    var tiles = [];\r\n    for (var i = 0; i < 2; i++) {\r\n        tiles.push({\r\n            isRevealed: false,\r\n            sandCount: 0,\r\n            type: \"well\",\r\n        });\r\n    }\r\n    tiles.push({\r\n        isRevealed: false,\r\n        sandCount: 0,\r\n        type: \"mirage\",\r\n    });\r\n    for (var i = 0; i < 9; i++) {\r\n        tiles.push({\r\n            isRevealed: false,\r\n            sandCount: 0,\r\n            type: \"gear\",\r\n        });\r\n    }\r\n    for (var i = 0; i < 3; i++) {\r\n        tiles.push({\r\n            isRevealed: false,\r\n            sandCount: 0,\r\n            type: \"tunnel\",\r\n        })\r\n    }\r\n    for (var i = 0; i < 4; i++) {\r\n        for (var j = 0; j < 2; j++) {\r\n            //parts: 0, 1, 2, 3\r\n            //pos: 0 --> vertical, 1 --> horizontal\r\n            tiles.push({\r\n                isRevealed: false,\r\n                sandCount: 0,\r\n                type: \"clue\",\r\n                part: i,\r\n                pos: j,\r\n            });\r\n        }\r\n    }\r\n    tiles.push({\r\n        isRevealed: false,\r\n        sandCount: 0,\r\n        type: \"launchpad\",\r\n    })\r\n    shuffle(tiles);\r\n    tiles.splice(12, 0, {\r\n        isRevealed: false,\r\n        sandCount: 0,\r\n        type: \"storm\",\r\n    });\r\n\r\n    //setup sand\r\n    const sandTiles = [2, 6, 8, 10, 14, 16, 18, 22];\r\n    for (var i = 0; i < sandTiles.length; i++) {\r\n        tiles[sandTiles[i]].sandCount = 1;\r\n    }\r\n    return tiles;\r\n}\r\n\r\n//https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array lol sorry :(\r\nfunction shuffle(array) {\r\n    var currentIndex = array.length, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex--;\r\n\r\n        // And swap it with the current element.\r\n        [array[currentIndex], array[randomIndex]] = [\r\n            array[randomIndex], array[currentIndex]];\r\n    }\r\n\r\n    return array;\r\n}","import React from 'react';\r\nimport './board.css';\r\n\r\nexport class ForbiddenDesertBoard extends React.Component {\r\n    state = {\r\n        assignID: 0,\r\n        assignDifficulty: false,\r\n        digging: false,\r\n        givingWater: false,\r\n    }\r\n\r\n    assignRoleTo(id, role) {\r\n        this.props.moves.setPlayerInfo(id, role);\r\n        this.setState({ assignID: this.state.assignID + 1 });\r\n    }\r\n    assignDifficultyTo(diff) {\r\n        this.props.moves.setDifficulty(diff);\r\n        this.setState({ assignDifficulty: true })\r\n    }\r\n    onClickTile(id) {\r\n        if (this.isAdjacentTile(id) || this.isSameTile(id)) {\r\n            if (this.state.digging && this.props.G.tiles[id].sandCount > 0) {\r\n                this.props.moves.dig(id);\r\n                this.setState({ digging: false });\r\n            }\r\n            else if (!this.isSameTile(id) &&\r\n                this.props.G.tiles[id].sandCount < 2 &&\r\n                !this.state.digging &&\r\n                !this.isBuried()) {\r\n                this.props.moves.move(id);\r\n            }\r\n        }\r\n    }\r\n    excavate() {\r\n        if (this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].isRevealed === false\r\n            && this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].sandCount === 0) {\r\n            //holy cow what a long sentence lol\r\n            this.props.moves.excavate();\r\n        }\r\n    }\r\n    giveWaterTo(id) {\r\n        if (this.props.G.players[id].position === this.props.G.players[this.props.ctx.currentPlayer].position\r\n            && this.props.G.players[id].water < this.props.G.players[id].maxWater\r\n            && this.props.G.players[this.props.ctx.currentPlayer].water > 0) {\r\n            this.props.moves.giveWater(id);\r\n            this.setState({ givingWater: false });\r\n        }\r\n    }\r\n    isAdjacentTile(id) {\r\n        const currentPlayerPos = this.props.G.players[this.props.ctx.currentPlayer].position;\r\n        return (id >= 0 && id <= 24 &&\r\n            (id === currentPlayerPos - 1 || id === currentPlayerPos + 1 ||\r\n                id === currentPlayerPos - 5 || id === currentPlayerPos + 5));\r\n    }\r\n    isSameTile(id) {\r\n        return (id === this.props.G.players[this.props.ctx.currentPlayer].position);\r\n    }\r\n    //returns whether current player is buried\r\n    isBuried() {\r\n        return this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].sandCount > 1;\r\n    }\r\n\r\n    render() {\r\n        //role selection screen\r\n        if (this.state.assignID < this.props.ctx.numPlayers) {\r\n            return (\r\n                <div className=\"center\">\r\n                    <div id=\"title\">\r\n                        Role Selection\r\n                    </div>\r\n                    <div className=\"header\">\r\n                        Choose role for Player {this.state.assignID}:\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Archeologist\"); }}>\r\n                            Archeologist\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Climber\"); }}>\r\n                            Climber\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Explorer\"); }}>\r\n                            Explorer\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Meteorologist\"); }}>\r\n                            Meteorologist\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Navigator\"); }}>\r\n                            Navigator\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Water Carrier\"); }}>\r\n                            Water Carrier\r\n                        </button>\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        <div>\r\n                            <p id=\"header\">Archeologist</p>\r\n                            <ul>\r\n                                <li>Removes 2 sand when digging instead of 1.</li>\r\n                                <li>Water capacity: 3</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Climber</p>\r\n                            <ul>\r\n                                <li>Carry: moves other players along with Climber. (Cost: free)</li>\r\n                                <li>Can move over tiles with 2 or more sand.</li>\r\n                                <li>Allows all players on Climber's current tile to leave even with 2 or more sand.</li>\r\n                                <li>Water capacity: 3</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Explorer</p>\r\n                            <ul>\r\n                                <li>Can move, dig, and use items diagonally.</li>\r\n                                <li>Water capacity: 4</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Meteorologist</p>\r\n                            <ul>\r\n                                <li>Mitigate: draw 1 less Storm at the end of the turn. (Cost: 1 action)</li>\r\n                                <li>Water capacity: 4</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Navigator</p>\r\n                            <ul>\r\n                                <li>Direct: move another player up to 3 tiles. Climber and Explorer keep their abilities. (Cost: 1 action)</li>\r\n                                <li>Water capacity: 4</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Water Carrier</p>\r\n                            <ul>\r\n                                <li>Gather Water: take 2 water from an excavated well. (Cost: 1 action)</li>\r\n                                <li>Give Water: give 1 water to an adjacent player. (Cost: free)</li>\r\n                                <li>Water capacity: 5</li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        //difficulty selection screen\r\n        if (this.state.assignDifficulty === false) {\r\n            return (\r\n                <div className=\"center\">\r\n                    <div id=\"title\">\r\n                        Difficulty Selection\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        <button onClick={() => { this.assignDifficultyTo(0); }}>\r\n                            Novice\r\n                        </button>\r\n                        <button onClick={() => { this.assignDifficultyTo(1); }}>\r\n                            Normal\r\n                        </button>\r\n                        <button onClick={() => { this.assignDifficultyTo(2); }}>\r\n                            Elite\r\n                        </button>\r\n                        <button onClick={() => { this.assignDifficultyTo(3); }}>\r\n                            Legendary\r\n                        </button>\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        (Difficulty sets the starting storm level.)\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        var tiles = [];\r\n        for (var i = 0; i < 5; i++) {\r\n            var row = [];\r\n            for (var j = 0; j < 5; j++) {\r\n                var tile = [];\r\n                const id = 5 * i + j;\r\n                if (this.props.G.tiles[id].type === \"storm\") {\r\n                    row.push(<td key={id} id=\"storm\"></td>);\r\n                }\r\n                else {\r\n                    var playersOnThisTile = [];\r\n                    //render players on current tile\r\n                    for (var k = 0; k < this.props.G.players.length; k++) {\r\n                        if (this.props.G.players[k].position === id) {\r\n                            playersOnThisTile.push(k);\r\n                        }\r\n                    }\r\n                    tile.push(<div className=\"player\">{playersOnThisTile}</div>);\r\n                    //render sandCount\r\n                    if (this.props.G.tiles[id].sandCount !== 0) {\r\n                        var sandIndicator = \"\";\r\n                        for (var l = 0; l < this.props.G.tiles[id].sandCount; l++) {\r\n                            sandIndicator = sandIndicator.concat(\"l\");\r\n                        }\r\n                        tile.push(<div className={this.props.G.tiles[id].sandCount > 1 ? \"sand red\" : \"sand\"}>\r\n                            Sand: {sandIndicator}</div>);\r\n                    }\r\n                    if (this.props.G.tiles[id].isRevealed === false) {\r\n                        row.push(<td key={id} className={this.props.G.tiles[id].type === \"well\" || this.props.G.tiles[id].type === \"mirage\" ?\r\n                            \"unrevealed-water\" : \"unrevealed\"} onClick={() => this.onClickTile(id)}>{tile}</td>);\r\n                    }\r\n                    else {\r\n                        row.push(<td key={id} className={this.props.G.tiles[id].type}\r\n                            onClick={() => this.onClickTile(id)}>{tile}</td>);\r\n                    }\r\n                }\r\n            }\r\n            tiles.push(<tr key={i}>{row}</tr>);\r\n        }\r\n\r\n        var actionButtons = [];\r\n        actionButtons.push(\r\n            <div>\r\n                <button onClick={() => { this.setState({ digging: !this.state.digging }); }}>\r\n                    Dig\r\n                </button>\r\n                <div>\r\n                    {this.state.digging ? \"Choose a tile to dig.\" : \"\"}\r\n                </div>\r\n                <button onClick={() => { this.excavate(); }}>\r\n                    Excavate\r\n                </button>\r\n                <button onClick={() => { this.setState({ givingWater: !this.state.givingWater }); }}>\r\n                    Give water to...\r\n                </button>\r\n            </div>\r\n        );\r\n        //give water to popup buttons\r\n        if (this.state.givingWater) {\r\n            for (var i = 0; i < this.props.G.players.length; i++) {\r\n                //this took me hours to fix.. if you don't assign i to a constant,\r\n                //and use i for giveWaterTo parameter, then the value is going \r\n                //to be, like, different every time you call it. or something.\r\n                const index = i;\r\n                actionButtons.push(\r\n                    <div>\r\n                        <button onClick={() => { this.giveWaterTo(index); }}>\r\n                            Player {i}\r\n                        </button>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n        actionButtons.push(\r\n            <div>\r\n                <button onClick={() => { this.props.undo(); }}>\r\n                    Undo\r\n                </button>\r\n                <button onClick={() => { this.props.moves.doNothing(); }}>\r\n                    Do nothing\r\n                </button>\r\n            </div>\r\n        )\r\n\r\n        var rightbar = [];\r\n        rightbar.push(<div>Players:</div>)\r\n        var playerInfoList = [];\r\n        for (var i = 0; i < this.props.ctx.numPlayers; i++) {\r\n            playerInfoList.push(\r\n                <div>\r\n                    {i} - {this.props.G.players[i].role} 🍼 {this.props.G.players[i].water} / {this.props.G.players[i].maxWater}\r\n                </div>\r\n            );\r\n        }\r\n        rightbar.push(playerInfoList);\r\n\r\n        var draw3, draw4, draw5, draw6, death;\r\n        if (this.props.ctx.numPlayers === 2) {\r\n            draw3 = \"1 - 3\";\r\n            draw4 = \"4 - 7\";\r\n            draw5 = \"8 - 10\";\r\n            draw6 = \"11 - 12\";\r\n            death = \"13\";\r\n        }\r\n        else if (this.props.ctx.numPlayers === 3 || this.props.ctx.numPlayers === 4) {\r\n            draw3 = \"1 - 4\";\r\n            draw4 = \"5 - 8\";\r\n            draw5 = \"9 - 11\";\r\n            draw6 = \"12 - 13\";\r\n            death = \"14\";\r\n        }\r\n        else if (this.props.ctx.numPlayers === 5) {\r\n            draw3 = \"1 - 5\";\r\n            draw4 = \"6 - 9\";\r\n            draw5 = \"10 - 12\";\r\n            draw6 = \"13 - 14\";\r\n            death = \"15\";\r\n        }\r\n        rightbar.push(\r\n            <div>\r\n                <p></p>\r\n                <div>Current storm level: {this.props.G.stormLevel}</div>\r\n                <p></p>\r\n                <div>Info:</div>\r\n                <div>\r\n                    Draw 2 at level 0\r\n                </div>\r\n                <div>\r\n                    Draw 3 at levels {draw3}\r\n                </div>\r\n                <div>\r\n                    Draw 4 at levels {draw4}\r\n                </div>\r\n                <div>\r\n                    Draw 5 at levels {draw5}\r\n                </div>\r\n                <div>\r\n                    Draw 6 at levels {draw6}\r\n                </div>\r\n                <div>\r\n                    Game over at level {death}\r\n                </div>\r\n                <div>\r\n                    Probability of Sun Beats Down: 12.9%\r\n                </div>\r\n                <div>\r\n                    Probability of Storm Picks Up: 9.7%\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        rightbar.push(\r\n            <div>\r\n                <p></p>\r\n                End of last turn:\r\n            </div>\r\n        );\r\n        for (var i = 0; i < this.props.G.lastDrawType.length; i++) {\r\n            rightbar.push(\r\n                <div>\r\n                    {this.props.G.lastDrawType[i]}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"fl\">\r\n                    <div className=\"header center\">\r\n                        <div>\r\n                            Player {this.props.ctx.currentPlayer}'s turn\r\n                        </div>\r\n                        <div>\r\n                            Actions left in turn: {4 - this.props.ctx.numMoves}\r\n                        </div>\r\n                    </div>\r\n                    <table>\r\n                        <tbody>{tiles}</tbody>\r\n                    </table>\r\n                    <div className=\"center\">\r\n                        {actionButtons}\r\n                    </div>\r\n                </div>\r\n                <div className=\"fl\">\r\n                    {rightbar}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Client } from 'boardgame.io/react';\r\nimport { ForbiddenDesert } from './Game';\r\nimport { ForbiddenDesertBoard } from './board';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  state = { numPlayers: null };\r\n\r\n  render() {\r\n    if (this.state.numPlayers === null) {\r\n      return (\r\n        <div className=\"center\">\r\n          <div>\r\n            !! THIS IS A WORK IN PROGRESS !!\r\n          </div>\r\n          <div id=\"title\">\r\n            FORBIDDEN DESERT\r\n          </div>\r\n          <div>\r\n            Based off the original game designed by Matt Leacock.\r\n          </div>\r\n          <div>\r\n            <a href=\"https://www.gamewright.com/gamewright/pdfs/Rules/ForbiddenDesertTM-RULES.pdf\">Official rules manual</a>\r\n          </div>\r\n          <div>\r\n            <a href=\"https://boardgamegeek.com/boardgame/136063/forbidden-desert\">BoardGameGeek listing</a>\r\n          </div>\r\n          <div>\r\n            <a href=\"https://github.com/hwabis/forbidden-desert\">Source code</a>\r\n          </div>\r\n          <div id=\"header\">\r\n            <p>Select number of players:</p>\r\n            <button onClick={() => this.setState({ numPlayers: 2 })}>\r\n              2\r\n            </button>\r\n            <button onClick={() => this.setState({ numPlayers: 3 })}>\r\n              3\r\n            </button>\r\n            <button onClick={() => this.setState({ numPlayers: 4 })}>\r\n              4\r\n            </button>\r\n            <button onClick={() => this.setState({ numPlayers: 5 })}>\r\n              5\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    else {\r\n      const ForbiddenDesertClient = Client({\r\n        game: ForbiddenDesert,\r\n        numPlayers: this.state.numPlayers,\r\n        board: ForbiddenDesertBoard,\r\n      });\r\n      return (\r\n        <div>\r\n          <ForbiddenDesertClient />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}