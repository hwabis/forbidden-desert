{"version":3,"sources":["Game.js","board.js","App.js","index.js"],"names":["ForbiddenDesert","setup","ctx","players","setupPlayers","numPlayers","tiles","setupTiles","stormLevel","lastDrawType","collectedParts","moves","move","G","pos","currentPlayer","position","dig","sandCount","excavate","isRevealed","type","found","i","length","part","hid","vid","partName","index","finalPart","undoable","giveWater","id","water","noLimit","doNothing","events","endTurn","setPlayerInfo","role","maxWater","setDifficulty","diff","removeWater","turn","moveLimit","endIf","getRandomInt","push","max","Math","floor","random","j","array","randomIndex","currentIndex","shuffle","splice","sandTiles","ForbiddenDesertBoard","state","assignID","assignDifficulty","digging","givingWater","this","props","setState","isAdjacentTile","isSameTile","isBuried","currentPlayerPos","className","onClick","assignRoleTo","assignDifficultyTo","row","tile","playersOnThisTile","k","sandIndicator","l","concat","hasOwnProperty","onClickTile","actionButtons","giveWaterTo","undo","rightbar","draw3","draw4","draw5","draw6","death","playerInfoList","numMoves","React","Component","App","href","ForbiddenDesertClient","Client","game","board","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPAAaA,EAAkB,CAK3BC,MAAO,SAACC,GAAD,MAAU,CACbC,QAASC,EAAaF,EAAIG,YAC1BC,MAAOC,IACPC,WAAY,EACZC,aAAc,GACdC,eAAgB,KAGpBC,MAAO,CACHC,KAAM,SAACC,EAAGX,EAAKY,GACXD,EAAEV,QAAQD,EAAIa,eAAeC,SAAWF,GAE5CG,IAAK,SAACJ,EAAGX,EAAKY,GACVD,EAAEP,MAAMQ,GAAKI,aAEjBC,SAAU,CACNP,KAAM,SAACC,EAAGX,GAEN,GADAW,EAAEP,MAAMO,EAAEV,QAAQD,EAAIa,eAAeC,UAAUI,YAAa,EACA,SAAxDP,EAAEP,MAAMO,EAAEV,QAAQD,EAAIa,eAAeC,UAAUK,KAAiB,CAIhE,IADA,IAAIC,GAAQ,EACHC,EAAI,EAAGA,EAAIV,EAAEP,MAAMkB,OAAQD,IAC5BV,EAAEP,MAAMiB,GAAGH,YAAkC,SAApBP,EAAEP,MAAMiB,GAAGF,MACpCE,IAAMV,EAAEV,QAAQD,EAAIa,eAAeC,UACnCH,EAAEP,MAAMiB,GAAGE,OAASZ,EAAEP,MAAMO,EAAEV,QAAQD,EAAIa,eAAeC,UAAUS,OACnEH,GAAQ,GAGhB,GAAIA,EAAO,CACP,IAAII,EACAC,EACAC,EAAWf,EAAEP,MAAMO,EAAEV,QAAQD,EAAIa,eAAeC,UAAUS,KAC9D,IAASF,EAAI,EAAGA,EAAIV,EAAEP,MAAMkB,OAAQD,IAC5BV,EAAEP,MAAMiB,GAAGE,OAASG,GAA+B,MAAnBf,EAAEP,MAAMiB,GAAGT,MAC3CY,EAAMH,GAENV,EAAEP,MAAMiB,GAAGE,OAASG,GAA+B,MAAnBf,EAAEP,MAAMiB,GAAGT,MAC3Ca,EAAMJ,GAId,KAAQG,EAAM,IAAO,GAAKA,GAAO,GAC7BA,GAAO,EAEX,IAAMG,EAAQH,EAAOC,EAAM,EAC3Bd,EAAEP,MAAMuB,GAAOC,UAAYjB,EAAEP,MAAMO,EAAEV,QAAQD,EAAIa,eAAeC,UAAUS,QAItFM,UAAU,GAEdC,UAAW,CACPpB,KAAM,SAACC,EAAGX,EAAK+B,GACXpB,EAAEV,QAAQD,EAAIa,eAAemB,OAAS,EACtCrB,EAAEV,QAAQ8B,GAAIC,OAAS,GAE3BC,SAAS,GAEbC,UAAW,SAACvB,EAAGX,GACXA,EAAImC,OAAOC,WAEfC,cAAe,CACX3B,KAAM,SAACC,EAAGX,EAAK+B,EAAIO,GACf3B,EAAEV,QAAQ8B,GAAIO,KAAOA,EACR,iBAATA,GAAoC,YAATA,GAC3B3B,EAAEV,QAAQ8B,GAAIQ,SAAW,EACzB5B,EAAEV,QAAQ8B,GAAIC,MAAQ,GAER,aAATM,GAAgC,kBAATA,GAAqC,cAATA,GACxD3B,EAAEV,QAAQ8B,GAAIQ,SAAW,EACzB5B,EAAEV,QAAQ8B,GAAIC,MAAQ,IAGtBrB,EAAEV,QAAQ8B,GAAIQ,SAAW,EACzB5B,EAAEV,QAAQ8B,GAAIC,MAAQ,IAG9BH,UAAU,EACVI,SAAS,GAEbO,cAAe,CACX9B,KAAM,SAACC,EAAGX,EAAKyC,GACX9B,EAAEL,WAAamC,GAEnBZ,UAAU,EACVI,SAAS,GAGbS,YAAa,CACThC,KAAM,SAACC,EAAGX,EAAK+B,GACXpB,EAAEV,QAAQ8B,GAAIC,OAAS,GAE3BC,SAAS,IAIjBU,KAAM,CACFC,UAAW,GAqMfC,MAAO,SAAClC,EAAGX,GACP,IAAK,IAAIqB,EAAI,EAAGA,EAAIV,EAAEV,QAAQqB,OAAQD,IAClC,IAA4B,IAAxBV,EAAEV,QAAQoB,GAAGW,MACb,OAAO,EAGf,OAAwB,IAAnBhC,EAAIG,YAAqC,KAAjBQ,EAAEL,aACN,IAAnBN,EAAIG,YAAuC,IAAnBH,EAAIG,aAAsC,KAAjBQ,EAAEL,YACjC,IAAnBN,EAAIG,YAAqC,KAAjBQ,EAAEL,aAOnCJ,EAAe,SAACC,GAGhB,IAFA,IAAIF,EAAU,GACVW,EAAMkC,EAAa,IACR,KAARlC,GACHA,EAAMkC,EAAa,IAEvB,IAAK,IAAIzB,EAAI,EAAGA,EAAIlB,EAAYkB,IAC5BpB,EAAQ8C,KAAK,CACTT,KAAM,GACNxB,SAAUF,EACVoB,MAAO,EACPO,SAAU,IAGlB,OAAOtC,GAGX,SAAS6C,EAAaE,GAClB,OAAOC,KAAKC,MAAMD,KAAKE,SAAWH,GAGtC,IAAI3C,EAAa,WAEb,IADA,IAAID,EAAQ,GACHiB,EAAI,EAAGA,EAAI,EAAGA,IACnBjB,EAAM2C,KAAK,CACP7B,YAAY,EACZF,UAAW,EACXG,KAAM,SAGdf,EAAM2C,KAAK,CACP7B,YAAY,EACZF,UAAW,EACXG,KAAM,WAEV,IAASE,EAAI,EAAGA,EAAI,EAAGA,IACnBjB,EAAM2C,KAAK,CACP7B,YAAY,EACZF,UAAW,EACXG,KAAM,SAGd,IAASE,EAAI,EAAGA,EAAI,EAAGA,IACnBjB,EAAM2C,KAAK,CACP7B,YAAY,EACZF,UAAW,EACXG,KAAM,WAGd,IAASE,EAAI,EAAGA,EAAI,EAAGA,IACnB,IAAK,IAAI+B,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAGxB,IAAI7B,EACAX,EACM,IAANS,EAASE,EAAO,IACL,IAANF,EAASE,EAAO,IACV,IAANF,EAASE,EAAO,IACV,IAANF,IAASE,EAAO,KACf,IAAN6B,EAASxC,EAAM,IACJ,IAANwC,IAASxC,EAAM,KACxBR,EAAM2C,KAAK,CACP7B,YAAY,EACZF,UAAW,EACXG,KAAM,OACNI,KAAMA,EACNX,IAAKA,IAIjBR,EAAM2C,KAAK,CACP7B,YAAY,EACZF,UAAW,EACXG,KAAM,cAkBd,SAAiBkC,GACb,IAAiCC,EAA7BC,EAAeF,EAAM/B,OAGzB,KAAO,IAAMiC,GAAc,CAGvBD,EAAcL,KAAKC,MAAMD,KAAKE,SAAWI,GACzCA,IAJuB,MAOqB,CACxCF,EAAMC,GAAcD,EAAME,IAD7BF,EAAME,GAPgB,KAODF,EAAMC,GAPL,MApB3BE,CAAQpD,GACRA,EAAMqD,OAAO,GAAI,EAAG,CAChBvC,YAAY,EACZF,UAAW,EACXG,KAAM,UAIV,IAAMuC,EAAY,CAAC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,IAC5C,IAASrC,EAAI,EAAGA,EAAIqC,EAAUpC,OAAQD,IAClCjB,EAAMsD,EAAUrC,IAAIL,UAAY,EAEpC,OAAOZ,G,iBC/YEuD,EAAb,4MACIC,MAAQ,CACJC,SAAU,EACVC,kBAAkB,EAClBC,SAAS,EACTC,aAAa,GALrB,kDAQI,SAAajC,EAAIO,GACb2B,KAAKC,MAAMzD,MAAM4B,cAAcN,EAAIO,GACnC2B,KAAKE,SAAS,CAAEN,SAAUI,KAAKL,MAAMC,SAAW,MAVxD,gCAYI,SAAmBpB,GACfwB,KAAKC,MAAMzD,MAAM+B,cAAcC,GAC/BwB,KAAKE,SAAS,CAAEL,kBAAkB,MAd1C,yBAgBI,SAAY/B,IACJkC,KAAKG,eAAerC,IAAOkC,KAAKI,WAAWtC,MACvCkC,KAAKL,MAAMG,SAAWE,KAAKC,MAAMvD,EAAEP,MAAM2B,GAAIf,UAAY,GACzDiD,KAAKC,MAAMzD,MAAMM,IAAIgB,GACrBkC,KAAKE,SAAS,CAAEJ,SAAS,MAEnBE,KAAKI,WAAWtC,IACtBkC,KAAKC,MAAMvD,EAAEP,MAAM2B,GAAIf,UAAY,IAClCiD,KAAKL,MAAMG,UACXE,KAAKK,YACNL,KAAKC,MAAMzD,MAAMC,KAAKqB,MA1BtC,sBA8BI,YACuG,IAA/FkC,KAAKC,MAAMvD,EAAEP,MAAM6D,KAAKC,MAAMvD,EAAEV,QAAQgE,KAAKC,MAAMlE,IAAIa,eAAeC,UAAUI,YACiB,IAA9F+C,KAAKC,MAAMvD,EAAEP,MAAM6D,KAAKC,MAAMvD,EAAEV,QAAQgE,KAAKC,MAAMlE,IAAIa,eAAeC,UAAUE,WAEnFiD,KAAKC,MAAMzD,MAAMQ,aAlC7B,yBAqCI,SAAYc,GACJkC,KAAKC,MAAMvD,EAAEV,QAAQ8B,GAAIjB,WAAamD,KAAKC,MAAMvD,EAAEV,QAAQgE,KAAKC,MAAMlE,IAAIa,eAAeC,UACtFmD,KAAKC,MAAMvD,EAAEV,QAAQ8B,GAAIC,MAAQiC,KAAKC,MAAMvD,EAAEV,QAAQ8B,GAAIQ,UAC1D0B,KAAKC,MAAMvD,EAAEV,QAAQgE,KAAKC,MAAMlE,IAAIa,eAAemB,MAAQ,IAC9DiC,KAAKC,MAAMzD,MAAMqB,UAAUC,GAC3BkC,KAAKE,SAAS,CAAEH,aAAa,OA1CzC,4BA6CI,SAAejC,GACX,IAAMwC,EAAmBN,KAAKC,MAAMvD,EAAEV,QAAQgE,KAAKC,MAAMlE,IAAIa,eAAeC,SAC5E,OAAQiB,GAAM,GAAKA,GAAM,KACpBA,IAAOwC,EAAmB,GAAKxC,IAAOwC,EAAmB,GACtDxC,IAAOwC,EAAmB,GAAKxC,IAAOwC,EAAmB,KAjDzE,wBAmDI,SAAWxC,GACP,OAAQA,IAAOkC,KAAKC,MAAMvD,EAAEV,QAAQgE,KAAKC,MAAMlE,IAAIa,eAAeC,WApD1E,sBAuDI,WACI,OAAOmD,KAAKC,MAAMvD,EAAEP,MAAM6D,KAAKC,MAAMvD,EAAEV,QAAQgE,KAAKC,MAAMlE,IAAIa,eAAeC,UAAUE,UAAY,IAxD3G,oBA2DI,WAAU,IAAD,OAEL,GAAIiD,KAAKL,MAAMC,SAAWI,KAAKC,MAAMlE,IAAIG,WACrC,OACI,sBAAKqE,UAAU,SAAf,UACI,qBAAKzC,GAAG,QAAR,4BAGA,sBAAKyC,UAAU,SAAf,oCAC4BP,KAAKL,MAAMC,SADvC,OAGA,sBACA,gCACI,wBAAQY,QAAS,WAAQ,EAAKC,aAAa,EAAKd,MAAMC,SAAU,iBAAhE,0BAGA,wBAAQY,QAAS,WAAQ,EAAKC,aAAa,EAAKd,MAAMC,SAAU,YAAhE,qBAGA,wBAAQY,QAAS,WAAQ,EAAKC,aAAa,EAAKd,MAAMC,SAAU,aAAhE,sBAGA,wBAAQY,QAAS,WAAQ,EAAKC,aAAa,EAAKd,MAAMC,SAAU,kBAAhE,2BAGA,wBAAQY,QAAS,WAAQ,EAAKC,aAAa,EAAKd,MAAMC,SAAU,cAAhE,uBAGA,wBAAQY,QAAS,WAAQ,EAAKC,aAAa,EAAKd,MAAMC,SAAU,kBAAhE,8BAIJ,sBACA,gCACI,gCACI,mBAAG9B,GAAG,SAAN,0BACA,+BACI,2EACA,yDAGR,gCACI,mBAAGA,GAAG,SAAN,qBACA,+BACI,6FACA,0EACA,iHACA,yDAGR,gCACI,mBAAGA,GAAG,SAAN,sBACA,+BACI,0EACA,yDAGR,gCACI,mBAAGA,GAAG,SAAN,2BACA,+BACI,sGACA,yDAGR,gCACI,mBAAGA,GAAG,SAAN,uBACA,+BACI,wIACA,yDAGR,gCACI,mBAAGA,GAAG,SAAN,2BACA,+BACI,qGACA,8FACA,+DAQxB,IAAoC,IAAhCkC,KAAKL,MAAME,iBACX,OACI,sBAAKU,UAAU,SAAf,UACI,qBAAKzC,GAAG,QAAR,kCAGA,sBACA,gCACI,wBAAQ0C,QAAS,WAAQ,EAAKE,mBAAmB,IAAjD,oBAGA,wBAAQF,QAAS,WAAQ,EAAKE,mBAAmB,IAAjD,oBAGA,wBAAQF,QAAS,WAAQ,EAAKE,mBAAmB,IAAjD,mBAGA,wBAAQF,QAAS,WAAQ,EAAKE,mBAAmB,IAAjD,0BAIJ,sBACA,iFAOZ,IADA,IAAIvE,EAAQ,GACHiB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAExB,IADA,IAAIuD,EAAM,GADc,aAGhBC,EAAO,GACX,IAAM9C,EAAK,EAAIV,EAAI+B,EACnB,GAAoC,UAAhC,EAAKc,MAAMvD,EAAEP,MAAM2B,GAAIZ,KACvByD,EAAI7B,KAAK,oBAAahB,GAAG,SAAPA,QAEjB,CAGD,IAFI+C,EAAoB,GAEfC,EAAI,EAAGA,EAAI,EAAKb,MAAMvD,EAAEV,QAAQqB,OAAQyD,IACzC,EAAKb,MAAMvD,EAAEV,QAAQ8E,GAAGjE,WAAaiB,GACrC+C,EAAkB/B,KAAKgC,GAK/B,GAFAF,EAAK9B,KAAK,qBAAKyB,UAAU,SAAf,SAAyBM,KAEM,IAArC,EAAKZ,MAAMvD,EAAEP,MAAM2B,GAAIf,UAAiB,CAExC,IADIgE,EAAgB,GACXC,EAAI,EAAGA,EAAI,EAAKf,MAAMvD,EAAEP,MAAM2B,GAAIf,UAAWiE,IAClDD,EAAgBA,EAAcE,OAAO,KAEzCL,EAAK9B,KAAK,qBAAKyB,UAAW,EAAKN,MAAMvD,EAAEP,MAAM2B,GAAIf,UAAY,EAAI,WAAa,OAApE,SACLgE,KAOT,GAJI,EAAKd,MAAMvD,EAAEP,MAAM2B,GAAIoD,eAAe,cACtCN,EAAK9B,KAAK,sBAAKyB,UAAU,aAAf,mBAAmC,EAAKN,MAAMvD,EAAEP,MAAM2B,GAAIH,eAG9B,IAAtC,EAAKsC,MAAMvD,EAAEP,MAAM2B,GAAIb,WACvB0D,EAAI7B,KAAK,oBAAayB,UAA2C,SAAhC,EAAKN,MAAMvD,EAAEP,MAAM2B,GAAIZ,MAAmD,WAAhC,EAAK+C,MAAMvD,EAAEP,MAAM2B,GAAIZ,KAC9F,mBAAqB,aAAcsD,QAAS,kBAAM,EAAKW,YAAYrD,IAD9D,SACoE8C,GAD3D9C,SAGjB,GAAoC,SAAhC,EAAKmC,MAAMvD,EAAEP,MAAM2B,GAAIZ,KAAiB,CAC7C,IAAMqD,EAAY,EAAKN,MAAMvD,EAAEP,MAAM2B,GAAIR,KAAO,EAAK2C,MAAMvD,EAAEP,MAAM2B,GAAInB,IACvEgE,EAAI7B,KAAK,oBAAayB,UAAWA,EAC7BC,QAAS,kBAAM,EAAKW,YAAYrD,IAD3B,SACiC8C,GADxB9C,SAIlB6C,EAAI7B,KAAK,oBAAayB,UAAW,EAAKN,MAAMvD,EAAEP,MAAM2B,GAAIZ,KACpDsD,QAAS,kBAAM,EAAKW,YAAYrD,IAD3B,SACiC8C,GADxB9C,MAvCrBqB,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAAC,IACrByB,EAMIC,EAEKC,EAQDC,EACKC,EAlBO,IA4C5B7E,EAAM2C,KAAK,6BAAa6B,GAAJvD,IAGxB,IAAIgE,EAAgB,GAkBpB,GAjBAA,EAActC,KACV,gCACI,wBAAQ0B,QAAS,WAAQ,EAAKN,SAAS,CAAEJ,SAAU,EAAKH,MAAMG,WAA9D,iBAGA,8BACKE,KAAKL,MAAMG,QAAU,wBAA0B,KAEpD,wBAAQU,QAAS,WAAQ,EAAKxD,YAA9B,sBAGA,wBAAQwD,QAAS,WAAQ,EAAKN,SAAS,CAAEH,aAAc,EAAKJ,MAAMI,eAAlE,kCAMJC,KAAKL,MAAMI,YAAc,KAAD,aAKpB,IAAMrC,EAAQN,EACdgE,EAActC,KACV,8BACI,yBAAQ0B,QAAS,WAAQ,EAAKa,YAAY3D,IAA1C,oBACYN,SARxB,IAASA,EAAI,EAAGA,EAAI4C,KAAKC,MAAMvD,EAAEV,QAAQqB,OAAQD,IAAM,IAc3DgE,EAActC,KACV,gCACI,wBAAQ0B,QAAS,WAAQ,EAAKP,MAAMqB,QAApC,kBAGA,wBAAQd,QAAS,WAAQ,EAAKP,MAAMzD,MAAMyB,aAA1C,4BAMR,IAAIsD,EAAW,GACfA,EAASzC,KAAK,4CACd,IAUI0C,EAAOC,EAAOC,EAAOC,EAAOC,EAV5BC,EAAiB,GACrB,IAASzE,EAAI,EAAGA,EAAI4C,KAAKC,MAAMlE,IAAIG,WAAYkB,IAC3CyE,EAAe/C,KACX,gCACK1B,EADL,MACW4C,KAAKC,MAAMvD,EAAEV,QAAQoB,GAAGiB,KADnC,iBAC6C2B,KAAKC,MAAMvD,EAAEV,QAAQoB,GAAGW,MADrE,MAC+EiC,KAAKC,MAAMvD,EAAEV,QAAQoB,GAAGkB,aAI/GiD,EAASzC,KAAK+C,GAGoB,IAA9B7B,KAAKC,MAAMlE,IAAIG,YACfsF,EAAQ,QACRC,EAAQ,QACRC,EAAQ,SACRC,EAAQ,UACRC,EAAQ,MAE2B,IAA9B5B,KAAKC,MAAMlE,IAAIG,YAAkD,IAA9B8D,KAAKC,MAAMlE,IAAIG,YACvDsF,EAAQ,QACRC,EAAQ,QACRC,EAAQ,SACRC,EAAQ,UACRC,EAAQ,MAE2B,IAA9B5B,KAAKC,MAAMlE,IAAIG,aACpBsF,EAAQ,QACRC,EAAQ,QACRC,EAAQ,UACRC,EAAQ,UACRC,EAAQ,MAEZL,EAASzC,KACL,gCACI,sBACA,wDAA2BkB,KAAKC,MAAMvD,EAAEL,cACxC,sBACA,wCACA,oDAGA,oDACsBmF,KAEtB,oDACsBC,KAEtB,oDACsBC,KAEtB,oDACsBC,KAEtB,sDACwBC,KAExB,uEAGA,0EAMRL,EAASzC,KACL,gCACI,sBADJ,wBAKJ,IAAS1B,EAAI,EAAGA,EAAI4C,KAAKC,MAAMvD,EAAEJ,aAAae,OAAQD,IAClDmE,EAASzC,KACL,8BACKkB,KAAKC,MAAMvD,EAAEJ,aAAac,MAKvC,OACI,gCACI,sBAAKmD,UAAU,KAAf,UACI,sBAAKA,UAAU,gBAAf,UACI,0CACYP,KAAKC,MAAMlE,IAAIa,cAD3B,aAGA,yDAC2B,EAAIoD,KAAKC,MAAMlE,IAAI+F,eAGlD,gCACI,gCAAQ3F,MAEZ,qBAAKoE,UAAU,SAAf,SACKa,OAGT,qBAAKb,UAAU,KAAf,SACKgB,WA7WrB,GAA0CQ,IAAMC,WC6DjCC,G,kNAzDbtC,MAAQ,CAAEzD,WAAY,M,4CAEtB,WAAU,IAAD,OACP,GAA8B,OAA1B8D,KAAKL,MAAMzD,WACb,OACE,sBAAKqE,UAAU,SAAf,UACE,mEAGA,qBAAKzC,GAAG,QAAR,8BAGA,wFAGA,8BACE,mBAAGoE,KAAK,+EAAR,qCAEF,8BACE,mBAAGA,KAAK,8DAAR,qCAEF,8BACE,mBAAGA,KAAK,6CAAR,2BAEF,sBAAKpE,GAAG,SAAR,UACE,0DACA,wBAAQ0C,QAAS,kBAAM,EAAKN,SAAS,CAAEhE,WAAY,KAAnD,eAGA,wBAAQsE,QAAS,kBAAM,EAAKN,SAAS,CAAEhE,WAAY,KAAnD,eAGA,wBAAQsE,QAAS,kBAAM,EAAKN,SAAS,CAAEhE,WAAY,KAAnD,eAGA,wBAAQsE,QAAS,kBAAM,EAAKN,SAAS,CAAEhE,WAAY,KAAnD,qBAQN,IAAMiG,EAAwBC,YAAO,CACnCC,KAAMxG,EACNK,WAAY8D,KAAKL,MAAMzD,WACvBoG,MAAO5C,IAET,OACE,8BACE,cAACyC,EAAD,U,GAnDQJ,IAAMC,YCFxBO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.100e7f4b.chunk.js","sourcesContent":["export const ForbiddenDesert = {\r\n    //tile: \"isRevealed\", \"sandCount\"\r\n    //tile types: \"well\", \"mirage\", \"gear\", \"tunnel\", \"clue\", \"launchpad\", \"storm\"\r\n    //tile: \"part\" and \"pos\" only for type \"clue\"\r\n    //parts are \"0\", \"1\", \"2\", \"3\"; pos are \"0\" (vertical) and \"1\" (horizontal)\r\n    setup: (ctx) => ({\r\n        players: setupPlayers(ctx.numPlayers),\r\n        tiles: setupTiles(),\r\n        stormLevel: 0,\r\n        lastDrawType: [],\r\n        collectedParts: [],\r\n    }),\r\n\r\n    moves: {\r\n        move: (G, ctx, pos) => {\r\n            G.players[ctx.currentPlayer].position = pos;\r\n        },\r\n        dig: (G, ctx, pos) => {\r\n            G.tiles[pos].sandCount--;\r\n        },\r\n        excavate: {\r\n            move: (G, ctx) => {\r\n                G.tiles[G.players[ctx.currentPlayer].position].isRevealed = true;\r\n                if (G.tiles[G.players[ctx.currentPlayer].position].type === \"clue\") {\r\n                    //check if the other clue has also been revealed\r\n                    //if so, then generate finalPart on the appropriate tile\r\n                    var found = false;\r\n                    for (var i = 0; i < G.tiles.length; i++) {\r\n                        if (G.tiles[i].isRevealed && G.tiles[i].type === \"clue\" &&\r\n                            i !== G.players[ctx.currentPlayer].position &&\r\n                            G.tiles[i].part === G.tiles[G.players[ctx.currentPlayer].position].part) {\r\n                            found = true;\r\n                        }\r\n                    }\r\n                    if (found) {\r\n                        var hid;\r\n                        var vid;\r\n                        var partName = G.tiles[G.players[ctx.currentPlayer].position].part;\r\n                        for (var i = 0; i < G.tiles.length; i++) {\r\n                            if (G.tiles[i].part === partName && G.tiles[i].pos === \"h\") {\r\n                                hid = i;\r\n                            }\r\n                            if (G.tiles[i].part === partName && G.tiles[i].pos === \"v\") {\r\n                                vid = i;\r\n                            }\r\n                        }\r\n                        //index = (hid rounded down to the nearest multiple of 5) + (vid % 5)\r\n                        while ((hid % 5) !== 0 && hid >= 0) {\r\n                            hid -= 1;\r\n                        }\r\n                        const index = hid + (vid % 5);\r\n                        G.tiles[index].finalPart = G.tiles[G.players[ctx.currentPlayer].position].part;\r\n                    }\r\n                }\r\n            },\r\n            undoable: false\r\n        },\r\n        giveWater: {\r\n            move: (G, ctx, id) => {\r\n                G.players[ctx.currentPlayer].water -= 1;\r\n                G.players[id].water += 1;\r\n            },\r\n            noLimit: true\r\n        },\r\n        doNothing: (G, ctx) => {\r\n            ctx.events.endTurn();\r\n        },\r\n        setPlayerInfo: {\r\n            move: (G, ctx, id, role) => {\r\n                G.players[id].role = role;\r\n                if (role === \"Archeologist\" || role === \"Climber\") {\r\n                    G.players[id].maxWater = 3;\r\n                    G.players[id].water = 3;\r\n                }\r\n                else if (role === \"Explorer\" || role === \"Meteorologist\" || role === \"Navigator\") {\r\n                    G.players[id].maxWater = 4;\r\n                    G.players[id].water = 4;\r\n                }\r\n                else {\r\n                    G.players[id].maxWater = 5;\r\n                    G.players[id].water = 5;\r\n                }\r\n            },\r\n            undoable: false,\r\n            noLimit: true\r\n        },\r\n        setDifficulty: {\r\n            move: (G, ctx, diff) => {\r\n                G.stormLevel = diff;\r\n            },\r\n            undoable: false,\r\n            noLimit: true\r\n        },\r\n        //DEBUG ONLY\r\n        removeWater: {\r\n            move: (G, ctx, id) => {\r\n                G.players[id].water -= 1;\r\n            },\r\n            noLimit: true\r\n        },\r\n    },\r\n\r\n    turn: {\r\n        moveLimit: 4,\r\n        /*\r\n        onEnd: (G, ctx) => {\r\n            G.lastDrawType = [];\r\n            //check storm level + ctx.numPlayers, and draw according to that\r\n            var numDraws;\r\n            if (G.stormLevel === 0) {\r\n                numDraws = 2;\r\n            }\r\n            else if (ctx.numPlayers === 2) {\r\n                if (G.stormLevel <= 3) {\r\n                    numDraws = 3;\r\n                }\r\n                else if (G.stormLevel <= 7) {\r\n                    numDraws = 4;\r\n                }\r\n                else if (G.stormLevel <= 10) {\r\n                    numDraws = 5;\r\n                }\r\n                else {\r\n                    numDraws = 6;\r\n                }\r\n            }\r\n            else if (ctx.numPlayers === 3 || ctx.numPlayers === 4) {\r\n                if (G.stormLevel <= 4) {\r\n                    numDraws = 3;\r\n                }\r\n                else if (G.stormLevel <= 8) {\r\n                    numDraws = 4;\r\n                }\r\n                else if (G.stormLevel <= 11) {\r\n                    numDraws = 5;\r\n                }\r\n                else {\r\n                    numDraws = 6;\r\n                }\r\n            }\r\n            else if (ctx.numPlayers === 5) {\r\n                if (G.stormLevel <= 5) {\r\n                    numDraws = 3;\r\n                }\r\n                else if (G.stormLevel <= 9) {\r\n                    numDraws = 4;\r\n                }\r\n                else if (G.stormLevel <= 12) {\r\n                    numDraws = 5;\r\n                }\r\n                else {\r\n                    numDraws = 6;\r\n                }\r\n            }\r\n            for (var draw = 0; draw < numDraws; draw++) {\r\n                //val: 1-4=sunBeatsDown, 5-7=stormPicksUp, 8-31 wind\r\n                var val = ctx.random.Die(31);\r\n                if (val <= 4) {\r\n                    for (var i = 0; i < G.players.length; i++) {\r\n                        if (!(G.tiles[G.players[i].position].type === \"tunnel\" && G.tiles[G.players[i].position].isRevealed)) {\r\n                            G.players[i].water -= 1;\r\n                        }\r\n                    }\r\n                    G.lastDrawType.push(\"Sun Beats Down\");\r\n                }\r\n                else if (val <= 7) {\r\n                    G.stormLevel += 1;\r\n                    G.lastDrawType.push(\"Storm Picks Up\")\r\n                }\r\n                else {\r\n                    var stormPos = 0;\r\n                    for (stormPos; stormPos < G.tiles.length; stormPos++) {\r\n                        if (G.tiles[stormPos].type === \"storm\") {\r\n                            break;\r\n                        }\r\n                    }\r\n                    //1 = up, 2 = left, 3 = down, 4 = right\r\n                    var windDirection = ctx.random.Die(4);\r\n                    //1-3 = 1, 4-5 = 2, 6 = 3\r\n                    var windStrength = ctx.random.Die(6);\r\n                    var maxTilesAffected;\r\n                    if (windStrength <= 3) {\r\n                        maxTilesAffected = 1;\r\n                    }\r\n                    else if (windStrength <= 5) {\r\n                        maxTilesAffected = 2;\r\n                    }\r\n                    else {\r\n                        maxTilesAffected = 3;\r\n                    }\r\n                    //identify positions of tiles that are moved\r\n                    var affectedPos = [];\r\n                    var candidatePos = stormPos;\r\n                    if (windDirection === 1) {\r\n                        while (affectedPos.length < maxTilesAffected) {\r\n                            candidatePos += 5;\r\n                            if (candidatePos >= 0 && candidatePos <= 24) {\r\n                                affectedPos.push(candidatePos);\r\n                            }\r\n                            else {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (windDirection === 2) {\r\n                        while (affectedPos.length < maxTilesAffected) {\r\n                            candidatePos += 1;\r\n                            //check whether on the same row\r\n                            if (candidatePos >= 0 && candidatePos <= 24 &&\r\n                                Math.floor(candidatePos / 5) === Math.floor(stormPos / 5)) {\r\n                                affectedPos.push(candidatePos);\r\n                            }\r\n                            else {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (windDirection === 3) {\r\n                        while (affectedPos.length < maxTilesAffected) {\r\n                            candidatePos -= 5;\r\n                            if (candidatePos >= 0 && candidatePos <= 24) {\r\n                                affectedPos.push(candidatePos);\r\n                            }\r\n                            else {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    else if (windDirection === 4) {\r\n                        while (affectedPos.length < maxTilesAffected) {\r\n                            candidatePos -= 1;\r\n                            //check whether on the same row\r\n                            if (candidatePos >= 0 && candidatePos <= 24 &&\r\n                                Math.floor(candidatePos / 5) === Math.floor(stormPos / 5)) {\r\n                                affectedPos.push(candidatePos);\r\n                            }\r\n                            else {\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    //add 1 sand to affected tiles\r\n                    for (var i = 0; i < affectedPos.length; i++) {\r\n                        G.tiles[affectedPos[i]].sandCount += 1;\r\n                    }\r\n\r\n                    //execute movements\r\n                    const tempStormTile = G.tiles[stormPos];\r\n                    var prevPos = stormPos;\r\n                    for (var i = 0; i < affectedPos.length; i++) {\r\n                        G.tiles[prevPos] = G.tiles[affectedPos[i]];\r\n                        prevPos = affectedPos[i];\r\n                    }\r\n                    if (affectedPos.length !== 0) {\r\n                        G.tiles[affectedPos[affectedPos.length - 1]] = tempStormTile;\r\n                    }\r\n\r\n                    //move all affected players\r\n                    var affectedPlayers = [];\r\n                    for (var i = 0; i < G.players.length; i++) {\r\n                        for (var j = 0; j < affectedPos.length; j++) {\r\n                            if (G.players[i].position === affectedPos[j]) {\r\n                                affectedPlayers.push(i);\r\n                            }\r\n                        }\r\n                    }\r\n                    for (var i = 0; i < affectedPlayers.length; i++) {\r\n                        if (windDirection === 1) {\r\n                            G.players[affectedPlayers[i]].position -= 5;\r\n                        }\r\n                        else if (windDirection === 2) {\r\n                            G.players[affectedPlayers[i]].position -= 1;\r\n                        }\r\n                        else if (windDirection === 3) {\r\n                            G.players[affectedPlayers[i]].position += 5;\r\n                        }\r\n                        else if (windDirection === 4) {\r\n                            G.players[affectedPlayers[i]].position += 1;\r\n                        }\r\n                    }\r\n\r\n                    var directionString;\r\n                    if (windDirection === 1) {\r\n                        directionString = \"up\";\r\n                    }\r\n                    else if (windDirection === 2) {\r\n                        directionString = \"left\";\r\n                    }\r\n                    else if (windDirection === 3) {\r\n                        directionString = \"down\";\r\n                    }\r\n                    else if (windDirection === 4) {\r\n                        directionString = \"right\";\r\n                    }\r\n                    G.lastDrawType.push(\"Wind: \" + directionString + \", strength \" + maxTilesAffected);\r\n                }\r\n            }\r\n        }*/\r\n    },\r\n\r\n    endIf: (G, ctx) => {\r\n        for (var i = 0; i < G.players.length; i++) {\r\n            if (G.players[i].water === -1) {\r\n                return true;\r\n            }\r\n        }\r\n        if ((ctx.numPlayers === 2 && G.stormLevel === 13) ||\r\n            ((ctx.numPlayers === 3 || ctx.numPlayers === 4) && G.stormLevel === 14) ||\r\n            (ctx.numPlayers === 5 && G.stormLevel === 15)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n};\r\n\r\nvar setupPlayers = (numPlayers) => {\r\n    var players = [];\r\n    var pos = getRandomInt(25);\r\n    while (pos === 12) {\r\n        pos = getRandomInt(25);\r\n    }\r\n    for (var i = 0; i < numPlayers; i++) {\r\n        players.push({\r\n            role: \"\",\r\n            position: pos,\r\n            water: 0,\r\n            maxWater: 0,\r\n        });\r\n    }\r\n    return players;\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\nvar setupTiles = () => {\r\n    var tiles = [];\r\n    for (var i = 0; i < 2; i++) {\r\n        tiles.push({\r\n            isRevealed: false,\r\n            sandCount: 0,\r\n            type: \"well\",\r\n        });\r\n    }\r\n    tiles.push({\r\n        isRevealed: false,\r\n        sandCount: 0,\r\n        type: \"mirage\",\r\n    });\r\n    for (var i = 0; i < 9; i++) {\r\n        tiles.push({\r\n            isRevealed: false,\r\n            sandCount: 0,\r\n            type: \"gear\",\r\n        });\r\n    }\r\n    for (var i = 0; i < 3; i++) {\r\n        tiles.push({\r\n            isRevealed: false,\r\n            sandCount: 0,\r\n            type: \"tunnel\",\r\n        })\r\n    }\r\n    for (var i = 0; i < 4; i++) {\r\n        for (var j = 0; j < 2; j++) {\r\n            //parts: A, B, C, D\r\n            //pos: 0 --> vertical, 1 --> horizontal\r\n            var part;\r\n            var pos;\r\n            if (i === 0) part = \"A\";\r\n            else if (i === 1) part = \"B\";\r\n            else if (i === 2) part = \"C\";\r\n            else if (i === 3) part = \"D\";\r\n            if (j === 0) pos = \"h\";\r\n            else if (j === 1) pos = \"v\"\r\n            tiles.push({\r\n                isRevealed: false,\r\n                sandCount: 0,\r\n                type: \"clue\",\r\n                part: part,\r\n                pos: pos,\r\n            });\r\n        }\r\n    }\r\n    tiles.push({\r\n        isRevealed: false,\r\n        sandCount: 0,\r\n        type: \"launchpad\",\r\n    })\r\n    shuffle(tiles);\r\n    tiles.splice(12, 0, {\r\n        isRevealed: false,\r\n        sandCount: 0,\r\n        type: \"storm\",\r\n    });\r\n\r\n    //setup sand\r\n    const sandTiles = [2, 6, 8, 10, 14, 16, 18, 22];\r\n    for (var i = 0; i < sandTiles.length; i++) {\r\n        tiles[sandTiles[i]].sandCount = 1;\r\n    }\r\n    return tiles;\r\n}\r\n\r\n//https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array lol sorry :(\r\nfunction shuffle(array) {\r\n    var currentIndex = array.length, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex--;\r\n\r\n        // And swap it with the current element.\r\n        [array[currentIndex], array[randomIndex]] = [\r\n            array[randomIndex], array[currentIndex]];\r\n    }\r\n\r\n    return array;\r\n}","import React from 'react';\r\nimport './board.css';\r\n\r\nexport class ForbiddenDesertBoard extends React.Component {\r\n    state = {\r\n        assignID: 0,\r\n        assignDifficulty: false,\r\n        digging: false,\r\n        givingWater: false,\r\n    }\r\n\r\n    assignRoleTo(id, role) {\r\n        this.props.moves.setPlayerInfo(id, role);\r\n        this.setState({ assignID: this.state.assignID + 1 });\r\n    }\r\n    assignDifficultyTo(diff) {\r\n        this.props.moves.setDifficulty(diff);\r\n        this.setState({ assignDifficulty: true })\r\n    }\r\n    onClickTile(id) {\r\n        if (this.isAdjacentTile(id) || this.isSameTile(id)) {\r\n            if (this.state.digging && this.props.G.tiles[id].sandCount > 0) {\r\n                this.props.moves.dig(id);\r\n                this.setState({ digging: false });\r\n            }\r\n            else if (!this.isSameTile(id) &&\r\n                this.props.G.tiles[id].sandCount < 2 &&\r\n                !this.state.digging &&\r\n                !this.isBuried()) {\r\n                this.props.moves.move(id);\r\n            }\r\n        }\r\n    }\r\n    excavate() {\r\n        if (this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].isRevealed === false\r\n            && this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].sandCount === 0) {\r\n            //holy cow what a long sentence lol\r\n            this.props.moves.excavate();\r\n        }\r\n    }\r\n    giveWaterTo(id) {\r\n        if (this.props.G.players[id].position === this.props.G.players[this.props.ctx.currentPlayer].position\r\n            && this.props.G.players[id].water < this.props.G.players[id].maxWater\r\n            && this.props.G.players[this.props.ctx.currentPlayer].water > 0) {\r\n            this.props.moves.giveWater(id);\r\n            this.setState({ givingWater: false });\r\n        }\r\n    }\r\n    isAdjacentTile(id) {\r\n        const currentPlayerPos = this.props.G.players[this.props.ctx.currentPlayer].position;\r\n        return (id >= 0 && id <= 24 &&\r\n            (id === currentPlayerPos - 1 || id === currentPlayerPos + 1 ||\r\n                id === currentPlayerPos - 5 || id === currentPlayerPos + 5));\r\n    }\r\n    isSameTile(id) {\r\n        return (id === this.props.G.players[this.props.ctx.currentPlayer].position);\r\n    }\r\n    //returns whether current player is buried\r\n    isBuried() {\r\n        return this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].sandCount > 1;\r\n    }\r\n\r\n    render() {\r\n        //role selection screen\r\n        if (this.state.assignID < this.props.ctx.numPlayers) {\r\n            return (\r\n                <div className=\"center\">\r\n                    <div id=\"title\">\r\n                        Role Selection\r\n                    </div>\r\n                    <div className=\"header\">\r\n                        Choose role for Player {this.state.assignID}:\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Archeologist\"); }}>\r\n                            Archeologist\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Climber\"); }}>\r\n                            Climber\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Explorer\"); }}>\r\n                            Explorer\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Meteorologist\"); }}>\r\n                            Meteorologist\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Navigator\"); }}>\r\n                            Navigator\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Water Carrier\"); }}>\r\n                            Water Carrier\r\n                        </button>\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        <div>\r\n                            <p id=\"header\">Archeologist</p>\r\n                            <ul>\r\n                                <li>Removes 2 sand when digging instead of 1.</li>\r\n                                <li>Water capacity: 3</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Climber</p>\r\n                            <ul>\r\n                                <li>Carry: moves other players along with Climber. (Cost: free)</li>\r\n                                <li>Can move over tiles with 2 or more sand.</li>\r\n                                <li>Allows all players on Climber's current tile to leave even with 2 or more sand.</li>\r\n                                <li>Water capacity: 3</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Explorer</p>\r\n                            <ul>\r\n                                <li>Can move, dig, and use items diagonally.</li>\r\n                                <li>Water capacity: 4</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Meteorologist</p>\r\n                            <ul>\r\n                                <li>Mitigate: draw 1 less Storm at the end of the turn. (Cost: 1 action)</li>\r\n                                <li>Water capacity: 4</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Navigator</p>\r\n                            <ul>\r\n                                <li>Direct: move another player up to 3 tiles. Climber and Explorer keep their abilities. (Cost: 1 action)</li>\r\n                                <li>Water capacity: 4</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Water Carrier</p>\r\n                            <ul>\r\n                                <li>Gather Water: take 2 water from an excavated well. (Cost: 1 action)</li>\r\n                                <li>Give Water: give 1 water to an adjacent player. (Cost: free)</li>\r\n                                <li>Water capacity: 5</li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        //difficulty selection screen\r\n        if (this.state.assignDifficulty === false) {\r\n            return (\r\n                <div className=\"center\">\r\n                    <div id=\"title\">\r\n                        Difficulty Selection\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        <button onClick={() => { this.assignDifficultyTo(0); }}>\r\n                            Novice\r\n                        </button>\r\n                        <button onClick={() => { this.assignDifficultyTo(1); }}>\r\n                            Normal\r\n                        </button>\r\n                        <button onClick={() => { this.assignDifficultyTo(2); }}>\r\n                            Elite\r\n                        </button>\r\n                        <button onClick={() => { this.assignDifficultyTo(3); }}>\r\n                            Legendary\r\n                        </button>\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        (Difficulty sets the starting storm level.)\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        var tiles = [];\r\n        for (var i = 0; i < 5; i++) {\r\n            var row = [];\r\n            for (var j = 0; j < 5; j++) {\r\n                var tile = [];\r\n                const id = 5 * i + j;\r\n                if (this.props.G.tiles[id].type === \"storm\") {\r\n                    row.push(<td key={id} id=\"storm\"></td>);\r\n                }\r\n                else {\r\n                    var playersOnThisTile = [];\r\n                    //render players on current tile\r\n                    for (var k = 0; k < this.props.G.players.length; k++) {\r\n                        if (this.props.G.players[k].position === id) {\r\n                            playersOnThisTile.push(k);\r\n                        }\r\n                    }\r\n                    tile.push(<div className=\"player\">{playersOnThisTile}</div>);\r\n                    //render sandCount\r\n                    if (this.props.G.tiles[id].sandCount !== 0) {\r\n                        var sandIndicator = \"\";\r\n                        for (var l = 0; l < this.props.G.tiles[id].sandCount; l++) {\r\n                            sandIndicator = sandIndicator.concat(\"l\");\r\n                        }\r\n                        tile.push(<div className={this.props.G.tiles[id].sandCount > 1 ? \"sand red\" : \"sand\"}>\r\n                            {sandIndicator}</div>);\r\n                    }\r\n                    //render finalPart if it has one\r\n                    if (this.props.G.tiles[id].hasOwnProperty(\"finalPart\")) {\r\n                        tile.push(<div className=\"final-part\">Part: {this.props.G.tiles[id].finalPart}</div>)\r\n                    }\r\n                    //render backgrounds (set by className CSS)\r\n                    if (this.props.G.tiles[id].isRevealed === false) {\r\n                        row.push(<td key={id} className={this.props.G.tiles[id].type === \"well\" || this.props.G.tiles[id].type === \"mirage\" ?\r\n                            \"unrevealed-water\" : \"unrevealed\"} onClick={() => this.onClickTile(id)}>{tile}</td>);\r\n                    }\r\n                    else if (this.props.G.tiles[id].type === \"clue\") {\r\n                        const className = this.props.G.tiles[id].part + this.props.G.tiles[id].pos;\r\n                        row.push(<td key={id} className={className}\r\n                            onClick={() => this.onClickTile(id)}>{tile}</td>);\r\n                    }\r\n                    else {\r\n                        row.push(<td key={id} className={this.props.G.tiles[id].type}\r\n                            onClick={() => this.onClickTile(id)}>{tile}</td>);\r\n                    }\r\n                }\r\n            }\r\n            tiles.push(<tr key={i}>{row}</tr>);\r\n        }\r\n\r\n        var actionButtons = [];\r\n        actionButtons.push(\r\n            <div>\r\n                <button onClick={() => { this.setState({ digging: !this.state.digging }); }}>\r\n                    Dig\r\n                </button>\r\n                <div>\r\n                    {this.state.digging ? \"Choose a tile to dig.\" : \"\"}\r\n                </div>\r\n                <button onClick={() => { this.excavate(); }}>\r\n                    Excavate\r\n                </button>\r\n                <button onClick={() => { this.setState({ givingWater: !this.state.givingWater }); }}>\r\n                    Give water to...\r\n                </button>\r\n            </div>\r\n        );\r\n        //give water to popup buttons\r\n        if (this.state.givingWater) {\r\n            for (var i = 0; i < this.props.G.players.length; i++) {\r\n                //this took me hours to fix.. if you don't assign i to a constant,\r\n                //and use i for giveWaterTo parameter, then the value is going \r\n                //to be, like, different every time you call it. or something.\r\n                const index = i;\r\n                actionButtons.push(\r\n                    <div>\r\n                        <button onClick={() => { this.giveWaterTo(index); }}>\r\n                            Player {i}\r\n                        </button>\r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n        actionButtons.push(\r\n            <div>\r\n                <button onClick={() => { this.props.undo(); }}>\r\n                    Undo\r\n                </button>\r\n                <button onClick={() => { this.props.moves.doNothing(); }}>\r\n                    Do nothing\r\n                </button>\r\n            </div>\r\n        )\r\n\r\n        var rightbar = [];\r\n        rightbar.push(<div>Players:</div>)\r\n        var playerInfoList = [];\r\n        for (var i = 0; i < this.props.ctx.numPlayers; i++) {\r\n            playerInfoList.push(\r\n                <div>\r\n                    {i} - {this.props.G.players[i].role} 🍼 {this.props.G.players[i].water} / {this.props.G.players[i].maxWater}\r\n                </div>\r\n            );\r\n        }\r\n        rightbar.push(playerInfoList);\r\n\r\n        var draw3, draw4, draw5, draw6, death;\r\n        if (this.props.ctx.numPlayers === 2) {\r\n            draw3 = \"1 - 3\";\r\n            draw4 = \"4 - 7\";\r\n            draw5 = \"8 - 10\";\r\n            draw6 = \"11 - 12\";\r\n            death = \"13\";\r\n        }\r\n        else if (this.props.ctx.numPlayers === 3 || this.props.ctx.numPlayers === 4) {\r\n            draw3 = \"1 - 4\";\r\n            draw4 = \"5 - 8\";\r\n            draw5 = \"9 - 11\";\r\n            draw6 = \"12 - 13\";\r\n            death = \"14\";\r\n        }\r\n        else if (this.props.ctx.numPlayers === 5) {\r\n            draw3 = \"1 - 5\";\r\n            draw4 = \"6 - 9\";\r\n            draw5 = \"10 - 12\";\r\n            draw6 = \"13 - 14\";\r\n            death = \"15\";\r\n        }\r\n        rightbar.push(\r\n            <div>\r\n                <p></p>\r\n                <div>Current storm level: {this.props.G.stormLevel}</div>\r\n                <p></p>\r\n                <div>Info:</div>\r\n                <div>\r\n                    Draw 2 at level 0\r\n                </div>\r\n                <div>\r\n                    Draw 3 at levels {draw3}\r\n                </div>\r\n                <div>\r\n                    Draw 4 at levels {draw4}\r\n                </div>\r\n                <div>\r\n                    Draw 5 at levels {draw5}\r\n                </div>\r\n                <div>\r\n                    Draw 6 at levels {draw6}\r\n                </div>\r\n                <div>\r\n                    Game over at level {death}\r\n                </div>\r\n                <div>\r\n                    Probability of Sun Beats Down: 12.9%\r\n                </div>\r\n                <div>\r\n                    Probability of Storm Picks Up: 9.7%\r\n                </div>\r\n            </div>\r\n        );\r\n\r\n        rightbar.push(\r\n            <div>\r\n                <p></p>\r\n                End of last turn:\r\n            </div>\r\n        );\r\n        for (var i = 0; i < this.props.G.lastDrawType.length; i++) {\r\n            rightbar.push(\r\n                <div>\r\n                    {this.props.G.lastDrawType[i]}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"fl\">\r\n                    <div className=\"header center\">\r\n                        <div>\r\n                            Player {this.props.ctx.currentPlayer}'s turn\r\n                        </div>\r\n                        <div>\r\n                            Actions left in turn: {4 - this.props.ctx.numMoves}\r\n                        </div>\r\n                    </div>\r\n                    <table>\r\n                        <tbody>{tiles}</tbody>\r\n                    </table>\r\n                    <div className=\"center\">\r\n                        {actionButtons}\r\n                    </div>\r\n                </div>\r\n                <div className=\"fl\">\r\n                    {rightbar}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Client } from 'boardgame.io/react';\r\nimport { ForbiddenDesert } from './Game';\r\nimport { ForbiddenDesertBoard } from './board';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  state = { numPlayers: null };\r\n\r\n  render() {\r\n    if (this.state.numPlayers === null) {\r\n      return (\r\n        <div className=\"center\">\r\n          <div>\r\n            !! THIS IS A WORK IN PROGRESS !!\r\n          </div>\r\n          <div id=\"title\">\r\n            FORBIDDEN DESERT\r\n          </div>\r\n          <div>\r\n            Based off the original game designed by Matt Leacock.\r\n          </div>\r\n          <div>\r\n            <a href=\"https://www.gamewright.com/gamewright/pdfs/Rules/ForbiddenDesertTM-RULES.pdf\">Official rules manual</a>\r\n          </div>\r\n          <div>\r\n            <a href=\"https://boardgamegeek.com/boardgame/136063/forbidden-desert\">BoardGameGeek listing</a>\r\n          </div>\r\n          <div>\r\n            <a href=\"https://github.com/hwabis/forbidden-desert\">Source code</a>\r\n          </div>\r\n          <div id=\"header\">\r\n            <p>Select number of players:</p>\r\n            <button onClick={() => this.setState({ numPlayers: 2 })}>\r\n              2\r\n            </button>\r\n            <button onClick={() => this.setState({ numPlayers: 3 })}>\r\n              3\r\n            </button>\r\n            <button onClick={() => this.setState({ numPlayers: 4 })}>\r\n              4\r\n            </button>\r\n            <button onClick={() => this.setState({ numPlayers: 5 })}>\r\n              5\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    else {\r\n      const ForbiddenDesertClient = Client({\r\n        game: ForbiddenDesert,\r\n        numPlayers: this.state.numPlayers,\r\n        board: ForbiddenDesertBoard,\r\n      });\r\n      return (\r\n        <div>\r\n          <ForbiddenDesertClient />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}