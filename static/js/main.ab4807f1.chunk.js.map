{"version":3,"sources":["Game.js","board.js","App.js","index.js"],"names":["ForbiddenDesert","setup","ctx","players","setupPlayers","numPlayers","tiles","setupTiles","stormLevel","numDraws","lastDrawType","collectedParts","turnEnded","moves","move","G","pos","currentPlayer","position","dig","role","sandCount","excavate","currPos","isRevealed","type","i","length","water","maxWater","found","part","hid","vid","partName","index","finalParts","push","undoable","giveWater","id","noLimit","pickUpFinalPart","tempRemovedPart","splice","mitigate","collectWater","doNothing","events","endTurn","setPlayerInfo","setDifficulty","diff","removeWater","placeFinalPart","turn","moveLimit","onBegin","onEnd","draw","val","random","Die","stormPos","maxTilesAffected","windDirection","windStrength","affectedPos","candidatePos","Math","floor","tempStormTile","prevPos","directionString","affectedPlayers","j","endIf","getRandomInt","max","array","randomIndex","currentIndex","shuffle","sandTiles","ForbiddenDesertBoard","state","assignID","assignDifficulty","digging","givingWater","excavateErrorMsg","waterErrorMsg","this","props","setState","isBuried","isSameTile","isAdjacentTile","isDiagonalTile","currentPlayerPos","check1","check2","abs","className","onClick","assignRoleTo","assignDifficultyTo","idToStateClass","Array","fill","map","currentClass","tileID","_","tileIsDiggable","tileIsMovable","row","tile","playersOnThisTile","k","sandIndicator","l","concat","onClickTile","actionButtons","setTimeout","someoneFound","giveWaterTo","undo","rightbar","playerInfoList","draw3","draw4","draw5","draw6","death","partList","color","numMoves","React","Component","App","href","ForbiddenDesertClient","Client","game","board","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ab4807f1.chunk.js","sourcesContent":["export const ForbiddenDesert = {\r\n    //there's a bug where sometimes (particularly when people are at 0 water),\r\n    //onEnd happens twice. i can't figure out the cause, but turnEnded should fix it\r\n    setup: (ctx) => ({\r\n        players: setupPlayers(ctx.numPlayers),\r\n        tiles: setupTiles(),\r\n        stormLevel: 0,\r\n        numDraws: 0,\r\n        lastDrawType: [],\r\n        collectedParts: [],\r\n        turnEnded: false,\r\n    }),\r\n\r\n    moves: {\r\n        move: (G, ctx, pos) => {\r\n            G.players[ctx.currentPlayer].position = pos;\r\n        },\r\n        dig: (G, ctx, pos) => {\r\n            if (G.players[ctx.currentPlayer].role === \"Archeologist\") {\r\n                G.tiles[pos].sandCount -= 2;\r\n                if (G.tiles[pos].sandCount < 0) {\r\n                    G.tiles[pos].sandCount = 0;\r\n                }\r\n            }\r\n            else {\r\n                G.tiles[pos].sandCount--;\r\n            }\r\n        },\r\n        excavate: {\r\n            move: (G, ctx) => {\r\n                const currPos = G.players[ctx.currentPlayer].position;\r\n                G.tiles[currPos].isRevealed = true;\r\n                if (G.tiles[currPos].type === \"well\") {\r\n                    //everyone on currPos gets two water\r\n                    for (var i = 0; i < G.players.length; i++) {\r\n                        if (G.players[i].position === currPos) {\r\n                            G.players[i].water += 2;\r\n                        }\r\n                        if (G.players[i].water > G.players[i].maxWater) {\r\n                            G.players[i].water = G.players[i].maxWater;\r\n                        }\r\n                    }\r\n                }\r\n                else if (G.tiles[currPos].type === \"clue\") {\r\n                    //check if the other clue has also been revealed\r\n                    //if so, then generate finalPart on the appropriate tile\r\n                    var found = false;\r\n                    for (var i = 0; i < G.tiles.length; i++) {\r\n                        if (G.tiles[i].isRevealed && G.tiles[i].type === \"clue\" &&\r\n                            i !== currPos && G.tiles[i].part === G.tiles[currPos].part) {\r\n                            found = true;\r\n                        }\r\n                    }\r\n                    if (found) {\r\n                        var hid;\r\n                        var vid;\r\n                        var partName = G.tiles[currPos].part;\r\n                        for (var i = 0; i < G.tiles.length; i++) {\r\n                            if (G.tiles[i].part === partName && G.tiles[i].pos === \"h\") {\r\n                                hid = i;\r\n                            }\r\n                            if (G.tiles[i].part === partName && G.tiles[i].pos === \"v\") {\r\n                                vid = i;\r\n                            }\r\n                        }\r\n                        //index = (hid rounded down to the nearest multiple of 5) + (vid % 5)\r\n                        while ((hid % 5) !== 0 && hid >= 0) {\r\n                            hid -= 1;\r\n                        }\r\n                        const index = hid + (vid % 5);\r\n                        G.tiles[index].finalParts.push(partName);\r\n                    }\r\n                }\r\n            },\r\n            undoable: false\r\n        },\r\n        giveWater: {\r\n            move: (G, ctx, id) => {\r\n                G.players[ctx.currentPlayer].water -= 1;\r\n                G.players[id].water += 1;\r\n            },\r\n            noLimit: true\r\n        },\r\n        pickUpFinalPart: (G, ctx) => {\r\n            const tempRemovedPart = G.tiles[G.players[ctx.currentPlayer].position].finalParts[0];\r\n            //remove the first final part from tile\r\n            G.tiles[G.players[ctx.currentPlayer].position].finalParts.splice(0, 1);\r\n            //add to collected parts\r\n            G.collectedParts.push(tempRemovedPart);\r\n        },\r\n        mitigate: (G, ctx) => {\r\n            G.numDraws -= 1;\r\n        },\r\n        collectWater: (G, ctx) => {\r\n            G.players[ctx.currentPlayer].water += 2;\r\n            if (G.players[ctx.currentPlayer].water > G.players[ctx.currentPlayer].maxWater) {\r\n                G.players[ctx.currentPlayer].water = G.players[ctx.currentPlayer].maxWater;\r\n            }\r\n        },\r\n        doNothing: (G, ctx) => {\r\n            ctx.events.endTurn();\r\n        },\r\n        setPlayerInfo: {\r\n            move: (G, ctx, id, role) => {\r\n                G.players[id].role = role;\r\n                if (role === \"Archeologist\" || role === \"Climber\") {\r\n                    G.players[id].maxWater = 3;\r\n                    G.players[id].water = 3;\r\n                }\r\n                else if (role === \"Explorer\" || role === \"Meteorologist\" || role === \"Navigator\") {\r\n                    G.players[id].maxWater = 4;\r\n                    G.players[id].water = 4;\r\n                }\r\n                else {\r\n                    G.players[id].maxWater = 5;\r\n                    G.players[id].water = 5;\r\n                }\r\n            },\r\n            undoable: false,\r\n            noLimit: true\r\n        },\r\n        setDifficulty: {\r\n            move: (G, ctx, diff) => {\r\n                G.stormLevel = diff;\r\n                if (diff === 0) {\r\n                    G.numDraws = 2;\r\n                }\r\n                else {\r\n                    G.numDraws = 3;\r\n                }\r\n            },\r\n            undoable: false,\r\n            noLimit: true\r\n        },\r\n        //DEBUG ONLY\r\n        removeWater: {\r\n            move: (G, ctx, id) => {\r\n                G.players[id].water -= 1;\r\n            },\r\n            noLimit: true\r\n        },\r\n        placeFinalPart: {\r\n            move: (G, ctx, id) => {\r\n                G.tiles[id].finalParts.push(\"Z\");\r\n            },\r\n            noLimit: true\r\n        }\r\n    },\r\n\r\n    turn: {\r\n        moveLimit: 4,\r\n        onBegin: (G, ctx) => {\r\n            G.turnEnded = false;\r\n        },\r\n        onEnd: (G, ctx) => {\r\n            if (!G.turnEnded) {\r\n                G.lastDrawType = [];\r\n                //numDraws should be set from end of last turn\r\n                //(we set it at the end for meteorologist to be able to decrement it during turn)\r\n                for (var draw = 0; draw < G.numDraws; draw++) {\r\n                    //val: 1-4=sunBeatsDown, 5-7=stormPicksUp, 8-31 wind\r\n                    var val = ctx.random.Die(31);\r\n                    if (val <= 4) {\r\n                        for (var i = 0; i < G.players.length; i++) {\r\n                            if (!(G.tiles[G.players[i].position].type === \"tunnel\" && G.tiles[G.players[i].position].isRevealed)) {\r\n                                G.players[i].water -= 1;\r\n                            }\r\n                        }\r\n                        G.lastDrawType.push(\"Sun Beats Down\");\r\n                    }\r\n                    else if (val <= 7) {\r\n                        G.stormLevel += 1;\r\n                        G.lastDrawType.push(\"Storm Picks Up\")\r\n                    }\r\n                    else {\r\n                        var stormPos = 0;\r\n                        for (stormPos; stormPos < G.tiles.length; stormPos++) {\r\n                            if (G.tiles[stormPos].type === \"storm\") {\r\n                                break;\r\n                            }\r\n                        }\r\n                        //1 = up, 2 = left, 3 = down, 4 = right\r\n                        var windDirection = ctx.random.Die(4);\r\n                        //1-3 = 1, 4-5 = 2, 6 = 3\r\n                        var windStrength = ctx.random.Die(6);\r\n                        var maxTilesAffected;\r\n                        if (windStrength <= 3) {\r\n                            maxTilesAffected = 1;\r\n                        }\r\n                        else if (windStrength <= 5) {\r\n                            maxTilesAffected = 2;\r\n                        }\r\n                        else {\r\n                            maxTilesAffected = 3;\r\n                        }\r\n                        //identify positions of tiles that are moved\r\n                        var affectedPos = [];\r\n                        var candidatePos = stormPos;\r\n                        if (windDirection === 1) {\r\n                            while (affectedPos.length < maxTilesAffected) {\r\n                                candidatePos += 5;\r\n                                if (candidatePos >= 0 && candidatePos <= 24) {\r\n                                    affectedPos.push(candidatePos);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (windDirection === 2) {\r\n                            while (affectedPos.length < maxTilesAffected) {\r\n                                candidatePos += 1;\r\n                                //check whether on the same row\r\n                                if (candidatePos >= 0 && candidatePos <= 24 &&\r\n                                    Math.floor(candidatePos / 5) === Math.floor(stormPos / 5)) {\r\n                                    affectedPos.push(candidatePos);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (windDirection === 3) {\r\n                            while (affectedPos.length < maxTilesAffected) {\r\n                                candidatePos -= 5;\r\n                                if (candidatePos >= 0 && candidatePos <= 24) {\r\n                                    affectedPos.push(candidatePos);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (windDirection === 4) {\r\n                            while (affectedPos.length < maxTilesAffected) {\r\n                                candidatePos -= 1;\r\n                                //check whether on the same row\r\n                                if (candidatePos >= 0 && candidatePos <= 24 &&\r\n                                    Math.floor(candidatePos / 5) === Math.floor(stormPos / 5)) {\r\n                                    affectedPos.push(candidatePos);\r\n                                }\r\n                                else {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        //add 1 sand to affected tiles\r\n                        for (var i = 0; i < affectedPos.length; i++) {\r\n                            G.tiles[affectedPos[i]].sandCount += 1;\r\n                        }\r\n\r\n                        //execute movements\r\n                        const tempStormTile = G.tiles[stormPos];\r\n                        var prevPos = stormPos;\r\n                        //edge case: first give all of stormPos's finalParts to the first affectedPos tile\r\n                        if (affectedPos.length > 0) {\r\n                            for (var i = 0; i < G.tiles[stormPos].finalParts.length; i++) {\r\n                                G.tiles[affectedPos[0]].finalParts.push(G.tiles[stormPos].finalParts[i]);\r\n                            }\r\n                            //clear storm's finalParts\r\n                            G.tiles[stormPos].finalParts = [];\r\n                        }\r\n                        //...now execute\r\n                        for (var i = 0; i < affectedPos.length; i++) {\r\n                            G.tiles[prevPos] = G.tiles[affectedPos[i]];\r\n                            prevPos = affectedPos[i];\r\n                        }\r\n                        if (affectedPos.length !== 0) {\r\n                            G.tiles[affectedPos[affectedPos.length - 1]] = tempStormTile;\r\n                        }\r\n\r\n                        //move all affected players\r\n                        var affectedPlayers = [];\r\n                        for (var i = 0; i < G.players.length; i++) {\r\n                            for (var j = 0; j < affectedPos.length; j++) {\r\n                                if (G.players[i].position === affectedPos[j]) {\r\n                                    affectedPlayers.push(i);\r\n                                }\r\n                            }\r\n                        }\r\n                        for (var i = 0; i < affectedPlayers.length; i++) {\r\n                            if (windDirection === 1) {\r\n                                G.players[affectedPlayers[i]].position -= 5;\r\n                            }\r\n                            else if (windDirection === 2) {\r\n                                G.players[affectedPlayers[i]].position -= 1;\r\n                            }\r\n                            else if (windDirection === 3) {\r\n                                G.players[affectedPlayers[i]].position += 5;\r\n                            }\r\n                            else if (windDirection === 4) {\r\n                                G.players[affectedPlayers[i]].position += 1;\r\n                            }\r\n                        }\r\n\r\n                        var directionString;\r\n                        if (windDirection === 1) {\r\n                            directionString = \"up\";\r\n                        }\r\n                        else if (windDirection === 2) {\r\n                            directionString = \"left\";\r\n                        }\r\n                        else if (windDirection === 3) {\r\n                            directionString = \"down\";\r\n                        }\r\n                        else if (windDirection === 4) {\r\n                            directionString = \"right\";\r\n                        }\r\n                        G.lastDrawType.push(\"Wind: \" + directionString + \", strength \" + maxTilesAffected);\r\n                    }\r\n                }\r\n                //check storm level + ctx.numPlayers, and draw according to that\r\n                if (G.stormLevel === 0) {\r\n                    G.numDraws = 2;\r\n                }\r\n                else if (ctx.numPlayers === 2) {\r\n                    if (G.stormLevel <= 3) {\r\n                        G.numDraws = 3;\r\n                    }\r\n                    else if (G.stormLevel <= 7) {\r\n                        G.numDraws = 4;\r\n                    }\r\n                    else if (G.stormLevel <= 10) {\r\n                        G.numDraws = 5;\r\n                    }\r\n                    else {\r\n                        G.numDraws = 6;\r\n                    }\r\n                }\r\n                else if (ctx.numPlayers === 3 || ctx.numPlayers === 4) {\r\n                    if (G.stormLevel <= 4) {\r\n                        G.numDraws = 3;\r\n                    }\r\n                    else if (G.stormLevel <= 8) {\r\n                        G.numDraws = 4;\r\n                    }\r\n                    else if (G.stormLevel <= 11) {\r\n                        G.numDraws = 5;\r\n                    }\r\n                    else {\r\n                        G.numDraws = 6;\r\n                    }\r\n                }\r\n                else if (ctx.numPlayers === 5) {\r\n                    if (G.stormLevel <= 5) {\r\n                        G.numDraws = 3;\r\n                    }\r\n                    else if (G.stormLevel <= 9) {\r\n                        G.numDraws = 4;\r\n                    }\r\n                    else if (G.stormLevel <= 12) {\r\n                        G.numDraws = 5;\r\n                    }\r\n                    else {\r\n                        G.numDraws = 6;\r\n                    }\r\n                }\r\n                G.turnEnded = true;\r\n            }\r\n        }\r\n    },\r\n\r\n    endIf: (G, ctx) => {\r\n        for (var i = 0; i < G.players.length; i++) {\r\n            if (G.players[i].water < 0) {\r\n                return true;\r\n            }\r\n        }\r\n        if ((ctx.numPlayers === 2 && G.stormLevel === 13) ||\r\n            ((ctx.numPlayers === 3 || ctx.numPlayers === 4) && G.stormLevel === 14) ||\r\n            (ctx.numPlayers === 5 && G.stormLevel === 15)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n};\r\n\r\nvar setupPlayers = (numPlayers) => {\r\n    var players = [];\r\n    var pos = getRandomInt(25);\r\n    while (pos === 12) {\r\n        pos = getRandomInt(25);\r\n    }\r\n    for (var i = 0; i < numPlayers; i++) {\r\n        players.push({\r\n            role: \"\",\r\n            position: pos,\r\n            water: 0,\r\n            maxWater: 0,\r\n        });\r\n    }\r\n    return players;\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\nvar setupTiles = () => {\r\n    var tiles = [];\r\n    for (var i = 0; i < 2; i++) {\r\n        tiles.push({\r\n            isRevealed: false,\r\n            sandCount: 0,\r\n            type: \"well\",\r\n            finalParts: []\r\n        });\r\n    }\r\n    tiles.push({\r\n        isRevealed: false,\r\n        sandCount: 0,\r\n        type: \"mirage\",\r\n        finalParts: []\r\n    });\r\n    for (var i = 0; i < 9; i++) {\r\n        tiles.push({\r\n            isRevealed: false,\r\n            sandCount: 0,\r\n            type: \"gear\",\r\n            finalParts: []\r\n        });\r\n    }\r\n    for (var i = 0; i < 3; i++) {\r\n        tiles.push({\r\n            isRevealed: false,\r\n            sandCount: 0,\r\n            type: \"tunnel\",\r\n            finalParts: []\r\n        })\r\n    }\r\n    for (var i = 0; i < 4; i++) {\r\n        for (var j = 0; j < 2; j++) {\r\n            //parts: A, B, C, D\r\n            //pos: 0 --> vertical, 1 --> horizontal\r\n            var part;\r\n            var pos;\r\n            if (i === 0) part = \"A\";\r\n            else if (i === 1) part = \"B\";\r\n            else if (i === 2) part = \"C\";\r\n            else if (i === 3) part = \"D\";\r\n            if (j === 0) pos = \"h\";\r\n            else if (j === 1) pos = \"v\"\r\n            tiles.push({\r\n                isRevealed: false,\r\n                sandCount: 0,\r\n                type: \"clue\",\r\n                part: part,\r\n                pos: pos,\r\n                finalParts: []\r\n            });\r\n        }\r\n    }\r\n    tiles.push({\r\n        isRevealed: false,\r\n        sandCount: 0,\r\n        type: \"launchpad\",\r\n        finalParts: []\r\n    })\r\n    shuffle(tiles);\r\n    tiles.splice(12, 0, {\r\n        isRevealed: false,\r\n        sandCount: 0,\r\n        type: \"storm\",\r\n        finalParts: []\r\n    });\r\n\r\n    //setup sand\r\n    const sandTiles = [2, 6, 8, 10, 14, 16, 18, 22];\r\n    for (var i = 0; i < sandTiles.length; i++) {\r\n        tiles[sandTiles[i]].sandCount = 1;\r\n    }\r\n    return tiles;\r\n}\r\n\r\n//https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array lol sorry :(\r\nfunction shuffle(array) {\r\n    var currentIndex = array.length, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex--;\r\n\r\n        // And swap it with the current element.\r\n        [array[currentIndex], array[randomIndex]] = [\r\n            array[randomIndex], array[currentIndex]];\r\n    }\r\n\r\n    return array;\r\n}","import React from 'react';\r\nimport './board.css'\r\n\r\nexport class ForbiddenDesertBoard extends React.Component {\r\n    state = {\r\n        assignID: 0,\r\n        assignDifficulty: false,\r\n        digging: false,\r\n        givingWater: false,\r\n        excavateErrorMsg: '',\r\n        waterErrorMsg: '',\r\n    }\r\n\r\n    assignRoleTo(id, role) {\r\n        this.props.moves.setPlayerInfo(id, role);\r\n        this.setState({ assignID: this.state.assignID + 1 });\r\n    }\r\n    assignDifficultyTo(diff) {\r\n        this.props.moves.setDifficulty(diff);\r\n        this.setState({ assignDifficulty: true })\r\n    }\r\n    //move, or dig if this.state.digging\r\n    onClickTile(id) {\r\n        if (this.isBuried()) {\r\n            //you can only dig when buried\r\n            if (this.isSameTile(id) && this.state.digging && this.props.G.tiles[id].sandCount > 0) {\r\n                this.props.moves.dig(id);\r\n                this.setState({ digging: false });\r\n            }\r\n        }\r\n        else if (this.isAdjacentTile(id) || this.isSameTile(id) ||\r\n            (this.isDiagonalTile(id) && this.props.G.players[this.props.ctx.currentPlayer].role === \"Explorer\")) {\r\n            if (this.state.digging && this.props.G.tiles[id].sandCount > 0) {\r\n                this.props.moves.dig(id);\r\n                this.setState({ digging: false });\r\n            }\r\n            else if (!this.isSameTile(id) && this.props.G.tiles[id].sandCount < 2 && !this.state.digging) {\r\n                this.props.moves.move(id);\r\n            }\r\n        }\r\n        //move through tunnel\r\n        else if (this.props.G.tiles[id].type === \"tunnel\" && this.props.G.tiles[id].isRevealed &&\r\n            this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].type === \"tunnel\" &&\r\n            this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].isRevealed &&\r\n            this.props.G.tiles[id].sandCount < 2 && !this.state.digging) {\r\n            this.props.moves.move(id);\r\n        }\r\n    }\r\n    excavate() {\r\n        this.props.moves.excavate();\r\n    }\r\n    giveWaterTo(id) {\r\n        this.props.moves.giveWater(id);\r\n        this.setState({ givingWater: false });\r\n    }\r\n    pickUpFinalPart() {\r\n        //no need to check condition; button won't show up if it's not met\r\n        this.props.moves.pickUpFinalPart();\r\n    }\r\n    mitigate() {\r\n        if (this.props.G.numDraws > 0) {\r\n            this.props.moves.mitigate();\r\n        }\r\n    }\r\n    collectWater() {\r\n        this.props.moves.collectWater();\r\n    }\r\n    isAdjacentTile(id) {\r\n        const currentPlayerPos = this.props.G.players[this.props.ctx.currentPlayer].position;\r\n        var check1 = id >= 0 && id <= 24 &&\r\n            (id === currentPlayerPos - 1 || id === currentPlayerPos + 1 ||\r\n                id === currentPlayerPos - 5 || id === currentPlayerPos + 5);\r\n        if (id === currentPlayerPos - 1 || id === currentPlayerPos + 1) {\r\n            //check2 is to prevent moving across the entire board, e.g. between 4-5, 9-10, etc.\r\n            var check2 = (Math.floor(id / 5) === Math.floor(currentPlayerPos / 5));\r\n            return check2;\r\n        }\r\n        else {\r\n            return check1;\r\n        }\r\n    }\r\n    isSameTile(id) {\r\n        return (id === this.props.G.players[this.props.ctx.currentPlayer].position);\r\n    }\r\n    isDiagonalTile(id) {\r\n        const currentPlayerPos = this.props.G.players[this.props.ctx.currentPlayer].position;\r\n        var check1 = id >= 0 && id <= 24 &&\r\n            (id === currentPlayerPos - 6 || id === currentPlayerPos - 4 ||\r\n                id === currentPlayerPos + 4 || id === currentPlayerPos + 6);\r\n        //check2 is to make sure id is exactly one row away from the current tile\r\n        var check2 = Math.abs(Math.floor(id / 5) - Math.floor(currentPlayerPos / 5)) === 1;\r\n        return check1 && check2;\r\n    }\r\n\r\n    //for idToStateClass purposes, not onClickTile\r\n    tileIsMovable(id) {\r\n        if (this.isBuried()) {\r\n            return false;\r\n        }\r\n        else {\r\n            return (this.isAdjacentTile(id)\r\n                || (this.props.G.players[this.props.ctx.currentPlayer].role === \"Explorer\" && this.isDiagonalTile(id))\r\n                || (this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].type === \"tunnel\"\r\n                    && this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].isRevealed\r\n                    && this.props.G.tiles[id].type === \"tunnel\" && this.props.G.tiles[id].isRevealed))\r\n                && !this.isSameTile(id) && this.props.G.tiles[id].sandCount < 2\r\n                && !this.state.digging && !this.isBuried();\r\n        }\r\n    }\r\n    //for idToStateClass purposes, not onClickTile\r\n    tileIsDiggable(id) {\r\n        if (this.isBuried()) {\r\n            return this.isSameTile(id) && this.state.digging && this.props.G.tiles[id].sandCount > 0;\r\n            //last condition here should always be true lol\r\n        }\r\n        else {\r\n            return (this.isAdjacentTile(id) || this.isSameTile(id)\r\n                || (this.props.G.players[this.props.ctx.currentPlayer].role === \"Explorer\" && this.isDiagonalTile(id)))\r\n                && (this.state.digging && this.props.G.tiles[id].sandCount > 0);\r\n        }\r\n    }\r\n    //returns whether current player is buried\r\n    isBuried() {\r\n        return this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].sandCount > 1;\r\n    }\r\n\r\n    render() {\r\n        //role selection screen\r\n        if (this.state.assignID < this.props.ctx.numPlayers) {\r\n            return (\r\n                <div className=\"center\">\r\n                    <div id=\"title\">\r\n                        Role Selection\r\n                    </div>\r\n                    <div className=\"header\">\r\n                        Choose role for Player {this.state.assignID}:\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Archeologist\"); }}>\r\n                            Archeologist\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Climber\"); }}>\r\n                            Climber\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Explorer\"); }}>\r\n                            Explorer\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Meteorologist\"); }}>\r\n                            Meteorologist\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Navigator\"); }}>\r\n                            Navigator\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Water Carrier\"); }}>\r\n                            Water Carrier\r\n                        </button>\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        <div>\r\n                            <p id=\"header\">Archeologist (🍼3)</p>\r\n                            <ul>\r\n                                <li>Removes 2 sand when digging instead of 1.</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Climber (🍼3)</p>\r\n                            <ul>\r\n                                <li>Carry: moves other players along with Climber. (Cost: free)</li>\r\n                                <li>Can move over tiles with 2 or more sand.</li>\r\n                                <li>Allows all players on Climber's current tile to leave even with 2 or more sand.</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Explorer (🍼4)</p>\r\n                            <ul>\r\n                                <li>Can move, dig, and use items diagonally.</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Meteorologist (🍼4)</p>\r\n                            <ul>\r\n                                <li>Mitigate: draw 1 less Storm at the end of the turn. (Cost: 1 action)</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Navigator (🍼4)</p>\r\n                            <ul>\r\n                                <li>Navigate: move another player up to 3 tiles. Climber and Explorer keep their abilities. (Cost: 1 action)</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Water Carrier (🍼5)</p>\r\n                            <ul>\r\n                                <li>Collect Water: take 2 water from an excavated well. (Cost: 1 action)</li>\r\n                                <li>Can give water to adjacent players (for free).</li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        //difficulty selection screen\r\n        if (this.state.assignDifficulty === false) {\r\n            return (\r\n                <div className=\"center\">\r\n                    <div id=\"title\">\r\n                        Difficulty Selection\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        <button onClick={() => { this.assignDifficultyTo(0); }}>\r\n                            Novice\r\n                        </button>\r\n                        <button onClick={() => { this.assignDifficultyTo(1); }}>\r\n                            Normal\r\n                        </button>\r\n                        <button onClick={() => { this.assignDifficultyTo(2); }}>\r\n                            Elite\r\n                        </button>\r\n                        <button onClick={() => { this.assignDifficultyTo(3); }}>\r\n                            Legendary\r\n                        </button>\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        (Difficulty sets the starting storm level.)\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        //adds class to render borders on appropriate tiles when this.state.digging\r\n        //or when moving (!this.state.digging)\r\n        let idToStateClass =\r\n            new Array(25).fill(\" \")\r\n                .map((currentClass, tileID, _) => {\r\n                    if (this.state.digging && this.tileIsDiggable(tileID)) {\r\n                        return `${currentClass} diggable` // Add the `diggable` class to this\r\n                    } else {\r\n                        return `${currentClass}`; // Do not add any more classes\r\n                    }\r\n                }) // You can chain additional `map` function calls if you need to add more classes to a tile based on the current state of your program\r\n                .map((currentClass, tileID, _) => {\r\n                    if (!this.state.digging && this.tileIsMovable(tileID)) {\r\n                        return `${currentClass} movable`\r\n                    } else {\r\n                        return `${currentClass}`;\r\n                    }\r\n                }) // May be problematic if you somehow add multiple classes that have conflicting properties\r\n\r\n        var tiles = [];\r\n        for (var i = 0; i < 5; i++) {\r\n            var row = [];\r\n            for (var j = 0; j < 5; j++) {\r\n                var tile = [];\r\n                const id = 5 * i + j;\r\n                if (this.props.G.tiles[id].type === \"storm\") {\r\n                    //render finalParts if it has at least one\r\n                    if (this.props.G.tiles[id].finalParts.length > 0) {\r\n                        tile.push(<div className=\"final-part\">Parts: {this.props.G.tiles[id].finalParts}</div>)\r\n                    }\r\n                    row.push(<td className=\"storm\">{tile}</td>);\r\n                }\r\n                else {\r\n                    var playersOnThisTile = [];\r\n                    //render players on current tile\r\n                    for (var k = 0; k < this.props.G.players.length; k++) {\r\n                        if (this.props.G.players[k].position === id) {\r\n                            playersOnThisTile.push(k);\r\n                        }\r\n                    }\r\n                    tile.push(<div className=\"player\">{playersOnThisTile}</div>);\r\n                    //render sandCount\r\n                    if (this.props.G.tiles[id].sandCount !== 0) {\r\n                        var sandIndicator = \"\";\r\n                        for (var l = 0; l < this.props.G.tiles[id].sandCount; l++) {\r\n                            sandIndicator = sandIndicator.concat(\"l\");\r\n                        }\r\n                        tile.push(<div className={this.props.G.tiles[id].sandCount > 1 ? \"sand red\" : \"sand\"}>\r\n                            {sandIndicator}</div>);\r\n                    }\r\n                    //render finalParts if it has at least one\r\n                    if (this.props.G.tiles[id].finalParts.length > 0) {\r\n                        tile.push(<div className=\"final-part\">Parts: {this.props.G.tiles[id].finalParts}</div>)\r\n                    }\r\n                    //render unrevealed backgrounds (set by className CSS)\r\n                    if (this.props.G.tiles[id].isRevealed === false) {\r\n                        row.push(<td key={id} className={(this.props.G.tiles[id].type === \"well\" || this.props.G.tiles[id].type === \"mirage\" ?\r\n                            \"unrevealed-water\" : \"unrevealed\") + idToStateClass[id]} onClick={() => this.onClickTile(id)}>{tile}</td>);\r\n                    }\r\n                    //render clue tile (assign the right className)\r\n                    else if (this.props.G.tiles[id].type === \"clue\") {\r\n                        const className = this.props.G.tiles[id].part + this.props.G.tiles[id].pos + idToStateClass[id];\r\n                        row.push(<td key={id} className={className + idToStateClass[id]}\r\n                            onClick={() => this.onClickTile(id)}>{tile}</td>);\r\n                    }\r\n                    else {\r\n                        row.push(<td key={id} className={this.props.G.tiles[id].type + idToStateClass[id]}\r\n                            onClick={() => this.onClickTile(id)}>{tile}</td>);\r\n                    }\r\n                }\r\n            }\r\n            tiles.push(<tr key={i}>{row}</tr>);\r\n        }\r\n\r\n        var actionButtons = [];\r\n        if (this.isBuried()) {\r\n            actionButtons.push(\r\n                <div>\r\n                    You are buried!\r\n                </div>\r\n            )\r\n        }\r\n        actionButtons.push(\r\n            <div>\r\n                <div>\r\n                    {this.state.digging ? \"Choose a tile to dig.\" : \"\"}\r\n                </div>\r\n                <button onClick={() => { this.setState({ digging: !this.state.digging }); }}>\r\n                    Dig\r\n                </button>\r\n                <button onClick={() => {\r\n                    if (this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].isRevealed === true) {\r\n                        this.setState({ excavateErrorMsg: \"This tile is already revealed!\" })\r\n                        setTimeout(() => this.setState({ excavateErrorMsg: '' }), 3000);\r\n                    }\r\n                    else if (this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].sandCount !== 0) {\r\n                        this.setState({ excavateErrorMsg: \"Remove all sand on this tile before excavating!\" })\r\n                        setTimeout(() => this.setState({ excavateErrorMsg: '' }), 3000);\r\n                    }\r\n                    else {\r\n                        this.excavate();\r\n                    }\r\n                }}>\r\n                    Excavate\r\n                </button>\r\n            </div>\r\n        );\r\n        actionButtons.push(\r\n            <div>\r\n                {this.state.excavateErrorMsg}\r\n            </div>\r\n        )\r\n        actionButtons.push(\r\n            <button onClick={() => { this.setState({ givingWater: !this.state.givingWater }); }}>\r\n                Give water to:\r\n            </button>\r\n        );\r\n        //give water to popup buttons\r\n        if (this.state.givingWater) {\r\n            var someoneFound = false;\r\n            for (var i = 0; i < this.props.G.players.length; i++) {\r\n                //this took me hours to fix.. if you don't assign i to a constant,\r\n                //and use i for giveWaterTo parameter, then the value is going \r\n                //to be, like, different every time you call it. or something.\r\n                const index = i;\r\n                var errorMsg = '';\r\n                if (index != this.props.ctx.currentPlayer\r\n                    && (this.isSameTile(this.props.G.players[index].position)\r\n                        || (this.props.G.players[this.props.ctx.currentPlayer].role === \"Water Carrier\" &&\r\n                            this.isAdjacentTile(this.props.G.players[index].position)))) {\r\n                    actionButtons.push(\r\n                        <button onClick={() => {\r\n                            if (this.props.G.players[this.props.ctx.currentPlayer].water === 0) {\r\n                                this.setState({ givingWater: false, waterErrorMsg: \"You don't have enough water!\" });\r\n                                setTimeout(() => this.setState({ waterErrorMsg: '' }), 3000);\r\n                            }\r\n                            else if (this.props.G.players[index].water === this.props.G.players[index].maxWater) {\r\n                                this.setState({ givingWater: false, waterErrorMsg: \"Target has full water!\" });\r\n                                setTimeout(() => this.setState({ waterErrorMsg: '' }), 3000);\r\n                            }\r\n                            else {\r\n                                this.giveWaterTo(index);\r\n                            }\r\n                        }}>\r\n                            Player {index}\r\n                        </button>\r\n                    );\r\n                    someoneFound = true;\r\n                }\r\n            }\r\n            if (!someoneFound) {\r\n                if (this.props.G.players[this.props.ctx.currentPlayer].role === \"Water Carrier\") {\r\n                    this.setState({ givingWater: false, waterErrorMsg: \"No players to give water to! (They must be on the same or an adjacent tile.)\" });\r\n                }\r\n                else {\r\n                    this.setState({ givingWater: false, waterErrorMsg: \"No players to give water to! (They must be on the same tile.)\" });\r\n                }\r\n                setTimeout(() => this.setState({ waterErrorMsg: '' }), 3000);\r\n            }\r\n        }\r\n        actionButtons.push(\r\n            <div>\r\n                {this.state.waterErrorMsg}\r\n            </div>\r\n        )\r\n        //Mitigate for meteorologist only\r\n        if (this.props.G.players[this.props.ctx.currentPlayer].role === \"Meteorologist\") {\r\n            actionButtons.push(\r\n                <button onClick={() => { this.mitigate(); }}>\r\n                    Mitigate\r\n                </button>\r\n            )\r\n        }\r\n        //collectWater for water carrier only\r\n        if (this.props.G.players[this.props.ctx.currentPlayer].role === \"Water Carrier\"\r\n            && this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].type === \"well\"\r\n            && this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].isRevealed\r\n            && this.props.G.players[this.props.ctx.currentPlayer].water < this.props.G.players[this.props.ctx.currentPlayer].maxWater) {\r\n            actionButtons.push(\r\n                <button onClick={() => { this.collectWater(); }}>\r\n                    Collect water\r\n                </button>\r\n            )\r\n        }\r\n        //only show pickup part button when the tile of the current player position\r\n        //has at least 1 finalPart, and the tile is revealed\r\n        if (this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].isRevealed &&\r\n            this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].finalParts.length > 0) {\r\n            actionButtons.push(\r\n                <button onClick={() => { this.pickUpFinalPart(); }}>\r\n                    Pick up part\r\n                </button>\r\n            )\r\n        }\r\n        actionButtons.push(\r\n            <div>\r\n                <button onClick={() => { this.props.undo(); }}>\r\n                    Undo\r\n                </button>\r\n                <button onClick={() => { this.props.moves.doNothing(); }}>\r\n                    Do nothing\r\n                </button>\r\n            </div>\r\n        )\r\n\r\n        var rightbar = [];\r\n        //player info\r\n        rightbar.push(<div>Players:</div>)\r\n        var playerInfoList = [];\r\n        for (var i = 0; i < this.props.ctx.numPlayers; i++) {\r\n            playerInfoList.push(\r\n                <div>\r\n                    {i} - {this.props.G.players[i].role} 🍼 {this.props.G.players[i].water} / {this.props.G.players[i].maxWater}\r\n                </div>\r\n            );\r\n        }\r\n        rightbar.push(playerInfoList);\r\n\r\n        rightbar.push(\r\n            <div>\r\n                <p></p>\r\n                <div>Current storm level: {this.props.G.stormLevel}</div>\r\n                <p></p>\r\n            </div>\r\n        );\r\n\r\n        //storm deck last turn\r\n        rightbar.push(\r\n            <div>\r\n                <p></p>\r\n                End of last turn:\r\n            </div>\r\n        );\r\n        for (var i = 0; i < this.props.G.lastDrawType.length; i++) {\r\n            rightbar.push(\r\n                <div>\r\n                    {this.props.G.lastDrawType[i]}\r\n                </div>\r\n            );\r\n        }\r\n        //currently collected parts\r\n        var partList = [];\r\n        for (var i = 0; i < this.props.G.collectedParts.length; i++) {\r\n            var color;\r\n            if (this.props.G.collectedParts[i] === \"A\") {\r\n                color = \"red\";\r\n            }\r\n            else if (this.props.G.collectedParts[i] === \"B\") {\r\n                color = \"green\";\r\n            }\r\n            else if (this.props.G.collectedParts[i] === \"C\") {\r\n                color = \"blue\";\r\n            }\r\n            else if (this.props.G.collectedParts[i] === \"D\") {\r\n                color = \"purple\";\r\n            }\r\n            partList.push(\r\n                <div className={color}>\r\n                    {this.props.G.collectedParts[i]}\r\n                </div>\r\n            );\r\n        }\r\n        if (this.props.G.collectedParts.length === 0) {\r\n            rightbar.push(\r\n                <div>\r\n                    <p></p>\r\n                    Collected parts (4 total): none\r\n                </div>\r\n            );\r\n        }\r\n        else {\r\n            rightbar.push(\r\n                <div>\r\n                    <p></p>\r\n                    Collected parts (4 total): {partList}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        var draw3, draw4, draw5, draw6, death;\r\n        if (this.props.ctx.numPlayers === 2) {\r\n            draw3 = \"1 - 3\";\r\n            draw4 = \"4 - 7\";\r\n            draw5 = \"8 - 10\";\r\n            draw6 = \"11 - 12\";\r\n            death = \"13\";\r\n        }\r\n        else if (this.props.ctx.numPlayers === 3 || this.props.ctx.numPlayers === 4) {\r\n            draw3 = \"1 - 4\";\r\n            draw4 = \"5 - 8\";\r\n            draw5 = \"9 - 11\";\r\n            draw6 = \"12 - 13\";\r\n            death = \"14\";\r\n        }\r\n        else if (this.props.ctx.numPlayers === 5) {\r\n            draw3 = \"1 - 5\";\r\n            draw4 = \"6 - 9\";\r\n            draw5 = \"10 - 12\";\r\n            draw6 = \"13 - 14\";\r\n            death = \"15\";\r\n        }\r\n        rightbar.push(\r\n            <div className=\"small\">\r\n                <p></p>\r\n                <div>\r\n                    Draw 2 at storm level 0\r\n                </div>\r\n                <div>\r\n                    Draw 3 at levels {draw3}\r\n                </div>\r\n                <div>\r\n                    Draw 4 at levels {draw4}\r\n                </div>\r\n                <div>\r\n                    Draw 5 at levels {draw5}\r\n                </div>\r\n                <div>\r\n                    Draw 6 at levels {draw6}\r\n                </div>\r\n                <div>\r\n                    Game over at level {death}\r\n                </div>\r\n                <p></p>\r\n                <div>\r\n                    Chance of Sun Beats Down: 12.9%\r\n                </div>\r\n                <div>\r\n                    Chance of Storm Picks Up: 9.7%\r\n                </div>\r\n                <p></p>\r\n                <div>\r\n                    Archeologist: removes 2 sand when digging\r\n                </div>\r\n                <div>\r\n                    Climber: move over any tile; allows everyone on current tile to move. Ability: Carry (free)\r\n                </div>\r\n                <div>\r\n                    Explorer: move, dig, and use items diagonally\r\n                </div>\r\n                <div>\r\n                    Meteorologist: Ability: Mitigate (cost: 1 action)\r\n                </div>\r\n                <div>\r\n                    Navigator: Ability: Navigate (cost: 1 action)\r\n                </div>\r\n                <div>\r\n                    Water Carrier: give water to adjacent players. Ability: Collect 2 Water from well (free)\r\n                </div>\r\n            </div>\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"fl\">\r\n                    <div className=\"header center\">\r\n                        <div>\r\n                            Player {this.props.ctx.currentPlayer}'s turn\r\n                        </div>\r\n                        <div>\r\n                            Actions left in turn: {4 - this.props.ctx.numMoves}\r\n                        </div>\r\n                    </div>\r\n                    <table>\r\n                        <tbody>{tiles}</tbody>\r\n                    </table>\r\n                    <div className=\"center\">\r\n                        {actionButtons}\r\n                    </div>\r\n                </div>\r\n                <div className=\"fl\">\r\n                    {rightbar}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Client } from 'boardgame.io/react';\r\nimport { ForbiddenDesert } from './Game';\r\nimport { ForbiddenDesertBoard } from './board';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  state = { numPlayers: null };\r\n\r\n  render() {\r\n    if (this.state.numPlayers === null) {\r\n      return (\r\n        <div className=\"center\">\r\n          <div>\r\n            !! THIS IS A WORK IN PROGRESS !!\r\n          </div>\r\n          <div id=\"title\">\r\n            FORBIDDEN DESERT\r\n          </div>\r\n          <div>\r\n            Based off the original game designed by Gamewright.\r\n          </div>\r\n          <div>\r\n            <a href=\"https://www.gamewright.com/gamewright/pdfs/Rules/ForbiddenDesertTM-RULES.pdf\">Official rules manual</a>\r\n          </div>\r\n          <div>\r\n            <a href=\"https://boardgamegeek.com/boardgame/136063/forbidden-desert\">BoardGameGeek listing</a>\r\n          </div>\r\n          <div>\r\n            <a href=\"https://github.com/hwabis/forbidden-desert\">Source code</a>\r\n          </div>\r\n          <div id=\"header\">\r\n            <p>Select number of players:</p>\r\n            <button onClick={() => this.setState({ numPlayers: 2 })}>\r\n              2\r\n            </button>\r\n            <button onClick={() => this.setState({ numPlayers: 3 })}>\r\n              3\r\n            </button>\r\n            <button onClick={() => this.setState({ numPlayers: 4 })}>\r\n              4\r\n            </button>\r\n            <button onClick={() => this.setState({ numPlayers: 5 })}>\r\n              5\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    else {\r\n      const ForbiddenDesertClient = Client({\r\n        game: ForbiddenDesert,\r\n        numPlayers: this.state.numPlayers,\r\n        board: ForbiddenDesertBoard,\r\n      });\r\n      return (\r\n        <div>\r\n          <ForbiddenDesertClient />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}