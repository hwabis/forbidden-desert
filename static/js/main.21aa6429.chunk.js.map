{"version":3,"sources":["Game.js","board.js","App.js","index.js"],"names":["ForbiddenDesert","setup","ctx","players","setupPlayers","numPlayers","tiles","setupTiles","moves","move","G","pos","currentPlayer","position","dig","sandCount","excavate","isRevealed","undoable","doNothing","events","endTurn","setPlayerInfo","id","role","maxWater","water","noLimit","removeWater","turn","moveLimit","endIf","i","length","max","Math","floor","random","push","type","j","part","array","randomIndex","currentIndex","shuffle","splice","sandTiles","ForbiddenDesertBoard","state","assignID","digging","this","props","setState","isAdjacentTile","isSameTile","isBuried","currentPlayerPos","className","onClick","assignRoleTo","row","tile","playersOnThisTile","k","sandIndicator","l","concat","onClickTile","playerInfoList","actionButtons","undo","numMoves","React","Component","App","href","ForbiddenDesertClient","Client","game","board","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21aa6429.chunk.js","sourcesContent":["export const ForbiddenDesert = {\r\n    //tile: \"isRevealed\", \"sandCount\"\r\n    //tile types: \"well\", \"mirage\", \"gear\", \"tunnel\", \"clue\", \"launchpad\", \"storm\"\r\n    //tile: \"part\" and \"pos\" only for type \"clue\"\r\n    //parts are \"0\", \"1\", \"2\", \"3\"; pos are \"0\" (vertical) and \"1\" (horizontal)\r\n    setup: (ctx) => ({\r\n        players: setupPlayers(ctx.numPlayers),\r\n        tiles: setupTiles(),\r\n    }),\r\n\r\n    moves: {\r\n        move: (G, ctx, pos) => {\r\n            G.players[ctx.currentPlayer].position = pos;\r\n        },\r\n        dig: (G, ctx, pos) => {\r\n            G.tiles[pos].sandCount--;\r\n        },\r\n        excavate: {\r\n            move: (G, ctx) => {\r\n                G.tiles[G.players[ctx.currentPlayer].position].isRevealed = true;\r\n            },\r\n            undoable: false\r\n        },\r\n        doNothing: (G, ctx) => {\r\n            ctx.events.endTurn();\r\n        },\r\n        setPlayerInfo: {\r\n            move: (G, ctx, id, role) => {\r\n                G.players[id].role = role;\r\n                if (role === \"Archeologist\" || role === \"Climber\") {\r\n                    G.players[id].maxWater = 3;\r\n                    G.players[id].water = 3;\r\n                }\r\n                else if (role === \"Explorer\" || role === \"Meteorologist\" || role === \"Navigator\") {\r\n                    G.players[id].maxWater = 4;\r\n                    G.players[id].water = 4;\r\n                }\r\n                else {\r\n                    G.players[id].maxWater = 5;\r\n                    G.players[id].water = 5;\r\n                }\r\n            },\r\n            undoable: false,\r\n            noLimit: true\r\n        },\r\n        //DEBUG ONLY\r\n        removeWater: {\r\n            move: (G, ctx, id) => {\r\n                G.players[id].water -= 1;\r\n            },\r\n            noLimit: true\r\n        },\r\n    },\r\n\r\n    turn: {\r\n        moveLimit: 4,\r\n    },\r\n\r\n    endIf: (G, ctx) => {\r\n        for (var i = 0; i < G.players.length; i++) {\r\n            if (G.players[i].water === 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    },\r\n};\r\n\r\nvar setupPlayers = (numPlayers) => {\r\n    var players = [];\r\n    var pos = getRandomInt(25);\r\n    for (var i = 0; i < numPlayers; i++) {\r\n        players.push({\r\n            role: \"\",\r\n            position: pos,\r\n            water: -1,\r\n            maxWater: -1,\r\n        });\r\n    }\r\n    return players;\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * max);\r\n}\r\n\r\nvar setupTiles = () => {\r\n    var tiles = [];\r\n    for (var i = 0; i < 2; i++) {\r\n        tiles.push({\r\n            isRevealed: false,\r\n            sandCount: 0,\r\n            type: \"well\",\r\n        });\r\n    }\r\n    tiles.push({\r\n        isRevealed: false,\r\n        sandCount: 0,\r\n        type: \"mirage\",\r\n    });\r\n    for (var i = 0; i < 9; i++) {\r\n        tiles.push({\r\n            isRevealed: false,\r\n            sandCount: 0,\r\n            type: \"gear\",\r\n        });\r\n    }\r\n    for (var i = 0; i < 3; i++) {\r\n        tiles.push({\r\n            isRevealed: false,\r\n            sandCount: 0,\r\n            type: \"tunnel\",\r\n        })\r\n    }\r\n    for (var i = 0; i < 4; i++) {\r\n        for (var j = 0; j < 2; j++) {\r\n            //parts: 0, 1, 2, 3\r\n            //pos: 0 --> vertical, 1 --> horizontal\r\n            tiles.push({\r\n                isRevealed: false,\r\n                sandCount: 0,\r\n                type: \"clue\",\r\n                part: i,\r\n                pos: j,\r\n            });\r\n        }\r\n    }\r\n    tiles.push({\r\n        isRevealed: false,\r\n        sandCount: 0,\r\n        type: \"launchpad\",\r\n    })\r\n    shuffle(tiles);\r\n    tiles.splice(12, 0, {\r\n        isRevealed: false,\r\n        sandCount: 0,\r\n        type: \"storm\",\r\n    });\r\n\r\n    //setup sand\r\n    const sandTiles = [2, 6, 8, 10, 14, 16, 18, 22];\r\n    for (var i = 0; i < sandTiles.length; i++) {\r\n        tiles[sandTiles[i]].sandCount = 1;\r\n    }\r\n    return tiles;\r\n}\r\n\r\n//https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array lol sorry :(\r\nfunction shuffle(array) {\r\n    var currentIndex = array.length, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex--;\r\n\r\n        // And swap it with the current element.\r\n        [array[currentIndex], array[randomIndex]] = [\r\n            array[randomIndex], array[currentIndex]];\r\n    }\r\n\r\n    return array;\r\n}\r\n","import React from 'react';\r\nimport './board.css';\r\n\r\nexport class ForbiddenDesertBoard extends React.Component {\r\n    state = {\r\n        assignID: 0,\r\n        digging: false\r\n    }\r\n\r\n    assignRoleTo(id, role) {\r\n        this.props.moves.setPlayerInfo(id, role);\r\n        this.setState({ assignID: this.state.assignID + 1 });\r\n    }\r\n    onClickTile(id) {\r\n        if (this.isAdjacentTile(id) || this.isSameTile(id)) {\r\n            if (this.state.digging && this.props.G.tiles[id].sandCount > 0) {\r\n                this.props.moves.dig(id);\r\n                this.setState({ digging: false });\r\n            }\r\n            else if (!this.isSameTile(id) &&\r\n                this.props.G.tiles[id].sandCount < 2 &&\r\n                !this.state.digging &&\r\n                !this.isBuried()) {\r\n                this.props.moves.move(id);\r\n            }\r\n        }\r\n    }\r\n    excavate() {\r\n        if (this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].isRevealed === false) {\r\n            //holy cow what a long sentence lol\r\n            this.props.moves.excavate();\r\n        }\r\n    }\r\n    isAdjacentTile(id) {\r\n        const currentPlayerPos = this.props.G.players[this.props.ctx.currentPlayer].position;\r\n        return (id >= 0 && id <= 24 &&\r\n            (id === currentPlayerPos - 1 || id === currentPlayerPos + 1 ||\r\n                id === currentPlayerPos - 5 || id === currentPlayerPos + 5));\r\n    }\r\n    isSameTile(id) {\r\n        return (id === this.props.G.players[this.props.ctx.currentPlayer].position);\r\n    }\r\n    //returns whether current player is buried\r\n    isBuried() {\r\n        return this.props.G.tiles[this.props.G.players[this.props.ctx.currentPlayer].position].sandCount > 1;\r\n    }\r\n\r\n    render() {\r\n        if (this.state.assignID < this.props.ctx.numPlayers) {\r\n            return (\r\n                <div className=\"center\">\r\n                    <div id=\"title\">\r\n                        Role Selection\r\n                    </div>\r\n                    <div className=\"header\">\r\n                        Choose role for Player {this.state.assignID}:\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Archeologist\"); }}>\r\n                            Archeologist\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Climber\"); }}>\r\n                            Climber\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Explorer\"); }}>\r\n                            Explorer\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Meteorologist\"); }}>\r\n                            Meteorologist\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Navigator\"); }}>\r\n                            Navigator\r\n                        </button>\r\n                        <button onClick={() => { this.assignRoleTo(this.state.assignID, \"Water Carrier\"); }}>\r\n                            Water Carrier\r\n                        </button>\r\n                    </div>\r\n                    <p></p>\r\n                    <div>\r\n                        <div>\r\n                            <p id=\"header\">Archeologist</p>\r\n                            <ul>\r\n                                <li>Removes 2 sand when digging instead of 1.</li>\r\n                                <li>Water capacity: 3</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Climber</p>\r\n                            <ul>\r\n                                <li>Carry: moves other players along with Climber. (Cost: free)</li>\r\n                                <li>Can move over tiles with 2 or more sand.</li>\r\n                                <li>Allows all players on Climber's current tile to leave even with 2 or more sand.</li>\r\n                                <li>Water capacity: 3</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Explorer</p>\r\n                            <ul>\r\n                                <li>Can move, dig, and use items diagonally.</li>\r\n                                <li>Water capacity: 4</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Meteorologist</p>\r\n                            <ul>\r\n                                <li>Mitigate: draw 1 less Storm at the end of the turn. (Cost: 1 action)</li>\r\n                                <li>Water capacity: 4</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Navigator</p>\r\n                            <ul>\r\n                                <li>Direct: move another player up to 3 tiles. Climber and Explorer keep their abilities. (Cost: 1 action)</li>\r\n                                <li>Water capacity: 4</li>\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"header\">Water Carrier</p>\r\n                            <ul>\r\n                                <li>Gather Water: take 2 water from an excavated well. (Cost: 1 action)</li>\r\n                                <li>Give Water: give 1 water to an adjacent player. (Cost: free)</li>\r\n                                <li>Water capacity: 5</li>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            );\r\n        }\r\n        var tiles = [];\r\n        for (var i = 0; i < 5; i++) {\r\n            var row = [];\r\n            for (var j = 0; j < 5; j++) {\r\n                var tile = [];\r\n                const id = 5 * i + j;\r\n                if (this.props.G.tiles[id].type === \"storm\") {\r\n                    row.push(<td key={id} id=\"storm\"></td>);\r\n                }\r\n                else {\r\n                    var playersOnThisTile = [];\r\n                    //render players on current tile\r\n                    for (var k = 0; k < this.props.G.players.length; k++) {\r\n                        if (this.props.G.players[k].position === id) {\r\n                            playersOnThisTile.push(k);\r\n                        }\r\n                    }\r\n                    tile.push(<div className=\"player\">{playersOnThisTile}</div>);\r\n                    //render sandCount\r\n                    if (this.props.G.tiles[id].sandCount !== 0) {\r\n                        var sandIndicator = \"\";\r\n                        for (var l = 0; l < this.props.G.tiles[id].sandCount; l++) {\r\n                            sandIndicator = sandIndicator.concat(\"l\");\r\n                        }\r\n                        tile.push(<div className={this.props.G.tiles[id].sandCount > 1 ? \"sand red\" : \"sand\"}>\r\n                            Sand: {sandIndicator}</div>);\r\n                    }\r\n                    if (this.props.G.tiles[id].isRevealed === false) {\r\n                        row.push(<td key={id} className={this.props.G.tiles[id].type === \"well\" || this.props.G.tiles[id].type === \"mirage\" ?\r\n                            \"unrevealed-water\" : \"unrevealed\"} onClick={() => this.onClickTile(id)}>{tile}</td>);\r\n                    }\r\n                    else {\r\n                        row.push(<td key={id} className={this.props.G.tiles[id].type} \r\n                            onClick={() => this.onClickTile(id)}>{tile}</td>);\r\n                    }\r\n                }\r\n            }\r\n            tiles.push(<tr key={i}>{row}</tr>);\r\n        }\r\n\r\n        var playerInfoList = [];\r\n        for (var i = 0; i < this.props.ctx.numPlayers; i++) {\r\n            playerInfoList.push(\r\n                <div>\r\n                    {i} - {this.props.G.players[i].role} 🍼 {this.props.G.players[i].water} / {this.props.G.players[i].maxWater}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        var actionButtons = [];\r\n        actionButtons.push(\r\n            <div>\r\n                <button onClick={() => { this.setState({ digging: !this.state.digging }); }}>\r\n                    Dig\r\n                </button>\r\n                <div>\r\n                    {this.state.digging ? \"Choose a tile to dig.\" : \"\"}\r\n                </div>\r\n                <button onClick={() => { this.excavate(); }}>\r\n                    Excavate\r\n                </button>\r\n                <button onClick={() => { this.props.undo(); }}>\r\n                    Undo\r\n                </button>\r\n                <button onClick={() => { this.props.moves.doNothing(); }}>\r\n                    Do Nothing\r\n                </button>\r\n            </div>\r\n        )\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"fl\">\r\n                    <div className=\"header center\">\r\n                        <div>\r\n                            Player {this.props.ctx.currentPlayer}'s turn\r\n                        </div>\r\n                        <div>\r\n                            Actions left in turn: {4 - this.props.ctx.numMoves}\r\n                        </div>\r\n                    </div>\r\n                    <table>\r\n                        <tbody>{tiles}</tbody>\r\n                    </table>\r\n                    <div className=\"center\">\r\n                        {actionButtons}\r\n                    </div>\r\n                </div>\r\n                <div className=\"fl\">\r\n                    <div>\r\n                        Players:\r\n                    </div>\r\n                    {playerInfoList}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { Client } from 'boardgame.io/react';\r\nimport { ForbiddenDesert } from './Game';\r\nimport { ForbiddenDesertBoard } from './board';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  state = { numPlayers: null };\r\n\r\n  render() {\r\n    if (this.state.numPlayers === null) {\r\n      return (\r\n        <div className=\"center\">\r\n          <div id=\"title\">\r\n            FORBIDDEN DESERT\r\n          </div>\r\n          <div>\r\n            Based off the original game designed by Matt Leacock.\r\n          </div>\r\n          <div>\r\n            <a href=\"https://www.gamewright.com/gamewright/pdfs/Rules/ForbiddenDesertTM-RULES.pdf\">Official rules manual</a>\r\n          </div>\r\n          <div>\r\n            <a href=\"https://boardgamegeek.com/boardgame/136063/forbidden-desert\">BoardGameGeek listing</a>\r\n          </div>\r\n          <div>\r\n            <a href=\"https://github.com/hwabis/forbidden-desert\">Source code</a>\r\n          </div>\r\n          <div id=\"header\">\r\n            <p>Select number of players:</p>\r\n            <button onClick={() => this.setState({ numPlayers: 2 })}>\r\n              2\r\n            </button>\r\n            <button onClick={() => this.setState({ numPlayers: 3 })}>\r\n              3\r\n            </button>\r\n            <button onClick={() => this.setState({ numPlayers: 4 })}>\r\n              4\r\n            </button>\r\n            <button onClick={() => this.setState({ numPlayers: 5 })}>\r\n              5\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n    else {\r\n      const ForbiddenDesertClient = Client({\r\n        game: ForbiddenDesert,\r\n        numPlayers: this.state.numPlayers,\r\n        board: ForbiddenDesertBoard,\r\n      });\r\n      return (\r\n        <div>\r\n          <ForbiddenDesertClient />\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}